/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface MystikoDepositConfigInterface extends utils.Interface {
  contractName: 'MystikoDepositConfig';
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'daoRegistry()': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'maxDepositAmountMap(address)': FunctionFragment;
    'minDepositAmountMap(address)': FunctionFragment;
    'queryMaxDepositAmount(address)': FunctionFragment;
    'queryMinDepositAmount(address)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'updateMaxDepositAmount(address,uint256)': FunctionFragment;
    'updateMinDepositAmount(address,uint256)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'daoRegistry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'maxDepositAmountMap', values: [string]): string;
  encodeFunctionData(functionFragment: 'minDepositAmountMap', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryMaxDepositAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryMinDepositAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'updateMaxDepositAmount', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateMinDepositAmount', values: [string, BigNumberish]): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'daoRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDepositAmountMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minDepositAmountMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryMaxDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryMinDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMaxDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMinDepositAmount', data: BytesLike): Result;

  events: {
    'MaxDepositAmountUpdated(address,uint256)': EventFragment;
    'MinDepositAmountUpdated(address,uint256)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'MaxDepositAmountUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinDepositAmountUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
}

export type MaxDepositAmountUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { pool: string; maxDepositAmount: BigNumber }
>;

export type MaxDepositAmountUpdatedEventFilter = TypedEventFilter<MaxDepositAmountUpdatedEvent>;

export type MinDepositAmountUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { pool: string; minDepositAmount: BigNumber }
>;

export type MinDepositAmountUpdatedEventFilter = TypedEventFilter<MinDepositAmountUpdatedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface MystikoDepositConfig extends BaseContract {
  contractName: 'MystikoDepositConfig';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MystikoDepositConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    daoRegistry(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

    maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryMaxDepositAmount(_pool: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryMinDepositAmount(_pool: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    updateMaxDepositAmount(
      _pool: string,
      _maxDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateMinDepositAmount(
      _pool: string,
      _minDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  daoRegistry(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

  maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  queryMaxDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  queryMinDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    callerConfirmation: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  updateMaxDepositAmount(
    _pool: string,
    _maxDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateMinDepositAmount(
    _pool: string,
    _minDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    daoRegistry(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMaxDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(role: BytesLike, callerConfirmation: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    updateMaxDepositAmount(
      _pool: string,
      _maxDepositAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateMinDepositAmount(
      _pool: string,
      _minDepositAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {
    'MaxDepositAmountUpdated(address,uint256)'(
      pool?: string | null,
      maxDepositAmount?: null,
    ): MaxDepositAmountUpdatedEventFilter;
    MaxDepositAmountUpdated(
      pool?: string | null,
      maxDepositAmount?: null,
    ): MaxDepositAmountUpdatedEventFilter;

    'MinDepositAmountUpdated(address,uint256)'(
      pool?: string | null,
      minDepositAmount?: null,
    ): MinDepositAmountUpdatedEventFilter;
    MinDepositAmountUpdated(
      pool?: string | null,
      minDepositAmount?: null,
    ): MinDepositAmountUpdatedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    daoRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMaxDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    updateMaxDepositAmount(
      _pool: string,
      _maxDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateMinDepositAmount(
      _pool: string,
      _minDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryMaxDepositAmount(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryMinDepositAmount(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateMaxDepositAmount(
      _pool: string,
      _maxDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateMinDepositAmount(
      _pool: string,
      _minDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
