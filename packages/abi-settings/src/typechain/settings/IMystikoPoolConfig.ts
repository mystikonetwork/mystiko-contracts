/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface IMystikoPoolConfigInterface extends utils.Interface {
  contractName: 'IMystikoPoolConfig';
  functions: {
    'queryMinRollupFee(address)': FunctionFragment;
    'queryTransferDisable(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'queryMinRollupFee', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryTransferDisable', values: [string]): string;

  decodeFunctionResult(functionFragment: 'queryMinRollupFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryTransferDisable', data: BytesLike): Result;

  events: {};
}

export interface IMystikoPoolConfig extends BaseContract {
  contractName: 'IMystikoPoolConfig';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMystikoPoolConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    queryMinRollupFee(_pool: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryTransferDisable(_pool: string, overrides?: CallOverrides): Promise<[boolean]>;
  };

  queryMinRollupFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  queryTransferDisable(_pool: string, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    queryMinRollupFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryTransferDisable(_pool: string, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    queryMinRollupFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryTransferDisable(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    queryMinRollupFee(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryTransferDisable(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
