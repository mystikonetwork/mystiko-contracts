/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export type WrappedVerifierStruct = { verifier: string; enabled: boolean };

export type WrappedVerifierStructOutput = [string, boolean] & {
  verifier: string;
  enabled: boolean;
};

export type RelayerValidateParamsStruct = { pool: string; relayer: string };

export type RelayerValidateParamsStructOutput = [string, string] & {
  pool: string;
  relayer: string;
};

export type RollerValidateParamsStruct = {
  pool: string;
  roller: string;
  rollupSize: BigNumberish;
  queueCount: BigNumberish;
  includedCount: BigNumberish;
};

export type RollerValidateParamsStructOutput = [string, string, BigNumber, BigNumber, BigNumber] & {
  pool: string;
  roller: string;
  rollupSize: BigNumber;
  queueCount: BigNumber;
  includedCount: BigNumber;
};

export type CertificateParamsStruct = {
  account: string;
  asset: string;
  deadline: BigNumberish;
  signature: BytesLike;
};

export type CertificateParamsStructOutput = [string, string, BigNumber, string] & {
  account: string;
  asset: string;
  deadline: BigNumber;
  signature: string;
};

export interface MystikoSettingsBaseInterface extends utils.Interface {
  contractName: 'MystikoSettingsBase';
  functions: {
    'AUDITOR_COUNT()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'associatedPool(address)': FunctionFragment;
    'certificate()': FunctionFragment;
    'daoRegistry()': FunctionFragment;
    'depositDisableMap(address)': FunctionFragment;
    'disableRollupVerifier(uint32)': FunctionFragment;
    'disableSanctionsCheck()': FunctionFragment;
    'disableTransactVerifier(uint32,uint32)': FunctionFragment;
    'enableRollupVerifier(uint32)': FunctionFragment;
    'enableSanctionsCheck()': FunctionFragment;
    'enableTransactVerifier(uint32,uint32)': FunctionFragment;
    'getCertificateIssuer()': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'isCertificateCheckEnabled()': FunctionFragment;
    'isDepositDisable(address)': FunctionFragment;
    'isSanctioned(address)': FunctionFragment;
    'isTransferDisable(address)': FunctionFragment;
    'maxDepositAmountMap(address)': FunctionFragment;
    'minDepositAmountMap(address)': FunctionFragment;
    'minRollupFeeMap(address)': FunctionFragment;
    'queryAllAuditorPublicKeys()': FunctionFragment;
    'queryAssociatedPool(address)': FunctionFragment;
    'queryAuditorPublicKey(uint256)': FunctionFragment;
    'queryMaxDepositAmount(address)': FunctionFragment;
    'queryMinDepositAmount(address)': FunctionFragment;
    'queryMinRollupFee(address)': FunctionFragment;
    'queryRollupVerifier(uint32)': FunctionFragment;
    'queryTransactVerifier(uint32,uint32)': FunctionFragment;
    'relayerPool()': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'rollerPool()': FunctionFragment;
    'sanctionsCheck()': FunctionFragment;
    'sanctionsList()': FunctionFragment;
    'setAdminRole()': FunctionFragment;
    'setAssociatedPool(address,address)': FunctionFragment;
    'setAuditorPublicKey(uint256,uint256)': FunctionFragment;
    'setCertificateVerifier(address)': FunctionFragment;
    'setDepositDisable(address,bool)': FunctionFragment;
    'setMaxDepositAmount(address,uint256)': FunctionFragment;
    'setMinDepositAmount(address,uint256)': FunctionFragment;
    'setMinRollupFee(address,uint256)': FunctionFragment;
    'setRelayerPool(address)': FunctionFragment;
    'setRollerPool(address)': FunctionFragment;
    'setSanctionsListAddress(address)': FunctionFragment;
    'setTransferDisable(address,bool)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'transferDisableMap(address)': FunctionFragment;
    'validateRelayer((address,address))': FunctionFragment;
    'validateRoller((address,address,uint256,uint256,uint256))': FunctionFragment;
    'verifyCertificate((address,address,uint256,bytes))': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'AUDITOR_COUNT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'associatedPool', values: [string]): string;
  encodeFunctionData(functionFragment: 'certificate', values?: undefined): string;
  encodeFunctionData(functionFragment: 'daoRegistry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositDisableMap', values: [string]): string;
  encodeFunctionData(functionFragment: 'disableRollupVerifier', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'disableSanctionsCheck', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'disableTransactVerifier',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'enableRollupVerifier', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'enableSanctionsCheck', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'enableTransactVerifier',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'getCertificateIssuer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'isCertificateCheckEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isDepositDisable', values: [string]): string;
  encodeFunctionData(functionFragment: 'isSanctioned', values: [string]): string;
  encodeFunctionData(functionFragment: 'isTransferDisable', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxDepositAmountMap', values: [string]): string;
  encodeFunctionData(functionFragment: 'minDepositAmountMap', values: [string]): string;
  encodeFunctionData(functionFragment: 'minRollupFeeMap', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryAllAuditorPublicKeys', values?: undefined): string;
  encodeFunctionData(functionFragment: 'queryAssociatedPool', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryAuditorPublicKey', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'queryMaxDepositAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryMinDepositAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryMinRollupFee', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryRollupVerifier', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'queryTransactVerifier', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'relayerPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'rollerPool', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sanctionsCheck', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sanctionsList', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAdminRole', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAssociatedPool', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'setAuditorPublicKey', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setCertificateVerifier', values: [string]): string;
  encodeFunctionData(functionFragment: 'setDepositDisable', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'setMaxDepositAmount', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setMinDepositAmount', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setMinRollupFee', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setRelayerPool', values: [string]): string;
  encodeFunctionData(functionFragment: 'setRollerPool', values: [string]): string;
  encodeFunctionData(functionFragment: 'setSanctionsListAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'setTransferDisable', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'transferDisableMap', values: [string]): string;
  encodeFunctionData(functionFragment: 'validateRelayer', values: [RelayerValidateParamsStruct]): string;
  encodeFunctionData(functionFragment: 'validateRoller', values: [RollerValidateParamsStruct]): string;
  encodeFunctionData(functionFragment: 'verifyCertificate', values: [CertificateParamsStruct]): string;

  decodeFunctionResult(functionFragment: 'AUDITOR_COUNT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'associatedPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'certificate', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'daoRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositDisableMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableRollupVerifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableSanctionsCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableTransactVerifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableRollupVerifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableSanctionsCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableTransactVerifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getCertificateIssuer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isCertificateCheckEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isDepositDisable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSanctioned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isTransferDisable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDepositAmountMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minDepositAmountMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minRollupFeeMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryAllAuditorPublicKeys', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryAssociatedPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryAuditorPublicKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryMaxDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryMinDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryMinRollupFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryRollupVerifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryTransactVerifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'relayerPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rollerPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sanctionsCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sanctionsList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAdminRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAssociatedPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAuditorPublicKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setCertificateVerifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositDisable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinRollupFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRelayerPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setRollerPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSanctionsListAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTransferDisable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferDisableMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validateRelayer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'validateRoller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifyCertificate', data: BytesLike): Result;

  events: {
    'AssociatedPoolChanged(address,address)': EventFragment;
    'AuditorPublicKeyChanged(uint256,uint256)': EventFragment;
    'CertificateVerifierChanged(address)': EventFragment;
    'DepositDisableChanged(address,bool)': EventFragment;
    'MaxDepositAmountChanged(address,uint256)': EventFragment;
    'MinDepositAmountChanged(address,uint256)': EventFragment;
    'MinRollupFeeChanged(address,uint256)': EventFragment;
    'RelayerPoolChanged(address)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'RollerPoolChanged(address)': EventFragment;
    'RollupVerifierDisabled(uint32)': EventFragment;
    'RollupVerifierEnabled(uint32)': EventFragment;
    'SanctionsCheck(bool)': EventFragment;
    'SanctionsListChanged(address)': EventFragment;
    'TransactVerifierDisabled(uint32,uint32)': EventFragment;
    'TransactVerifierEnabled(uint32,uint32)': EventFragment;
    'TransferDisableChanged(address,bool)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AssociatedPoolChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AuditorPublicKeyChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CertificateVerifierChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositDisableChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxDepositAmountChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinDepositAmountChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinRollupFeeChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RelayerPoolChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RollerPoolChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RollupVerifierDisabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RollupVerifierEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SanctionsCheck'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SanctionsListChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransactVerifierDisabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransactVerifierEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransferDisableChanged'): EventFragment;
}

export type AssociatedPoolChangedEvent = TypedEvent<[string, string], { deposit: string; pool: string }>;

export type AssociatedPoolChangedEventFilter = TypedEventFilter<AssociatedPoolChangedEvent>;

export type AuditorPublicKeyChangedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { index: BigNumber; publicKey: BigNumber }
>;

export type AuditorPublicKeyChangedEventFilter = TypedEventFilter<AuditorPublicKeyChangedEvent>;

export type CertificateVerifierChangedEvent = TypedEvent<[string], { registry: string }>;

export type CertificateVerifierChangedEventFilter = TypedEventFilter<CertificateVerifierChangedEvent>;

export type DepositDisableChangedEvent = TypedEvent<[string, boolean], { deposit: string; disable: boolean }>;

export type DepositDisableChangedEventFilter = TypedEventFilter<DepositDisableChangedEvent>;

export type MaxDepositAmountChangedEvent = TypedEvent<
  [string, BigNumber],
  { deposit: string; maxDepositAmount: BigNumber }
>;

export type MaxDepositAmountChangedEventFilter = TypedEventFilter<MaxDepositAmountChangedEvent>;

export type MinDepositAmountChangedEvent = TypedEvent<
  [string, BigNumber],
  { deposit: string; minDepositAmount: BigNumber }
>;

export type MinDepositAmountChangedEventFilter = TypedEventFilter<MinDepositAmountChangedEvent>;

export type MinRollupFeeChangedEvent = TypedEvent<
  [string, BigNumber],
  { pool: string; minRollupFee: BigNumber }
>;

export type MinRollupFeeChangedEventFilter = TypedEventFilter<MinRollupFeeChangedEvent>;

export type RelayerPoolChangedEvent = TypedEvent<[string], { registry: string }>;

export type RelayerPoolChangedEventFilter = TypedEventFilter<RelayerPoolChangedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type RollerPoolChangedEvent = TypedEvent<[string], { registry: string }>;

export type RollerPoolChangedEventFilter = TypedEventFilter<RollerPoolChangedEvent>;

export type RollupVerifierDisabledEvent = TypedEvent<[number], { rollupSize: number }>;

export type RollupVerifierDisabledEventFilter = TypedEventFilter<RollupVerifierDisabledEvent>;

export type RollupVerifierEnabledEvent = TypedEvent<[number], { rollupSize: number }>;

export type RollupVerifierEnabledEventFilter = TypedEventFilter<RollupVerifierEnabledEvent>;

export type SanctionsCheckEvent = TypedEvent<[boolean], { state: boolean }>;

export type SanctionsCheckEventFilter = TypedEventFilter<SanctionsCheckEvent>;

export type SanctionsListChangedEvent = TypedEvent<[string], { list: string }>;

export type SanctionsListChangedEventFilter = TypedEventFilter<SanctionsListChangedEvent>;

export type TransactVerifierDisabledEvent = TypedEvent<
  [number, number],
  { inputNumber: number; outputNumber: number }
>;

export type TransactVerifierDisabledEventFilter = TypedEventFilter<TransactVerifierDisabledEvent>;

export type TransactVerifierEnabledEvent = TypedEvent<
  [number, number],
  { inputNumber: number; outputNumber: number }
>;

export type TransactVerifierEnabledEventFilter = TypedEventFilter<TransactVerifierEnabledEvent>;

export type TransferDisableChangedEvent = TypedEvent<[string, boolean], { pool: string; disable: boolean }>;

export type TransferDisableChangedEventFilter = TypedEventFilter<TransferDisableChangedEvent>;

export interface MystikoSettingsBase extends BaseContract {
  contractName: 'MystikoSettingsBase';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MystikoSettingsBaseInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AUDITOR_COUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    associatedPool(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    certificate(overrides?: CallOverrides): Promise<[string]>;

    daoRegistry(overrides?: CallOverrides): Promise<[string]>;

    depositDisableMap(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    disableRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    disableSanctionsCheck(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    disableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enableRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enableSanctionsCheck(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getCertificateIssuer(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isCertificateCheckEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    isDepositDisable(_depositAddress: string, overrides?: CallOverrides): Promise<[boolean]>;

    isSanctioned(_account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isTransferDisable(_pool: string, overrides?: CallOverrides): Promise<[boolean]>;

    maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    minRollupFeeMap(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryAllAuditorPublicKeys(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    queryAssociatedPool(_depositAddress: string, overrides?: CallOverrides): Promise<[string]>;

    queryAuditorPublicKey(_index: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryMaxDepositAmount(_pool: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryMinDepositAmount(_pool: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryMinRollupFee(_pool: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[WrappedVerifierStructOutput]>;

    queryTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[WrappedVerifierStructOutput]>;

    relayerPool(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rollerPool(overrides?: CallOverrides): Promise<[string]>;

    sanctionsCheck(overrides?: CallOverrides): Promise<[boolean]>;

    sanctionsList(overrides?: CallOverrides): Promise<[string]>;

    setAdminRole(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setAssociatedPool(
      _depositAddress: string,
      _poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setAuditorPublicKey(
      _index: BigNumberish,
      _publicKey: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setCertificateVerifier(
      _newCertificateRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDepositDisable(
      _depositAddress: string,
      _disable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMaxDepositAmount(
      _pool: string,
      _maxDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMinDepositAmount(
      _pool: string,
      _minDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMinRollupFee(
      _pool: string,
      _minRollupFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRelayerPool(
      _newRelayerRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setRollerPool(
      _newRollerRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setSanctionsListAddress(
      _sanction: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTransferDisable(
      _pool: string,
      _disable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    transferDisableMap(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    validateRelayer(_params: RelayerValidateParamsStruct, overrides?: CallOverrides): Promise<[boolean]>;

    validateRoller(_params: RollerValidateParamsStruct, overrides?: CallOverrides): Promise<[boolean]>;

    verifyCertificate(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<[boolean]>;
  };

  AUDITOR_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  associatedPool(arg0: string, overrides?: CallOverrides): Promise<string>;

  certificate(overrides?: CallOverrides): Promise<string>;

  daoRegistry(overrides?: CallOverrides): Promise<string>;

  depositDisableMap(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  disableRollupVerifier(
    _rollupSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  disableSanctionsCheck(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  disableTransactVerifier(
    _numInputs: BigNumberish,
    _numOutputs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enableRollupVerifier(
    _rollupSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enableSanctionsCheck(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enableTransactVerifier(
    _numInputs: BigNumberish,
    _numOutputs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getCertificateIssuer(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

  isCertificateCheckEnabled(overrides?: CallOverrides): Promise<boolean>;

  isDepositDisable(_depositAddress: string, overrides?: CallOverrides): Promise<boolean>;

  isSanctioned(_account: string, overrides?: CallOverrides): Promise<boolean>;

  isTransferDisable(_pool: string, overrides?: CallOverrides): Promise<boolean>;

  maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  minRollupFeeMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  queryAllAuditorPublicKeys(overrides?: CallOverrides): Promise<BigNumber[]>;

  queryAssociatedPool(_depositAddress: string, overrides?: CallOverrides): Promise<string>;

  queryAuditorPublicKey(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  queryMaxDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  queryMinDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  queryMinRollupFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  queryRollupVerifier(
    _rollupSize: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<WrappedVerifierStructOutput>;

  queryTransactVerifier(
    _numInputs: BigNumberish,
    _numOutputs: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<WrappedVerifierStructOutput>;

  relayerPool(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    callerConfirmation: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rollerPool(overrides?: CallOverrides): Promise<string>;

  sanctionsCheck(overrides?: CallOverrides): Promise<boolean>;

  sanctionsList(overrides?: CallOverrides): Promise<string>;

  setAdminRole(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setAssociatedPool(
    _depositAddress: string,
    _poolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setAuditorPublicKey(
    _index: BigNumberish,
    _publicKey: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setCertificateVerifier(
    _newCertificateRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDepositDisable(
    _depositAddress: string,
    _disable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMaxDepositAmount(
    _pool: string,
    _maxDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMinDepositAmount(
    _pool: string,
    _minDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMinRollupFee(
    _pool: string,
    _minRollupFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRelayerPool(
    _newRelayerRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setRollerPool(
    _newRollerRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setSanctionsListAddress(
    _sanction: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTransferDisable(
    _pool: string,
    _disable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  transferDisableMap(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  validateRelayer(_params: RelayerValidateParamsStruct, overrides?: CallOverrides): Promise<boolean>;

  validateRoller(_params: RollerValidateParamsStruct, overrides?: CallOverrides): Promise<boolean>;

  verifyCertificate(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    AUDITOR_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    associatedPool(arg0: string, overrides?: CallOverrides): Promise<string>;

    certificate(overrides?: CallOverrides): Promise<string>;

    daoRegistry(overrides?: CallOverrides): Promise<string>;

    depositDisableMap(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    disableRollupVerifier(_rollupSize: BigNumberish, overrides?: CallOverrides): Promise<void>;

    disableSanctionsCheck(overrides?: CallOverrides): Promise<void>;

    disableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    enableRollupVerifier(_rollupSize: BigNumberish, overrides?: CallOverrides): Promise<void>;

    enableSanctionsCheck(overrides?: CallOverrides): Promise<void>;

    enableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    getCertificateIssuer(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    isCertificateCheckEnabled(overrides?: CallOverrides): Promise<boolean>;

    isDepositDisable(_depositAddress: string, overrides?: CallOverrides): Promise<boolean>;

    isSanctioned(_account: string, overrides?: CallOverrides): Promise<boolean>;

    isTransferDisable(_pool: string, overrides?: CallOverrides): Promise<boolean>;

    maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minRollupFeeMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryAllAuditorPublicKeys(overrides?: CallOverrides): Promise<BigNumber[]>;

    queryAssociatedPool(_depositAddress: string, overrides?: CallOverrides): Promise<string>;

    queryAuditorPublicKey(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    queryMaxDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinRollupFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<WrappedVerifierStructOutput>;

    queryTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<WrappedVerifierStructOutput>;

    relayerPool(overrides?: CallOverrides): Promise<string>;

    renounceRole(role: BytesLike, callerConfirmation: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    rollerPool(overrides?: CallOverrides): Promise<string>;

    sanctionsCheck(overrides?: CallOverrides): Promise<boolean>;

    sanctionsList(overrides?: CallOverrides): Promise<string>;

    setAdminRole(overrides?: CallOverrides): Promise<void>;

    setAssociatedPool(
      _depositAddress: string,
      _poolAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setAuditorPublicKey(
      _index: BigNumberish,
      _publicKey: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setCertificateVerifier(_newCertificateRegistry: string, overrides?: CallOverrides): Promise<void>;

    setDepositDisable(_depositAddress: string, _disable: boolean, overrides?: CallOverrides): Promise<void>;

    setMaxDepositAmount(
      _pool: string,
      _maxDepositAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMinDepositAmount(
      _pool: string,
      _minDepositAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMinRollupFee(_pool: string, _minRollupFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setRelayerPool(_newRelayerRegistry: string, overrides?: CallOverrides): Promise<void>;

    setRollerPool(_newRollerRegistry: string, overrides?: CallOverrides): Promise<void>;

    setSanctionsListAddress(_sanction: string, overrides?: CallOverrides): Promise<void>;

    setTransferDisable(_pool: string, _disable: boolean, overrides?: CallOverrides): Promise<void>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    transferDisableMap(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    validateRelayer(_params: RelayerValidateParamsStruct, overrides?: CallOverrides): Promise<boolean>;

    validateRoller(_params: RollerValidateParamsStruct, overrides?: CallOverrides): Promise<boolean>;

    verifyCertificate(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'AssociatedPoolChanged(address,address)'(
      deposit?: string | null,
      pool?: string | null,
    ): AssociatedPoolChangedEventFilter;
    AssociatedPoolChanged(deposit?: string | null, pool?: string | null): AssociatedPoolChangedEventFilter;

    'AuditorPublicKeyChanged(uint256,uint256)'(
      index?: BigNumberish | null,
      publicKey?: null,
    ): AuditorPublicKeyChangedEventFilter;
    AuditorPublicKeyChanged(
      index?: BigNumberish | null,
      publicKey?: null,
    ): AuditorPublicKeyChangedEventFilter;

    'CertificateVerifierChanged(address)'(registry?: string | null): CertificateVerifierChangedEventFilter;
    CertificateVerifierChanged(registry?: string | null): CertificateVerifierChangedEventFilter;

    'DepositDisableChanged(address,bool)'(
      deposit?: string | null,
      disable?: null,
    ): DepositDisableChangedEventFilter;
    DepositDisableChanged(deposit?: string | null, disable?: null): DepositDisableChangedEventFilter;

    'MaxDepositAmountChanged(address,uint256)'(
      deposit?: string | null,
      maxDepositAmount?: null,
    ): MaxDepositAmountChangedEventFilter;
    MaxDepositAmountChanged(
      deposit?: string | null,
      maxDepositAmount?: null,
    ): MaxDepositAmountChangedEventFilter;

    'MinDepositAmountChanged(address,uint256)'(
      deposit?: string | null,
      minDepositAmount?: null,
    ): MinDepositAmountChangedEventFilter;
    MinDepositAmountChanged(
      deposit?: string | null,
      minDepositAmount?: null,
    ): MinDepositAmountChangedEventFilter;

    'MinRollupFeeChanged(address,uint256)'(
      pool?: string | null,
      minRollupFee?: null,
    ): MinRollupFeeChangedEventFilter;
    MinRollupFeeChanged(pool?: string | null, minRollupFee?: null): MinRollupFeeChangedEventFilter;

    'RelayerPoolChanged(address)'(registry?: string | null): RelayerPoolChangedEventFilter;
    RelayerPoolChanged(registry?: string | null): RelayerPoolChangedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;

    'RollerPoolChanged(address)'(registry?: string | null): RollerPoolChangedEventFilter;
    RollerPoolChanged(registry?: string | null): RollerPoolChangedEventFilter;

    'RollupVerifierDisabled(uint32)'(rollupSize?: null): RollupVerifierDisabledEventFilter;
    RollupVerifierDisabled(rollupSize?: null): RollupVerifierDisabledEventFilter;

    'RollupVerifierEnabled(uint32)'(rollupSize?: null): RollupVerifierEnabledEventFilter;
    RollupVerifierEnabled(rollupSize?: null): RollupVerifierEnabledEventFilter;

    'SanctionsCheck(bool)'(state?: null): SanctionsCheckEventFilter;
    SanctionsCheck(state?: null): SanctionsCheckEventFilter;

    'SanctionsListChanged(address)'(list?: null): SanctionsListChangedEventFilter;
    SanctionsListChanged(list?: null): SanctionsListChangedEventFilter;

    'TransactVerifierDisabled(uint32,uint32)'(
      inputNumber?: null,
      outputNumber?: null,
    ): TransactVerifierDisabledEventFilter;
    TransactVerifierDisabled(inputNumber?: null, outputNumber?: null): TransactVerifierDisabledEventFilter;

    'TransactVerifierEnabled(uint32,uint32)'(
      inputNumber?: null,
      outputNumber?: null,
    ): TransactVerifierEnabledEventFilter;
    TransactVerifierEnabled(inputNumber?: null, outputNumber?: null): TransactVerifierEnabledEventFilter;

    'TransferDisableChanged(address,bool)'(
      pool?: string | null,
      disable?: null,
    ): TransferDisableChangedEventFilter;
    TransferDisableChanged(pool?: string | null, disable?: null): TransferDisableChangedEventFilter;
  };

  estimateGas: {
    AUDITOR_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    associatedPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    certificate(overrides?: CallOverrides): Promise<BigNumber>;

    daoRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    depositDisableMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    disableRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    disableSanctionsCheck(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    disableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    enableRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    enableSanctionsCheck(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    enableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getCertificateIssuer(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isCertificateCheckEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    isDepositDisable(_depositAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSanctioned(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isTransferDisable(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minRollupFeeMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryAllAuditorPublicKeys(overrides?: CallOverrides): Promise<BigNumber>;

    queryAssociatedPool(_depositAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryAuditorPublicKey(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    queryMaxDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinRollupFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryRollupVerifier(_rollupSize: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    queryTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    relayerPool(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rollerPool(overrides?: CallOverrides): Promise<BigNumber>;

    sanctionsCheck(overrides?: CallOverrides): Promise<BigNumber>;

    sanctionsList(overrides?: CallOverrides): Promise<BigNumber>;

    setAdminRole(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setAssociatedPool(
      _depositAddress: string,
      _poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setAuditorPublicKey(
      _index: BigNumberish,
      _publicKey: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setCertificateVerifier(
      _newCertificateRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDepositDisable(
      _depositAddress: string,
      _disable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMaxDepositAmount(
      _pool: string,
      _maxDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMinDepositAmount(
      _pool: string,
      _minDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMinRollupFee(
      _pool: string,
      _minRollupFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRelayerPool(
      _newRelayerRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setRollerPool(
      _newRollerRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setSanctionsListAddress(
      _sanction: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTransferDisable(
      _pool: string,
      _disable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    transferDisableMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    validateRelayer(_params: RelayerValidateParamsStruct, overrides?: CallOverrides): Promise<BigNumber>;

    validateRoller(_params: RollerValidateParamsStruct, overrides?: CallOverrides): Promise<BigNumber>;

    verifyCertificate(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AUDITOR_COUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    associatedPool(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    certificate(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositDisableMap(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    disableSanctionsCheck(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    disableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enableRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enableSanctionsCheck(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getCertificateIssuer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCertificateCheckEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDepositDisable(_depositAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSanctioned(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isTransferDisable(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minRollupFeeMap(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryAllAuditorPublicKeys(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryAssociatedPool(_depositAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryAuditorPublicKey(_index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryMaxDepositAmount(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryMinDepositAmount(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryMinRollupFee(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryRollupVerifier(_rollupSize: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    relayerPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rollerPool(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sanctionsCheck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sanctionsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setAdminRole(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setAssociatedPool(
      _depositAddress: string,
      _poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setAuditorPublicKey(
      _index: BigNumberish,
      _publicKey: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setCertificateVerifier(
      _newCertificateRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDepositDisable(
      _depositAddress: string,
      _disable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMaxDepositAmount(
      _pool: string,
      _maxDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMinDepositAmount(
      _pool: string,
      _minDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMinRollupFee(
      _pool: string,
      _minRollupFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRelayerPool(
      _newRelayerRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setRollerPool(
      _newRollerRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setSanctionsListAddress(
      _sanction: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTransferDisable(
      _pool: string,
      _disable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferDisableMap(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    validateRelayer(
      _params: RelayerValidateParamsStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    validateRoller(
      _params: RollerValidateParamsStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    verifyCertificate(
      _params: CertificateParamsStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
