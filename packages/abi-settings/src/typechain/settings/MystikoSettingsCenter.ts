/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export type CanDoRelayParamsStruct = { pool: string; relayer: string };

export type CanDoRelayParamsStructOutput = [string, string] & {
  pool: string;
  relayer: string;
};

export type CanDoRollupParamsStruct = {
  pool: string;
  roller: string;
  rollupSize: BigNumberish;
  queueCount: BigNumberish;
  includedCount: BigNumberish;
};

export type CanDoRollupParamsStructOutput = [string, string, BigNumber, BigNumber, BigNumber] & {
  pool: string;
  roller: string;
  rollupSize: BigNumber;
  queueCount: BigNumber;
  includedCount: BigNumber;
};

export type WrappedVerifierStruct = { verifier: string; enabled: boolean };

export type WrappedVerifierStructOutput = [string, boolean] & {
  verifier: string;
  enabled: boolean;
};

export type CertificateParamsStruct = {
  account: string;
  asset: string;
  deadline: BigNumberish;
  signature: BytesLike;
};

export type CertificateParamsStructOutput = [string, string, BigNumber, string] & {
  account: string;
  asset: string;
  deadline: BigNumber;
  signature: string;
};

export interface MystikoSettingsCenterInterface extends utils.Interface {
  contractName: 'MystikoSettingsCenter';
  functions: {
    'AUDITOR_COUNT()': FunctionFragment;
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'canDoRelay((address,address))': FunctionFragment;
    'canDoRollup((address,address,uint256,uint256,uint256))': FunctionFragment;
    'certificateRegistry()': FunctionFragment;
    'changeCertificateRegistry(address)': FunctionFragment;
    'changeRelayerRegistry(address)': FunctionFragment;
    'changeRollerRegistry(address)': FunctionFragment;
    'daoRegistry()': FunctionFragment;
    'disableRollupVerifier(uint32)': FunctionFragment;
    'disableSanctionsCheck()': FunctionFragment;
    'disableTransactVerifier(uint32,uint32)': FunctionFragment;
    'enableRollupVerifier(uint32)': FunctionFragment;
    'enableSanctionsCheck()': FunctionFragment;
    'enableTransactVerifier(uint32,uint32)': FunctionFragment;
    'getIssuerAddress()': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'isSanctioned(address)': FunctionFragment;
    'maxDepositAmountMap(address)': FunctionFragment;
    'minBridgeFeeAmount(address)': FunctionFragment;
    'minDepositAmountMap(address)': FunctionFragment;
    'minPeerExecutorFeeAmount(address)': FunctionFragment;
    'minPeerRollupFeeAmount(address)': FunctionFragment;
    'minRollupFeeMap(address)': FunctionFragment;
    'queryAllAuditorPublicKeys()': FunctionFragment;
    'queryAuditorPublicKey(uint256)': FunctionFragment;
    'queryMaxDepositAmount(address)': FunctionFragment;
    'queryMinBridgeFee(address)': FunctionFragment;
    'queryMinDepositAmount(address)': FunctionFragment;
    'queryMinPeerExecutorFee(address)': FunctionFragment;
    'queryMinPeerRollupFee(address)': FunctionFragment;
    'queryMinRollupFee(address)': FunctionFragment;
    'queryRollupVerifier(uint32)': FunctionFragment;
    'queryTransactVerifier(uint32,uint32)': FunctionFragment;
    'relayerRegistry()': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'rollerRegistry()': FunctionFragment;
    'sanctionsCheck()': FunctionFragment;
    'sanctionsList()': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
    'updateAuditorPublicKey(uint256,uint256)': FunctionFragment;
    'updateMaxDepositAmount(address,uint256)': FunctionFragment;
    'updateMinBridgeFee(address,uint256)': FunctionFragment;
    'updateMinDepositAmount(address,uint256)': FunctionFragment;
    'updateMinPeerExecutorFee(address,uint256)': FunctionFragment;
    'updateMinPeerRollupFee(address,uint256)': FunctionFragment;
    'updateMinRollupFee(address,uint256)': FunctionFragment;
    'updateSanctionsListAddress(address)': FunctionFragment;
    'verifyCertificate((address,address,uint256,bytes))': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'AUDITOR_COUNT', values?: undefined): string;
  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'canDoRelay', values: [CanDoRelayParamsStruct]): string;
  encodeFunctionData(functionFragment: 'canDoRollup', values: [CanDoRollupParamsStruct]): string;
  encodeFunctionData(functionFragment: 'certificateRegistry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'changeCertificateRegistry', values: [string]): string;
  encodeFunctionData(functionFragment: 'changeRelayerRegistry', values: [string]): string;
  encodeFunctionData(functionFragment: 'changeRollerRegistry', values: [string]): string;
  encodeFunctionData(functionFragment: 'daoRegistry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'disableRollupVerifier', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'disableSanctionsCheck', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'disableTransactVerifier',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'enableRollupVerifier', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'enableSanctionsCheck', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'enableTransactVerifier',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'getIssuerAddress', values?: undefined): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'isSanctioned', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxDepositAmountMap', values: [string]): string;
  encodeFunctionData(functionFragment: 'minBridgeFeeAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'minDepositAmountMap', values: [string]): string;
  encodeFunctionData(functionFragment: 'minPeerExecutorFeeAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'minPeerRollupFeeAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'minRollupFeeMap', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryAllAuditorPublicKeys', values?: undefined): string;
  encodeFunctionData(functionFragment: 'queryAuditorPublicKey', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'queryMaxDepositAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryMinBridgeFee', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryMinDepositAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryMinPeerExecutorFee', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryMinPeerRollupFee', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryMinRollupFee', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryRollupVerifier', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'queryTransactVerifier', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'relayerRegistry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'rollerRegistry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sanctionsCheck', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sanctionsList', values?: undefined): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'updateAuditorPublicKey',
    values: [BigNumberish, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'updateMaxDepositAmount', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateMinBridgeFee', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateMinDepositAmount', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateMinPeerExecutorFee', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateMinPeerRollupFee', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateMinRollupFee', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateSanctionsListAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'verifyCertificate', values: [CertificateParamsStruct]): string;

  decodeFunctionResult(functionFragment: 'AUDITOR_COUNT', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canDoRelay', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'canDoRollup', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'certificateRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeCertificateRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeRelayerRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeRollerRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'daoRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableRollupVerifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableSanctionsCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableTransactVerifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableRollupVerifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableSanctionsCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableTransactVerifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getIssuerAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSanctioned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDepositAmountMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minBridgeFeeAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minDepositAmountMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minPeerExecutorFeeAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minPeerRollupFeeAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minRollupFeeMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryAllAuditorPublicKeys', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryAuditorPublicKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryMaxDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryMinBridgeFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryMinDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryMinPeerExecutorFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryMinPeerRollupFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryMinRollupFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryRollupVerifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryTransactVerifier', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'relayerRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'rollerRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sanctionsCheck', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sanctionsList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAuditorPublicKey', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMaxDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMinBridgeFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMinDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMinPeerExecutorFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMinPeerRollupFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateMinRollupFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateSanctionsListAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifyCertificate', data: BytesLike): Result;

  events: {
    'AuditorPublicKeyUpdated(uint256,uint256)': EventFragment;
    'CertificateRegistryChanged(address)': EventFragment;
    'MaxDepositAmountUpdated(address,uint256)': EventFragment;
    'MinBridgeFeeUpdated(address,uint256)': EventFragment;
    'MinDepositAmountUpdated(address,uint256)': EventFragment;
    'MinPeerExecutorFeeUpdated(address,uint256)': EventFragment;
    'MinPeerRollupFeeUpdated(address,uint256)': EventFragment;
    'MinRollupFeeUpdated(address,uint256)': EventFragment;
    'RelayerRegistryChanged(address)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
    'RollerRegistryChanged(address)': EventFragment;
    'RollupVerifierDisabled(uint32)': EventFragment;
    'RollupVerifierEnabled(uint32)': EventFragment;
    'SanctionsCheck(bool)': EventFragment;
    'SanctionsListChanged(address)': EventFragment;
    'TransactVerifierDisabled(uint32,uint32)': EventFragment;
    'TransactVerifierEnabled(uint32,uint32)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AuditorPublicKeyUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'CertificateRegistryChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxDepositAmountUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinBridgeFeeUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinDepositAmountUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinPeerExecutorFeeUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinPeerRollupFeeUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinRollupFeeUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RelayerRegistryChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RollerRegistryChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RollupVerifierDisabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RollupVerifierEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SanctionsCheck'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SanctionsListChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransactVerifierDisabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TransactVerifierEnabled'): EventFragment;
}

export type AuditorPublicKeyUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { index: BigNumber; publicKey: BigNumber }
>;

export type AuditorPublicKeyUpdatedEventFilter = TypedEventFilter<AuditorPublicKeyUpdatedEvent>;

export type CertificateRegistryChangedEvent = TypedEvent<[string], { registry: string }>;

export type CertificateRegistryChangedEventFilter = TypedEventFilter<CertificateRegistryChangedEvent>;

export type MaxDepositAmountUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { pool: string; maxDepositAmount: BigNumber }
>;

export type MaxDepositAmountUpdatedEventFilter = TypedEventFilter<MaxDepositAmountUpdatedEvent>;

export type MinBridgeFeeUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { pool: string; minBridgeFee: BigNumber }
>;

export type MinBridgeFeeUpdatedEventFilter = TypedEventFilter<MinBridgeFeeUpdatedEvent>;

export type MinDepositAmountUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { pool: string; minDepositAmount: BigNumber }
>;

export type MinDepositAmountUpdatedEventFilter = TypedEventFilter<MinDepositAmountUpdatedEvent>;

export type MinPeerExecutorFeeUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { pool: string; minPeerExecutorFee: BigNumber }
>;

export type MinPeerExecutorFeeUpdatedEventFilter = TypedEventFilter<MinPeerExecutorFeeUpdatedEvent>;

export type MinPeerRollupFeeUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { pool: string; minPeerRollupFee: BigNumber }
>;

export type MinPeerRollupFeeUpdatedEventFilter = TypedEventFilter<MinPeerRollupFeeUpdatedEvent>;

export type MinRollupFeeUpdatedEvent = TypedEvent<
  [string, BigNumber],
  { pool: string; minRollupFee: BigNumber }
>;

export type MinRollupFeeUpdatedEventFilter = TypedEventFilter<MinRollupFeeUpdatedEvent>;

export type RelayerRegistryChangedEvent = TypedEvent<[string], { registry: string }>;

export type RelayerRegistryChangedEventFilter = TypedEventFilter<RelayerRegistryChangedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export type RollerRegistryChangedEvent = TypedEvent<[string], { registry: string }>;

export type RollerRegistryChangedEventFilter = TypedEventFilter<RollerRegistryChangedEvent>;

export type RollupVerifierDisabledEvent = TypedEvent<[number], { rollupSize: number }>;

export type RollupVerifierDisabledEventFilter = TypedEventFilter<RollupVerifierDisabledEvent>;

export type RollupVerifierEnabledEvent = TypedEvent<[number], { rollupSize: number }>;

export type RollupVerifierEnabledEventFilter = TypedEventFilter<RollupVerifierEnabledEvent>;

export type SanctionsCheckEvent = TypedEvent<[boolean], { state: boolean }>;

export type SanctionsCheckEventFilter = TypedEventFilter<SanctionsCheckEvent>;

export type SanctionsListChangedEvent = TypedEvent<[string], { list: string }>;

export type SanctionsListChangedEventFilter = TypedEventFilter<SanctionsListChangedEvent>;

export type TransactVerifierDisabledEvent = TypedEvent<
  [number, number],
  { inputNumber: number; outputNumber: number }
>;

export type TransactVerifierDisabledEventFilter = TypedEventFilter<TransactVerifierDisabledEvent>;

export type TransactVerifierEnabledEvent = TypedEvent<
  [number, number],
  { inputNumber: number; outputNumber: number }
>;

export type TransactVerifierEnabledEventFilter = TypedEventFilter<TransactVerifierEnabledEvent>;

export interface MystikoSettingsCenter extends BaseContract {
  contractName: 'MystikoSettingsCenter';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MystikoSettingsCenterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    AUDITOR_COUNT(overrides?: CallOverrides): Promise<[BigNumber]>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    canDoRelay(_params: CanDoRelayParamsStruct, overrides?: CallOverrides): Promise<[boolean]>;

    canDoRollup(_params: CanDoRollupParamsStruct, overrides?: CallOverrides): Promise<[boolean]>;

    certificateRegistry(overrides?: CallOverrides): Promise<[string]>;

    changeCertificateRegistry(
      _newCertificateRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    changeRelayerRegistry(
      _newRelayerRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    changeRollerRegistry(
      _newRollerRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    daoRegistry(overrides?: CallOverrides): Promise<[string]>;

    disableRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    disableSanctionsCheck(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    disableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enableRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enableSanctionsCheck(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getIssuerAddress(overrides?: CallOverrides): Promise<[string]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isSanctioned(_account: string, overrides?: CallOverrides): Promise<[boolean]>;

    maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    minBridgeFeeAmount(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    minPeerExecutorFeeAmount(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    minPeerRollupFeeAmount(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    minRollupFeeMap(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryAllAuditorPublicKeys(overrides?: CallOverrides): Promise<[BigNumber[]]>;

    queryAuditorPublicKey(_index: BigNumberish, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryMaxDepositAmount(_pool: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryMinBridgeFee(_pool: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryMinDepositAmount(_pool: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryMinPeerExecutorFee(_pool: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryMinPeerRollupFee(_pool: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryMinRollupFee(_pool: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[WrappedVerifierStructOutput]>;

    queryTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[WrappedVerifierStructOutput]>;

    relayerRegistry(overrides?: CallOverrides): Promise<[string]>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    rollerRegistry(overrides?: CallOverrides): Promise<[string]>;

    sanctionsCheck(overrides?: CallOverrides): Promise<[boolean]>;

    sanctionsList(overrides?: CallOverrides): Promise<[string]>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    updateAuditorPublicKey(
      _index: BigNumberish,
      _publicKey: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateMaxDepositAmount(
      _pool: string,
      _maxDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateMinBridgeFee(
      _pool: string,
      _minBridgeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateMinDepositAmount(
      _pool: string,
      _minDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateMinPeerExecutorFee(
      _pool: string,
      _minPeerExecutorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateMinPeerRollupFee(
      _pool: string,
      _minPeerRollupFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateMinRollupFee(
      _pool: string,
      _minRollupFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateSanctionsListAddress(
      _sanction: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    verifyCertificate(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<[boolean]>;
  };

  AUDITOR_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  canDoRelay(_params: CanDoRelayParamsStruct, overrides?: CallOverrides): Promise<boolean>;

  canDoRollup(_params: CanDoRollupParamsStruct, overrides?: CallOverrides): Promise<boolean>;

  certificateRegistry(overrides?: CallOverrides): Promise<string>;

  changeCertificateRegistry(
    _newCertificateRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  changeRelayerRegistry(
    _newRelayerRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  changeRollerRegistry(
    _newRollerRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  daoRegistry(overrides?: CallOverrides): Promise<string>;

  disableRollupVerifier(
    _rollupSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  disableSanctionsCheck(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  disableTransactVerifier(
    _numInputs: BigNumberish,
    _numOutputs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enableRollupVerifier(
    _rollupSize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enableSanctionsCheck(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enableTransactVerifier(
    _numInputs: BigNumberish,
    _numOutputs: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getIssuerAddress(overrides?: CallOverrides): Promise<string>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

  isSanctioned(_account: string, overrides?: CallOverrides): Promise<boolean>;

  maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  minBridgeFeeAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  minPeerExecutorFeeAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  minPeerRollupFeeAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  minRollupFeeMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  queryAllAuditorPublicKeys(overrides?: CallOverrides): Promise<BigNumber[]>;

  queryAuditorPublicKey(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

  queryMaxDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  queryMinBridgeFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  queryMinDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  queryMinPeerExecutorFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  queryMinPeerRollupFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  queryMinRollupFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

  queryRollupVerifier(
    _rollupSize: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<WrappedVerifierStructOutput>;

  queryTransactVerifier(
    _numInputs: BigNumberish,
    _numOutputs: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<WrappedVerifierStructOutput>;

  relayerRegistry(overrides?: CallOverrides): Promise<string>;

  renounceRole(
    role: BytesLike,
    callerConfirmation: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  rollerRegistry(overrides?: CallOverrides): Promise<string>;

  sanctionsCheck(overrides?: CallOverrides): Promise<boolean>;

  sanctionsList(overrides?: CallOverrides): Promise<string>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  updateAuditorPublicKey(
    _index: BigNumberish,
    _publicKey: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateMaxDepositAmount(
    _pool: string,
    _maxDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateMinBridgeFee(
    _pool: string,
    _minBridgeFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateMinDepositAmount(
    _pool: string,
    _minDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateMinPeerExecutorFee(
    _pool: string,
    _minPeerExecutorFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateMinPeerRollupFee(
    _pool: string,
    _minPeerRollupFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateMinRollupFee(
    _pool: string,
    _minRollupFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateSanctionsListAddress(
    _sanction: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  verifyCertificate(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    AUDITOR_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    canDoRelay(_params: CanDoRelayParamsStruct, overrides?: CallOverrides): Promise<boolean>;

    canDoRollup(_params: CanDoRollupParamsStruct, overrides?: CallOverrides): Promise<boolean>;

    certificateRegistry(overrides?: CallOverrides): Promise<string>;

    changeCertificateRegistry(_newCertificateRegistry: string, overrides?: CallOverrides): Promise<void>;

    changeRelayerRegistry(_newRelayerRegistry: string, overrides?: CallOverrides): Promise<void>;

    changeRollerRegistry(_newRollerRegistry: string, overrides?: CallOverrides): Promise<void>;

    daoRegistry(overrides?: CallOverrides): Promise<string>;

    disableRollupVerifier(_rollupSize: BigNumberish, overrides?: CallOverrides): Promise<void>;

    disableSanctionsCheck(overrides?: CallOverrides): Promise<void>;

    disableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    enableRollupVerifier(_rollupSize: BigNumberish, overrides?: CallOverrides): Promise<void>;

    enableSanctionsCheck(overrides?: CallOverrides): Promise<void>;

    enableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    getIssuerAddress(overrides?: CallOverrides): Promise<string>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    isSanctioned(_account: string, overrides?: CallOverrides): Promise<boolean>;

    maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minBridgeFeeAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minPeerExecutorFeeAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minPeerRollupFeeAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minRollupFeeMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryAllAuditorPublicKeys(overrides?: CallOverrides): Promise<BigNumber[]>;

    queryAuditorPublicKey(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    queryMaxDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinBridgeFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinPeerExecutorFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinPeerRollupFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinRollupFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<WrappedVerifierStructOutput>;

    queryTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<WrappedVerifierStructOutput>;

    relayerRegistry(overrides?: CallOverrides): Promise<string>;

    renounceRole(role: BytesLike, callerConfirmation: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    rollerRegistry(overrides?: CallOverrides): Promise<string>;

    sanctionsCheck(overrides?: CallOverrides): Promise<boolean>;

    sanctionsList(overrides?: CallOverrides): Promise<string>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    updateAuditorPublicKey(
      _index: BigNumberish,
      _publicKey: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateMaxDepositAmount(
      _pool: string,
      _maxDepositAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateMinBridgeFee(_pool: string, _minBridgeFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateMinDepositAmount(
      _pool: string,
      _minDepositAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateMinPeerExecutorFee(
      _pool: string,
      _minPeerExecutorFee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateMinPeerRollupFee(
      _pool: string,
      _minPeerRollupFee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    updateMinRollupFee(_pool: string, _minRollupFee: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateSanctionsListAddress(_sanction: string, overrides?: CallOverrides): Promise<void>;

    verifyCertificate(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'AuditorPublicKeyUpdated(uint256,uint256)'(
      index?: BigNumberish | null,
      publicKey?: null,
    ): AuditorPublicKeyUpdatedEventFilter;
    AuditorPublicKeyUpdated(
      index?: BigNumberish | null,
      publicKey?: null,
    ): AuditorPublicKeyUpdatedEventFilter;

    'CertificateRegistryChanged(address)'(registry?: string | null): CertificateRegistryChangedEventFilter;
    CertificateRegistryChanged(registry?: string | null): CertificateRegistryChangedEventFilter;

    'MaxDepositAmountUpdated(address,uint256)'(
      pool?: string | null,
      maxDepositAmount?: null,
    ): MaxDepositAmountUpdatedEventFilter;
    MaxDepositAmountUpdated(
      pool?: string | null,
      maxDepositAmount?: null,
    ): MaxDepositAmountUpdatedEventFilter;

    'MinBridgeFeeUpdated(address,uint256)'(
      pool?: string | null,
      minBridgeFee?: null,
    ): MinBridgeFeeUpdatedEventFilter;
    MinBridgeFeeUpdated(pool?: string | null, minBridgeFee?: null): MinBridgeFeeUpdatedEventFilter;

    'MinDepositAmountUpdated(address,uint256)'(
      pool?: string | null,
      minDepositAmount?: null,
    ): MinDepositAmountUpdatedEventFilter;
    MinDepositAmountUpdated(
      pool?: string | null,
      minDepositAmount?: null,
    ): MinDepositAmountUpdatedEventFilter;

    'MinPeerExecutorFeeUpdated(address,uint256)'(
      pool?: string | null,
      minPeerExecutorFee?: null,
    ): MinPeerExecutorFeeUpdatedEventFilter;
    MinPeerExecutorFeeUpdated(
      pool?: string | null,
      minPeerExecutorFee?: null,
    ): MinPeerExecutorFeeUpdatedEventFilter;

    'MinPeerRollupFeeUpdated(address,uint256)'(
      pool?: string | null,
      minPeerRollupFee?: null,
    ): MinPeerRollupFeeUpdatedEventFilter;
    MinPeerRollupFeeUpdated(
      pool?: string | null,
      minPeerRollupFee?: null,
    ): MinPeerRollupFeeUpdatedEventFilter;

    'MinRollupFeeUpdated(address,uint256)'(
      pool?: string | null,
      minRollupFee?: null,
    ): MinRollupFeeUpdatedEventFilter;
    MinRollupFeeUpdated(pool?: string | null, minRollupFee?: null): MinRollupFeeUpdatedEventFilter;

    'RelayerRegistryChanged(address)'(registry?: string | null): RelayerRegistryChangedEventFilter;
    RelayerRegistryChanged(registry?: string | null): RelayerRegistryChangedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;

    'RollerRegistryChanged(address)'(registry?: string | null): RollerRegistryChangedEventFilter;
    RollerRegistryChanged(registry?: string | null): RollerRegistryChangedEventFilter;

    'RollupVerifierDisabled(uint32)'(rollupSize?: null): RollupVerifierDisabledEventFilter;
    RollupVerifierDisabled(rollupSize?: null): RollupVerifierDisabledEventFilter;

    'RollupVerifierEnabled(uint32)'(rollupSize?: null): RollupVerifierEnabledEventFilter;
    RollupVerifierEnabled(rollupSize?: null): RollupVerifierEnabledEventFilter;

    'SanctionsCheck(bool)'(state?: null): SanctionsCheckEventFilter;
    SanctionsCheck(state?: null): SanctionsCheckEventFilter;

    'SanctionsListChanged(address)'(list?: null): SanctionsListChangedEventFilter;
    SanctionsListChanged(list?: null): SanctionsListChangedEventFilter;

    'TransactVerifierDisabled(uint32,uint32)'(
      inputNumber?: null,
      outputNumber?: null,
    ): TransactVerifierDisabledEventFilter;
    TransactVerifierDisabled(inputNumber?: null, outputNumber?: null): TransactVerifierDisabledEventFilter;

    'TransactVerifierEnabled(uint32,uint32)'(
      inputNumber?: null,
      outputNumber?: null,
    ): TransactVerifierEnabledEventFilter;
    TransactVerifierEnabled(inputNumber?: null, outputNumber?: null): TransactVerifierEnabledEventFilter;
  };

  estimateGas: {
    AUDITOR_COUNT(overrides?: CallOverrides): Promise<BigNumber>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    canDoRelay(_params: CanDoRelayParamsStruct, overrides?: CallOverrides): Promise<BigNumber>;

    canDoRollup(_params: CanDoRollupParamsStruct, overrides?: CallOverrides): Promise<BigNumber>;

    certificateRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    changeCertificateRegistry(
      _newCertificateRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    changeRelayerRegistry(
      _newRelayerRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    changeRollerRegistry(
      _newRollerRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    daoRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    disableRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    disableSanctionsCheck(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    disableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    enableRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    enableSanctionsCheck(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    enableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getIssuerAddress(overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSanctioned(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minBridgeFeeAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minPeerExecutorFeeAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minPeerRollupFeeAmount(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minRollupFeeMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryAllAuditorPublicKeys(overrides?: CallOverrides): Promise<BigNumber>;

    queryAuditorPublicKey(_index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    queryMaxDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinBridgeFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinDepositAmount(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinPeerExecutorFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinPeerRollupFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinRollupFee(_pool: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryRollupVerifier(_rollupSize: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    queryTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    relayerRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    rollerRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    sanctionsCheck(overrides?: CallOverrides): Promise<BigNumber>;

    sanctionsList(overrides?: CallOverrides): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    updateAuditorPublicKey(
      _index: BigNumberish,
      _publicKey: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateMaxDepositAmount(
      _pool: string,
      _maxDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateMinBridgeFee(
      _pool: string,
      _minBridgeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateMinDepositAmount(
      _pool: string,
      _minDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateMinPeerExecutorFee(
      _pool: string,
      _minPeerExecutorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateMinPeerRollupFee(
      _pool: string,
      _minPeerRollupFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateMinRollupFee(
      _pool: string,
      _minRollupFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateSanctionsListAddress(
      _sanction: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    verifyCertificate(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    AUDITOR_COUNT(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canDoRelay(_params: CanDoRelayParamsStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    canDoRollup(_params: CanDoRollupParamsStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    certificateRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeCertificateRegistry(
      _newCertificateRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    changeRelayerRegistry(
      _newRelayerRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    changeRollerRegistry(
      _newRollerRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    daoRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    disableSanctionsCheck(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    disableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enableRollupVerifier(
      _rollupSize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enableSanctionsCheck(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enableTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getIssuerAddress(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSanctioned(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minBridgeFeeAmount(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPeerExecutorFeeAmount(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minPeerRollupFeeAmount(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minRollupFeeMap(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryAllAuditorPublicKeys(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryAuditorPublicKey(_index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryMaxDepositAmount(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryMinBridgeFee(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryMinDepositAmount(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryMinPeerExecutorFee(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryMinPeerRollupFee(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryMinRollupFee(_pool: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryRollupVerifier(_rollupSize: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryTransactVerifier(
      _numInputs: BigNumberish,
      _numOutputs: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    relayerRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    rollerRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sanctionsCheck(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sanctionsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    updateAuditorPublicKey(
      _index: BigNumberish,
      _publicKey: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateMaxDepositAmount(
      _pool: string,
      _maxDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateMinBridgeFee(
      _pool: string,
      _minBridgeFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateMinDepositAmount(
      _pool: string,
      _minDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateMinPeerExecutorFee(
      _pool: string,
      _minPeerExecutorFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateMinPeerRollupFee(
      _pool: string,
      _minPeerRollupFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateMinRollupFee(
      _pool: string,
      _minRollupFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateSanctionsListAddress(
      _sanction: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    verifyCertificate(
      _params: CertificateParamsStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
