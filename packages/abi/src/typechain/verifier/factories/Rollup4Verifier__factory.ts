/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from "ethers";
import { Provider, TransactionRequest } from "@ethersproject/providers";
import type {
  Rollup4Verifier,
  Rollup4VerifierInterface,
} from "../Rollup4Verifier";

const _abi = [
  {
    inputs: [],
    name: "InvalidParam",
    type: "error",
  },
  {
    inputs: [],
    name: "NotOnCurve",
    type: "error",
  },
  {
    inputs: [],
    name: "StaticCallFailed",
    type: "error",
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: "uint256",
                name: "X",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "Y",
                type: "uint256",
              },
            ],
            internalType: "struct Pairing.G1Point",
            name: "a",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256[2]",
                name: "X",
                type: "uint256[2]",
              },
              {
                internalType: "uint256[2]",
                name: "Y",
                type: "uint256[2]",
              },
            ],
            internalType: "struct Pairing.G2Point",
            name: "b",
            type: "tuple",
          },
          {
            components: [
              {
                internalType: "uint256",
                name: "X",
                type: "uint256",
              },
              {
                internalType: "uint256",
                name: "Y",
                type: "uint256",
              },
            ],
            internalType: "struct Pairing.G1Point",
            name: "c",
            type: "tuple",
          },
        ],
        internalType: "struct VerifierLib.Proof",
        name: "proof",
        type: "tuple",
      },
      {
        internalType: "uint256[]",
        name: "input",
        type: "uint256[]",
      },
    ],
    name: "verifyTx",
    outputs: [
      {
        internalType: "bool",
        name: "r",
        type: "bool",
      },
    ],
    stateMutability: "view",
    type: "function",
  },
];

const _bytecode =
  "0x6080604052348015600f57600080fd5b5061157a8061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e3660046113f9565b610057565b604051901515815260200160405180910390f35b6000815160041461007b57604051633494a40d60e21b815260040160405180910390fd5b610085828461008e565b90505b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100ba6103f7565b9050806080015151855160016100d091906114d0565b146100ee57604051633494a40d60e21b815260040160405180910390fd5b835151821161011057604051633494a40d60e21b815260040160405180910390fd5b835160200151821161013557604051633494a40d60e21b815260040160405180910390fd5b60208401515151821161015b57604051633494a40d60e21b815260040160405180910390fd5b602084810151015151821161018357604051633494a40d60e21b815260040160405180910390fd5b60208481015151015182116101ab57604051633494a40d60e21b815260040160405180910390fd5b602084810151810151015182116101d557604051633494a40d60e21b815260040160405180910390fd5b60408401515182116101fa57604051633494a40d60e21b815260040160405180910390fd5b818460400151602001511061022257604051633494a40d60e21b815260040160405180910390fd5b835161022d906108f6565b61024a576040516361586bdd60e01b815260040160405180910390fd5b610257846020015161096e565b610274576040516361586bdd60e01b815260040160405180910390fd5b61028184604001516108f6565b61029e576040516361586bdd60e01b815260040160405180910390fd5b60006102de604051806040016040528060008152602001600081525083608001516000815181106102d1576102d16114e3565b6020026020010151610a58565b905060005b865181101561038457838782815181106102ff576102ff6114e3565b60200260200101511061032557604051633494a40d60e21b815260040160405180910390fd5b61037a82610375856080015184600161033e91906114d0565b8151811061034e5761034e6114e3565b60200260200101518a8581518110610368576103686114e3565b6020026020010151610ad8565b610a58565b91506001016102e3565b5061038e816108f6565b6103ab576040516361586bdd60e01b815260040160405180910390fd5b6103ed856000015186602001516103c184610b26565b85604001516103d38a60400151610b26565b606088015188516103e390610b26565b8960200151610bd7565b9695505050505050565b6103ff61117e565b6040805180820182527ef55326783626a652b3a7dda71a7c42590cb2fe35af272a4d6cbfb6b4e5a4fd81527f12693394c17cede50bc45fa87d17ddddbdc12ae8cf4520054f843b08a48a93936020808301919091529083528151608080820184527f1a5e5843765f7e815bffcfb780b0562a15443042a51ef189fd2ee8163a28038e8285019081527f0ec2af48b76f137445b330b73fdf37df87eebdad3664536842034564a723b6bc606080850191909152908352845180860186527f164b4596274aa0295d87a9fc7ddf6c28abf217f42c192ba8cd11790a8807293081527f0b59e44bcd7c2ad1176e227eab945eee3b22d1205044fdc0ef37de00fe6be5dd818601528385015285840192909252835180820185527f1a260702697d96c13fba085b4adfcf4da0b87e5c56a4d7a964676309d784fb198186019081527f196817ff98a202140dcbc857b99ac651fcaba5d946028b789f69aaaf50759c0b828501528152845180860186527f2f10f42c599cf2fc640bd45cdc5615a412ba57f59e059b4ed736f48f46d7759881527f03bd5f1142f702a924d600cabb8b841a05f192d14442a9233af61a9f3b5d1db0818601528185015285850152835190810184527f1b4738d7140a0a054571a807bd4698e377aebf964cbae5e1f79d0033d308d7468185019081527f17ac0757c6297ec15cc30b2b5b17926afac5d68ba0be547cca997693f9ba459a828401528152835180850185527f1949eb9d26b010c39ce14fbf33a22548aa69624b4f38b7bdcf2db82f222a208b81527f0989ec8f28e09d19fb26e45dc2c1121595e400de253a5dc2bbea599901624a0c8185015281840152908401528151600580825260c08201909352919082015b604080518082019091526000808252602082015281526020019060019003908161067957505060808201908152604080518082019091527f1f4a943ca0338d5d3edded1c53a20b69158f1edebc40b26d4b4731b6bf6db7ca81527f0bb79c061894056f8d7780e38e62923da9817ad03e20127508bb8da243dd306160208201529051805160009061070c5761070c6114e3565b602002602001018190525060405180604001604052807f26ee3f0b791bf65f6d87ddc8f87058156ca60127e41da5d1145c29b971ae2a8881526020017f194e7b92b5141c4858fc221e8f031b8bbfc9bd47842611b7730b7079e494a54a8152508160800151600181518110610783576107836114e3565b602002602001018190525060405180604001604052807f20dcd66eb4337854fa296ccdc746cd4b8ed8b47d20b79bdc474073654b9bddcd81526020017f29dfabb9697a10cfaff4a4203ce37be63447d11f448af23267dfa859f8a88c3b81525081608001516002815181106107fa576107fa6114e3565b602002602001018190525060405180604001604052807f1f24e5bfc87d207b0150a4e59b0aece4f2c04fcf7547b3eeffec28c260b2a95181526020017f05eb352cad74fb85d01e513c2053fcd9aac8d66556b89a7d095cd948ec4c196f8152508160800151600381518110610871576108716114e3565b602002602001018190525060405180604001604052807f18de5a5f3ef66a64e929dee144be63c91e6d1225b233650b793bbb14751549b381526020017f13854d1288555747333262f412929bcd80552b1a044d960c688affae1ec8c0f081525081608001516004815181106108e8576108e86114e3565b602002602001018190525090565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761092481600361150f565b8180610932576109326114f9565b84518380610942576109426114f9565b86518009098280610955576109556114f9565b602086015180096109669190611531565b149392505050565b6020818101518051918101516000927f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5927e9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d29285928392839283926109de92909190829060015b6020020151611038565b895180516020820151939750919550610a03929060005b60200201518b5160016109d4565b89519193509150610a19908390839060006109f5565b9092509050610a2a848484846110b9565b9094509250610a3b848488886110b9565b909450925083158015610a4c575082155b98975050505050505050565b6040805180820190915260008082526020820152610a746111cf565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa90508080610ab157600080fd5b5080610ad057604051633842fc7360e21b815260040160405180910390fd5b505092915050565b6040805180820190915260008082526020820152610af46111ed565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa90508080610ab157600080fd5b604080518082019091526000808252602082015260208201517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790600003610b94576040518060400160405280828560000151610b83919061150f565b815260006020909101529392505050565b6040518060400160405280828560000151610baf919061150f565b8152602001828560200151610bc4919061150f565b610bce9084611531565b90529392505050565b60408051601880825261032082019092526000919082908260208201610300803683370190505090508a6000015181600081518110610c1857610c186114e3565b6020026020010181815250508a6020015181600181518110610c3c57610c3c6114e3565b602090810291909101015289516001602002015181600281518110610c6357610c636114e3565b6020908102919091010152895151815182906003908110610c8657610c866114e3565b6020026020010181815250508960200151600160028110610ca957610ca96114e3565b602002015181600481518110610cc157610cc16114e3565b6020026020010181815250508960200151600060028110610ce457610ce46114e3565b602002015181600581518110610cfc57610cfc6114e3565b602002602001018181525050886000015181600681518110610d2057610d206114e3565b602002602001018181525050886020015181600781518110610d4457610d446114e3565b602090810291909101015287516001602002015181600881518110610d6b57610d6b6114e3565b6020908102919091010152875151815182906009908110610d8e57610d8e6114e3565b6020026020010181815250508760200151600160028110610db157610db16114e3565b602002015181600a81518110610dc957610dc96114e3565b6020026020010181815250508760200151600060028110610dec57610dec6114e3565b602002015181600b81518110610e0457610e046114e3565b602002602001018181525050866000015181600c81518110610e2857610e286114e3565b602002602001018181525050866020015181600d81518110610e4c57610e4c6114e3565b602090810291909101015285516001602002015181600e81518110610e7357610e736114e3565b602090810291909101015285515181518290600f908110610e9657610e966114e3565b6020026020010181815250508560200151600160028110610eb957610eb96114e3565b602002015181601081518110610ed157610ed16114e3565b6020026020010181815250508560200151600060028110610ef457610ef46114e3565b602002015181601181518110610f0c57610f0c6114e3565b602002602001018181525050846000015181601281518110610f3057610f306114e3565b602002602001018181525050846020015181601381518110610f5457610f546114e3565b602090810291909101015283516001602002015181601481518110610f7b57610f7b6114e3565b6020908102919091010152835151815182906015908110610f9e57610f9e6114e3565b6020026020010181815250508360200151600160028110610fc157610fc16114e3565b602002015181601681518110610fd957610fd96114e3565b6020026020010181815250508360200151600060028110610ffc57610ffc6114e3565b602002015181601781518110611014576110146114e3565b60200260200101818152505061102981611101565b9b9a5050505050505050505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761107a818689098280611071576110716114f9565b8689098361115a565b8180611088576110886114f9565b8280611096576110966114f9565b87890983806110a7576110a76114f9565b878b0908925092505094509492505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476110e887868361115a565b6110f387868461115a565b925092505094509492505050565b805160009061110e61120b565b6000602082602085026020880160086107d05a03fa9050808061113057600080fd5b508061114f57604051633842fc7360e21b815260040160405180910390fd5b505115159392505050565b6000818061116a5761116a6114f9565b6111748484611531565b8508949350505050565b6040805160e08101909152600060a0820181815260c08301919091528152602081016111a8611229565b81526020016111b5611229565b81526020016111c2611229565b8152602001606081525090565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b604051806040016040528061123c61124e565b815260200161124961124e565b905290565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156112a5576112a561126c565b60405290565b6040516060810167ffffffffffffffff811182821017156112a5576112a561126c565b604051601f8201601f1916810167ffffffffffffffff811182821017156112f7576112f761126c565b604052919050565b60006040828403121561131157600080fd5b611319611282565b823581526020928301359281019290925250919050565b600082601f83011261134157600080fd5b611349611282565b80604084018581111561135b57600080fd5b845b8181101561137557803584526020938401930161135d565b509095945050505050565b600082601f83011261139157600080fd5b813567ffffffffffffffff8111156113ab576113ab61126c565b8060051b6113bb602082016112ce565b918252602081850181019290810190868411156113d757600080fd5b6020860192505b838310156103ed5782358252602092830192909101906113de565b60008082840361012081121561140e57600080fd5b61010081121561141d57600080fd5b6114256112ab565b61142f86866112ff565b81526080603f198301121561144357600080fd5b61144b611282565b915061145a8660408701611330565b82526114698660808701611330565b60208301528160208201526114818660c087016112ff565b604082015292505061010083013567ffffffffffffffff8111156114a457600080fd5b6114b085828601611380565b9150509250929050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610088576100886114ba565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008261152c57634e487b7160e01b600052601260045260246000fd5b500690565b81810381811115610088576100886114ba56fea26469706673582212201bd7ef8b9aa55c03276d1b95a8fae7a74a2dc22f7b49077c3c90e2cf618ff2f864736f6c634300081a0033";

type Rollup4VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Rollup4VerifierConstructorParams
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Rollup4Verifier__factory extends ContractFactory {
  constructor(...args: Rollup4VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = "Rollup4Verifier";
  }

  deploy(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): Promise<Rollup4Verifier> {
    return super.deploy(overrides || {}) as Promise<Rollup4Verifier>;
  }
  getDeployTransaction(
    overrides?: Overrides & { from?: string | Promise<string> }
  ): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Rollup4Verifier {
    return super.attach(address) as Rollup4Verifier;
  }
  connect(signer: Signer): Rollup4Verifier__factory {
    return super.connect(signer) as Rollup4Verifier__factory;
  }
  static readonly contractName: "Rollup4Verifier";
  public readonly contractName: "Rollup4Verifier";
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Rollup4VerifierInterface {
    return new utils.Interface(_abi) as Rollup4VerifierInterface;
  }
  static connect(
    address: string,
    signerOrProvider: Signer | Provider
  ): Rollup4Verifier {
    return new Contract(address, _abi, signerOrProvider) as Rollup4Verifier;
  }
}
