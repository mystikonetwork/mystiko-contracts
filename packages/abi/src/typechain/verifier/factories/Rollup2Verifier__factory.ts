/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Rollup2Verifier, Rollup2VerifierInterface } from '../Rollup2Verifier';

const _abi = [
  {
    inputs: [],
    name: 'InvalidParam',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotOnCurve',
    type: 'error',
  },
  {
    inputs: [],
    name: 'StaticCallFailed',
    type: 'error',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'a',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256[2]',
                name: 'X',
                type: 'uint256[2]',
              },
              {
                internalType: 'uint256[2]',
                name: 'Y',
                type: 'uint256[2]',
              },
            ],
            internalType: 'struct Pairing.G2Point',
            name: 'b',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'c',
            type: 'tuple',
          },
        ],
        internalType: 'struct VerifierLib.Proof',
        name: 'proof',
        type: 'tuple',
      },
      {
        internalType: 'uint256[]',
        name: 'input',
        type: 'uint256[]',
      },
    ],
    name: 'verifyTx',
    outputs: [
      {
        internalType: 'bool',
        name: 'r',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5061158d806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e3660046113f4565b610057565b604051901515815260200160405180910390f35b6000815160041461007b57604051633494a40d60e21b815260040160405180910390fd5b610085828461008e565b90505b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100ba610401565b9050806080015151855160016100d091906114ca565b146100ee57604051633494a40d60e21b815260040160405180910390fd5b835151821161011057604051633494a40d60e21b815260040160405180910390fd5b835160200151821161013557604051633494a40d60e21b815260040160405180910390fd5b60208401515151821161015b57604051633494a40d60e21b815260040160405180910390fd5b602084810151015151821161018357604051633494a40d60e21b815260040160405180910390fd5b60208481015151015182116101ab57604051633494a40d60e21b815260040160405180910390fd5b602084810151810151015182116101d557604051633494a40d60e21b815260040160405180910390fd5b60408401515182116101fa57604051633494a40d60e21b815260040160405180910390fd5b818460400151602001511061022257604051633494a40d60e21b815260040160405180910390fd5b835161022d90610901565b61024a576040516361586bdd60e01b815260040160405180910390fd5b6102578460200151610979565b610274576040516361586bdd60e01b815260040160405180910390fd5b6102818460400151610901565b61029e576040516361586bdd60e01b815260040160405180910390fd5b60006102de604051806040016040528060008152602001600081525083608001516000815181106102d1576102d16114dd565b6020026020010151610a63565b905060005b865181101561038e57838782815181106102ff576102ff6114dd565b60200260200101511061032557604051633494a40d60e21b815260040160405180910390fd5b61037a82610375856080015184600161033e91906114ca565b8151811061034e5761034e6114dd565b60200260200101518a8581518110610368576103686114dd565b6020026020010151610ae3565b610a63565b915080610386816114f3565b9150506102e3565b5061039881610901565b6103b5576040516361586bdd60e01b815260040160405180910390fd5b6103f7856000015186602001516103cb84610b31565b85604001516103dd8a60400151610b31565b606088015188516103ed90610b31565b8960200151610be2565b9695505050505050565b610409611189565b6040805180820182527f02d64fd8cdb31c0fa7654e6230075e3fb82f30ed9d78191750eb2be22525a10e81527f11bf3c339c87176e19969892781eba1d5a45bf29bac35c2ab10fb3b50a5fd90d6020808301919091529083528151608080820184527f06378421e7bd9c00848559c6329197622e2f7ca4c0a76c751201fba69b82453c8285019081527f0f0f84d09f907aae15e198baca0ad87b080cccdc2e1589be1f3d40b5b90a8e04606080850191909152908352845180860186527f1c737cc857bfc8393a7bf6f175707264b38d6da5052867d54eb489cc35c8205b81527f2cdf9078056d36a7762e563069145625f1db63047061f4deec760dc54233381a818601528385015285840192909252835180820185527f23d6f759d3a265d14ecbeddd37e340011139d94872437d97316e69e7136e45288186019081527f29ef01b938421463f13e18158a314174e49d7fa226e1d5a8ab6353dd64916cde828501528152845180860186527f1db8adbe798386544fdce4c946e47d2ad638df131aba4f21100600a3d0751f1c81527f0a5f4dc919c23a8fc559293a767daa3f278ddf383cd662d694360d5bc979d058818601528185015285850152835190810184527f1c92d3317d5686ac17e7f5b34b424c11333493d968baa22786747da969e6fea88185019081527f2a52156951ea35148e6ea4a4dc5763b956a683534d3368dc17f84672989d1cdf828401528152835180850185527f01f3dee12124159f46606d6faa5a96dcd67430ef270c9f251191278a7c925cf581527f2c1a5a212ae4054fa027a7f66ddc6b3a84e32d16226254c935a19d6af6bc7f408185015281840152908401528151600580825260c08201909352919082015b604080518082019091526000808252602082015281526020019060019003908161068457505060808201908152604080518082019091527f23adb98e613cbc739b6dc93fa5225d062c089abe58c87acf1aab5a174fe6479781527f25ede77e4ac5241b764a81c5abedd1a6b78dd4888486de33219fe6fc7a5d8d11602082015290518051600090610717576107176114dd565b602002602001018190525060405180604001604052807f1528c7066e97cc1dc7da9df42e7dfef8f191f19c3d75122df6b8ca794a39c52d81526020017f2216a352ecbf416c6514f4b281eb9c65a18b49ffd1098ad1bfe48c5b0b33b0e0815250816080015160018151811061078e5761078e6114dd565b602002602001018190525060405180604001604052807f142a9bc453c1827cf95369392115fcd29f35a8c1e4458dd8f363ba7412597f6181526020017f1ab1503bbf80d01c93041433c0c5167341f848c48c3f3647235a4be0fc1d3a158152508160800151600281518110610805576108056114dd565b602002602001018190525060405180604001604052807f1d2c866924b036d99d39a0ba958580ffe655bd10c77182b3159d9838c7841ceb81526020017f16a506e4419493fa4bcc135f02432efd43df341f1ae4ec1fa276dc5b14217c70815250816080015160038151811061087c5761087c6114dd565b602002602001018190525060405180604001604052807f209834611f80ac546b3568572e983cd53bb2db18d90564ec4cbe2b5d4ef744e681526020017f255d0ba2c3a82c9be97d19b354e84fa017cf30e89d39b16fe39b7cf2a06b36f181525081608001516004815181106108f3576108f36114dd565b602002602001018190525090565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761092f816003611522565b818061093d5761093d61150c565b8451838061094d5761094d61150c565b865180090982806109605761096061150c565b602086015180096109719190611544565b149392505050565b6020818101518051918101516000927f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5927e9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d29285928392839283926109e992909190829060015b6020020151611043565b895180516020820151939750919550610a0e929060005b60200201518b5160016109df565b89519193509150610a2490839083906000610a00565b9092509050610a35848484846110c4565b9094509250610a46848488886110c4565b909450925083158015610a57575082155b98975050505050505050565b6040805180820190915260008082526020820152610a7f6111da565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa90508080610abc57600080fd5b5080610adb57604051633842fc7360e21b815260040160405180910390fd5b505092915050565b6040805180820190915260008082526020820152610aff6111f8565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa90508080610abc57600080fd5b604080518082019091526000808252602082015260208201517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790600003610b9f576040518060400160405280828560000151610b8e9190611522565b815260006020909101529392505050565b6040518060400160405280828560000151610bba9190611522565b8152602001828560200151610bcf9190611522565b610bd99084611544565b90529392505050565b60408051601880825261032082019092526000919082908260208201610300803683370190505090508a6000015181600081518110610c2357610c236114dd565b6020026020010181815250508a6020015181600181518110610c4757610c476114dd565b602090810291909101015289516001602002015181600281518110610c6e57610c6e6114dd565b6020908102919091010152895151815182906003908110610c9157610c916114dd565b6020026020010181815250508960200151600160028110610cb457610cb46114dd565b602002015181600481518110610ccc57610ccc6114dd565b6020026020010181815250508960200151600060028110610cef57610cef6114dd565b602002015181600581518110610d0757610d076114dd565b602002602001018181525050886000015181600681518110610d2b57610d2b6114dd565b602002602001018181525050886020015181600781518110610d4f57610d4f6114dd565b602090810291909101015287516001602002015181600881518110610d7657610d766114dd565b6020908102919091010152875151815182906009908110610d9957610d996114dd565b6020026020010181815250508760200151600160028110610dbc57610dbc6114dd565b602002015181600a81518110610dd457610dd46114dd565b6020026020010181815250508760200151600060028110610df757610df76114dd565b602002015181600b81518110610e0f57610e0f6114dd565b602002602001018181525050866000015181600c81518110610e3357610e336114dd565b602002602001018181525050866020015181600d81518110610e5757610e576114dd565b602090810291909101015285516001602002015181600e81518110610e7e57610e7e6114dd565b602090810291909101015285515181518290600f908110610ea157610ea16114dd565b6020026020010181815250508560200151600160028110610ec457610ec46114dd565b602002015181601081518110610edc57610edc6114dd565b6020026020010181815250508560200151600060028110610eff57610eff6114dd565b602002015181601181518110610f1757610f176114dd565b602002602001018181525050846000015181601281518110610f3b57610f3b6114dd565b602002602001018181525050846020015181601381518110610f5f57610f5f6114dd565b602090810291909101015283516001602002015181601481518110610f8657610f866114dd565b6020908102919091010152835151815182906015908110610fa957610fa96114dd565b6020026020010181815250508360200151600160028110610fcc57610fcc6114dd565b602002015181601681518110610fe457610fe46114dd565b6020026020010181815250508360200151600060028110611007576110076114dd565b60200201518160178151811061101f5761101f6114dd565b6020026020010181815250506110348161110c565b9b9a5050505050505050505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761108581868909828061107c5761107c61150c565b86890983611165565b81806110935761109361150c565b82806110a1576110a161150c565b87890983806110b2576110b261150c565b878b0908925092505094509492505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476110f3878683611165565b6110fe878684611165565b925092505094509492505050565b8051600090611119611216565b6000602082602085026020880160086107d05a03fa9050808061113b57600080fd5b508061115a57604051633842fc7360e21b815260040160405180910390fd5b505115159392505050565b600081806111755761117561150c565b61117f8484611544565b8508949350505050565b6040805160e08101909152600060a0820181815260c08301919091528152602081016111b3611234565b81526020016111c0611234565b81526020016111cd611234565b8152602001606081525090565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060400160405280611247611259565b8152602001611254611259565b905290565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156112b0576112b0611277565b60405290565b6040516060810167ffffffffffffffff811182821017156112b0576112b0611277565b6000604082840312156112eb57600080fd5b6112f361128d565b9050813581526020820135602082015292915050565b600082601f83011261131a57600080fd5b61132261128d565b80604084018581111561133457600080fd5b845b8181101561134e578035845260209384019301611336565b509095945050505050565b600082601f83011261136a57600080fd5b8135602067ffffffffffffffff8083111561138757611387611277565b8260051b604051601f19603f830116810181811084821117156113ac576113ac611277565b6040529384528581018301938381019250878511156113ca57600080fd5b83870191505b848210156113e9578135835291830191908301906113d0565b979650505050505050565b60008082840361012081121561140957600080fd5b6101008082121561141957600080fd5b6114216112b6565b61142b87876112d9565b81526080603f198401121561143f57600080fd5b61144761128d565b92506114568760408801611309565b83526114658760808801611309565b602084015282602082015261147d8760c088016112d9565b60408201529350840135905067ffffffffffffffff81111561149e57600080fd5b6114aa85828601611359565b9150509250929050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610088576100886114b4565b634e487b7160e01b600052603260045260246000fd5b600060018201611505576115056114b4565b5060010190565b634e487b7160e01b600052601260045260246000fd5b60008261153f57634e487b7160e01b600052601260045260246000fd5b500690565b81810381811115610088576100886114b456fea2646970667358221220bfe9e42fef4eb97649bf9f0f8527735d85db8656a0735bcbdc2d298a926a523364736f6c63430008140033';

type Rollup2VerifierConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Rollup2VerifierConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Rollup2Verifier__factory extends ContractFactory {
  constructor(...args: Rollup2VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Rollup2Verifier';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Rollup2Verifier> {
    return super.deploy(overrides || {}) as Promise<Rollup2Verifier>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Rollup2Verifier {
    return super.attach(address) as Rollup2Verifier;
  }
  connect(signer: Signer): Rollup2Verifier__factory {
    return super.connect(signer) as Rollup2Verifier__factory;
  }
  static readonly contractName: 'Rollup2Verifier';
  public readonly contractName: 'Rollup2Verifier';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Rollup2VerifierInterface {
    return new utils.Interface(_abi) as Rollup2VerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Rollup2Verifier {
    return new Contract(address, _abi, signerOrProvider) as Rollup2Verifier;
  }
}
