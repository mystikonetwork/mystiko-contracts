/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Transaction1x2Verifier, Transaction1x2VerifierInterface } from '../Transaction1x2Verifier';

const _abi = [
  {
    inputs: [],
    name: 'InvalidParam',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotOnCurve',
    type: 'error',
  },
  {
    inputs: [],
    name: 'StaticCallFailed',
    type: 'error',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'a',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256[2]',
                name: 'X',
                type: 'uint256[2]',
              },
              {
                internalType: 'uint256[2]',
                name: 'Y',
                type: 'uint256[2]',
              },
            ],
            internalType: 'struct Pairing.G2Point',
            name: 'b',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'c',
            type: 'tuple',
          },
        ],
        internalType: 'struct VerifierLib.Proof',
        name: 'proof',
        type: 'tuple',
      },
      {
        internalType: 'uint256[]',
        name: 'input',
        type: 'uint256[]',
      },
    ],
    name: 'verifyTx',
    outputs: [
      {
        internalType: 'bool',
        name: 'r',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5061206a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e366004611e64565b610057565b604051901515815260200160405180910390f35b60008151601b1461007b57604051633494a40d60e21b815260040160405180910390fd5b610085828461008c565b9392505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100b86103ff565b9050806080015151855160016100ce9190611f70565b146100ec57604051633494a40d60e21b815260040160405180910390fd5b835151821161010e57604051633494a40d60e21b815260040160405180910390fd5b835160200151821161013357604051633494a40d60e21b815260040160405180910390fd5b60208401515151821161015957604051633494a40d60e21b815260040160405180910390fd5b602084810151015151821161018157604051633494a40d60e21b815260040160405180910390fd5b60208481015151015182116101a957604051633494a40d60e21b815260040160405180910390fd5b602084810151810151015182116101d357604051633494a40d60e21b815260040160405180910390fd5b60408401515182116101f857604051633494a40d60e21b815260040160405180910390fd5b818460400151602001511061022057604051633494a40d60e21b815260040160405180910390fd5b835161022b906113af565b610248576040516361586bdd60e01b815260040160405180910390fd5b6102558460200151611427565b610272576040516361586bdd60e01b815260040160405180910390fd5b61027f84604001516113af565b61029c576040516361586bdd60e01b815260040160405180910390fd5b60006102dc604051806040016040528060008152602001600081525083608001516000815181106102cf576102cf612008565b6020026020010151611511565b905060005b865181101561038c57838782815181106102fd576102fd612008565b60200260200101511061032357604051633494a40d60e21b815260040160405180910390fd5b61037882610373856080015184600161033c9190611f70565b8151811061034c5761034c612008565b60200260200101518a858151811061036657610366612008565b602002602001015161158e565b611511565b91508061038481611f9f565b9150506102e1565b50610396816113af565b6103b3576040516361586bdd60e01b815260040160405180910390fd5b6103f5856000015186602001516103c9846115dd565b85604001516103db8a604001516115dd565b606088015188516103eb906115dd565b896020015161168b565b9695505050505050565b610407611c2e565b6040805180820182527f0489a10259e71f3df3aca97e1d55c58ac075776f7cd7636a08752f0ee55f76b181527f18d448b93c2a2a65a57c0fce1c9b81fce4395f0d825ae159bd0e990dad5fcac76020808301919091529083528151608080820184527f0f1dcbf1873546d5dd9ec8b810ee7942e9414244c9b37ece6ebf9edd133df07b8285019081527f17f978f9c20ba5b911a353e5f7cefbd98ebbb9e06cc332a70bcdc1d7ee704f74606080850191909152908352845180860186527f2f5dc8329a55a991af803ee9d4f9a3d4b5782aebe706501c3933c60d842f21d881527f15e2400c9de53778ea9831c066bad43d00098cf0abdf0018e6b0dfc4f3327900818601528385015285840192909252835180820185527f07ab6524293a24e36c2960cac7d7788a204b3f4a34ac29f6a8e4c1b2c02181ec8186019081527f01e23baa7b15c6417fe893c41de68454a9499c2843f796fe0ed227d00f6dc9e4828501528152845180860186527f2e89a7b0495be2fd84d41edf61adabd9c63bfb66008aa98648908f1bf4cf6ecf81527f01a205c7eca6356587fc8728cdd0a6a51245dc6740f54a256685699804c6fd17818601528185015285850152835190810184527f207fab676a761a7099c30120b456d3432e6425cc0d875442b47d139f3a97a0ff8185019081527f2d7f2b3d86888498e0fd618c5b7af32b38cd2bad4170f46bbc700b91e9bd9e8c828401528152835180850185527f1d0b03405c39ef5f04b2db35f453e3f20db649ee92d84cd56dd0a651b0f9087f81527f068dded24a522a42c99e5d29916e7c2bace798793408fc3a66240332bc39bc468185015281840152908401528151601c8082526103a08201909352919082015b604080518082019091526000808252602082015281526020019060019003908161068357505060808201908152604080518082019091527f0dfcd030e8e999be673e50a79f20b8ba162c5cd39f1150f7213b709b4ea3ae3481527f0ed587fa7e43dda33d9996888d10546f123af984e9d93439f3827dfc795676d660208201529051805160009061071657610716612008565b602002602001018190525060405180604001604052807f27b56a41a89540ce6ee1a1b9f602d4b63cb711d808d0024f84ac105cc09c7a4a81526020017f0e131f2572daba1c7a1e3d21e014b9e1bd9222afd03048cd4c6e501133491896815250816080015160018151811061078d5761078d612008565b602002602001018190525060405180604001604052807f056a2de3834ee5fbc6ce7953c041a5f082ef76a34ea5646cad04cfd79742f20881526020017f0390d4d002fcc57bc9fe8eb3463e8227abdbe19d3922da1c7e4073bdee779d78815250816080015160028151811061080457610804612008565b602002602001018190525060405180604001604052807f05eef406f3c85b65b8a7da8bfcdfe50a86234effcd60f3333f745fc628e76b5b81526020017f2efb38c0d6693e926ab8a35bb7066cb85599105c23fc87f8e96a05aa3e0f79f9815250816080015160038151811061087b5761087b612008565b602002602001018190525060405180604001604052807f0ce2644b6ccf9f7fbfe6cdfe41265b861958bdad8b93e9fd871c3fa7701fe26381526020017f11782474f5cef83d60ddb97a9a36ae6bb3ace1121bae948ec7a9f0610e11587a81525081608001516004815181106108f2576108f2612008565b602002602001018190525060405180604001604052807f091c49f5c45fb5c12a38a4d127424f46f96885adc41bc82b8829095adad63f7481526020017f2b121acca471fa1522f0bb7ea4d2095698bfb1f598039315b4656f7596f926aa815250816080015160058151811061096957610969612008565b602002602001018190525060405180604001604052807f2bafc6df88b4ebafc44445048604c5758de8a131f6660f8938ab8ee898dcf38581526020017f09519de554a3f7325a6e6372eaee8378db12cdb2a2bd9390bca90d94f87a9aeb81525081608001516006815181106109e0576109e0612008565b602002602001018190525060405180604001604052807f2f6e081436dd9e0504a947f8498cb9bc1793169de6235e18ae4a7b2b696d481d81526020017f2de917e0f0736b7c529a6d2a538ebcb8f206b1c8bb0ad4f7d05b95d44e44e36c8152508160800151600781518110610a5757610a57612008565b602002602001018190525060405180604001604052807f1282ecc8c6b61b68190b8d4ff8b0dec797ff57812c7f91ff4d18146be2f5b09a81526020017f1386f46e485dab98dc4010aaf723a662d2a84597e98d90d8f7db41ac3e2e8fe98152508160800151600881518110610ace57610ace612008565b602002602001018190525060405180604001604052807f1e0a61e0a79bfd4159cdde629367dc8dc56973d61fb05c19c76ff2e88c50281c81526020017f17a21c20472f1936050ac35126e66771767917aff1e627508a33c8cc70b951838152508160800151600981518110610b4557610b45612008565b602002602001018190525060405180604001604052807f0158d938c13477d0b12d96ae5b294e7407cedb042a9f96624df246ffcbe4807981526020017f02a747df915d7e6fb16fd3374da3dc33b465736d421e9faeb9d3c9705e4b336b8152508160800151600a81518110610bbc57610bbc612008565b602002602001018190525060405180604001604052807f2f335b9b0957bdafa940ce34186e97d22f0d95334831c7d96cba2c2f5359b7ac81526020017ea76fdaae2b5228d348d2d64f9926b2c0aff080ddc7011d55fce7c9382f03898152508160800151600b81518110610c3257610c32612008565b602002602001018190525060405180604001604052807f2e9f20f19b66cef1fc3010e1b5041d5b16605c4ef92ab20cac215f79969548b081526020017f27690be68742d4cbeb18b378aea9fc90349575f0dcd7a60d3fef4985355854158152508160800151600c81518110610ca957610ca9612008565b602002602001018190525060405180604001604052807f1bc87835a9ea139344b6c91d62e71e6ed1812ee3b56b1b3038a0fefebb8b429881526020017f24c1677ad52a10a1c58be877c0a975bd29350d178ab2bebd9c5c0e8a1dfccc588152508160800151600d81518110610d2057610d20612008565b602002602001018190525060405180604001604052807f2f7546bca109d516af83b8b8e422a56b699fe964a88e7453b70e61da506fb75181526020017f30556833cf220330fe07d56f968b0ee555d3ddc6e286138dcc7c41e7a5fdd76c8152508160800151600e81518110610d9757610d97612008565b602002602001018190525060405180604001604052807f2ec6769e5b3a2096353eb2c9361062f236d0c8e6a35628c87072d5c1a91d1f0c81526020017f0382e0c7050c77c5d24ee3db055fb4f1b95a0ec437b1c2430daa98a447be24db8152508160800151600f81518110610e0e57610e0e612008565b602002602001018190525060405180604001604052807f09b59ce2d3ddebbc0bf22fea29bdea1969e2bb4de43aeb6b364cd6021a39cc8781526020017f0c0c71672bab925846bb33b065693ed0882e4a0f40fa2ea9b4d99ea71ff78baa8152508160800151601081518110610e8557610e85612008565b602002602001018190525060405180604001604052807f04fdead256170d41393b1d80017cb6a12853bfbe7645f21a633d11ed205a3f1881526020017f17f34678419f260bdffd2fab1920c8c18859759493cfb6e5a1ce2a6a86ab3e8f8152508160800151601181518110610efc57610efc612008565b602002602001018190525060405180604001604052807f1f61aa5b3f294f997030be286e98a5db402b2422806b4add67b5f3d5b1550d9281526020017f1e6bd87b205565d5278449ecfd0301ed5e7be2ad76ad84aecec381cd466d58a08152508160800151601281518110610f7357610f73612008565b602002602001018190525060405180604001604052807f0d465f91bef80f3ab1d5c1602fd62076c21530637685c4c1dfb9f609574a874981526020017f093607e6d8c1f8b1c133a20e76d8d094b8fbd441bc898d1e3a665be1bfefde028152508160800151601381518110610fea57610fea612008565b602002602001018190525060405180604001604052807f17947a8f73ed5b012530196904f0c5fe57bdb2b93e288fd52ef5e4fbca0d5ef081526020017f0e36b300bbc67474bd4953bfa3abccf652661273b803401e071d60ec024781be815250816080015160148151811061106157611061612008565b602002602001018190525060405180604001604052807f1d2ca87a25cdc27b5602d3c76ab3d79178268ba02e6f90c1c6f3d461e68c4cc881526020017f29b1b6491f14a34943e01cc88be890b270124a01c9724ad815e9e1c93551f65b81525081608001516015815181106110d8576110d8612008565b602002602001018190525060405180604001604052807f1bb0b1cb2f4a099e643d5d8493e68b4c089247721e4a23936f1fe7fe855a9dc081526020017f1a9bd3c569195f7d72fcd4c8213268d234a7f52119a26514bebe8f57d444a25f815250816080015160168151811061114f5761114f612008565b602002602001018190525060405180604001604052807f29effab2520a90236a2798b12c131afd9b9cdd275fdc4b78c7c565f75fb1f32781526020017f0f3934d6ef1a5fc56e16e2177158dddb67e7fc1605f62f3ce9db550edd360ec781525081608001516017815181106111c6576111c6612008565b602002602001018190525060405180604001604052807f04e72755ba5521bbef2400d9c9a2243d05bee64f1068897ff788a8f406ee8c0981526020017f2a00671f23e88c6f629ea9793795c44b8a2782eaf5de73809346194de217cd9b815250816080015160188151811061123d5761123d612008565b602002602001018190525060405180604001604052807f1bbeb1e8d9ed08000c9bc7e629b92fc46cff4bd7e439db5ced0d85cbb3a4cb0c81526020017f129f798fdd8d99dd565069fbed9809c73c8c73bc32d22d1c6c13a5b2ce86664081525081608001516019815181106112b4576112b4612008565b602002602001018190525060405180604001604052807f0e9e5559034831db373fee5ec4f0ea086380fda258550f39cbe16655d25efecf81526020017e95fe2ac40ec6ba017d5a798b6efd8be52d9b268a1a99cfb9ea77270244fef28152508160800151601a8151811061132a5761132a612008565b602002602001018190525060405180604001604052807f20a95e44f135e0c733e0d8a3262364b23c106355e32d40830e2bed135151b40981526020017f140413a9ca7a22604868b065205320ef15d8c58271ae708f3af1504b6c08c8db8152508160800151601b815181106113a1576113a1612008565b602002602001018190525090565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476113dd816003611fba565b81806113eb576113eb611ff2565b845183806113fb576113fb611ff2565b8651800909828061140e5761140e611ff2565b6020860151800961141f9190611f88565b149392505050565b6020818101518051918101516000927f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5927e9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d292859283928392839261149792909190829060015b6020020151611aec565b8951805160208201519397509195506114bc929060005b60200201518b51600161148d565b895191935091506114d2908390839060006114ae565b90925090506114e384848484611b6d565b90945092506114f484848888611b6d565b909450925083158015611505575082155b98975050505050505050565b604080518082019091526000808252602082015261152d611c7f565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa905080801561002b575b508061158657604051633842fc7360e21b815260040160405180910390fd5b505092915050565b60408051808201909152600080825260208201526115aa611c9d565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa905080801561002b57611567565b604080518082019091526000808252602082015260208201517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47906116485760405180604001604052808285600001516116379190611fba565b815260006020909101529392505050565b60405180604001604052808285600001516116639190611fba565b81526020018285602001516116789190611fba565b6116829084611f88565b90529392505050565b60408051601880825261032082019092526000919082908260208201610300803683370190505090508a60000151816000815181106116cc576116cc612008565b6020026020010181815250508a60200151816001815181106116f0576116f0612008565b60209081029190910101528951600160200201518160028151811061171757611717612008565b602090810291909101015289515181518290600390811061173a5761173a612008565b602002602001018181525050896020015160016002811061175d5761175d612008565b60200201518160048151811061177557611775612008565b602002602001018181525050896020015160006002811061179857611798612008565b6020020151816005815181106117b0576117b0612008565b6020026020010181815250508860000151816006815181106117d4576117d4612008565b6020026020010181815250508860200151816007815181106117f8576117f8612008565b60209081029190910101528751600160200201518160088151811061181f5761181f612008565b602090810291909101015287515181518290600990811061184257611842612008565b602002602001018181525050876020015160016002811061186557611865612008565b602002015181600a8151811061187d5761187d612008565b60200260200101818152505087602001516000600281106118a0576118a0612008565b602002015181600b815181106118b8576118b8612008565b602002602001018181525050866000015181600c815181106118dc576118dc612008565b602002602001018181525050866020015181600d8151811061190057611900612008565b602090810291909101015285516001602002015181600e8151811061192757611927612008565b602090810291909101015285515181518290600f90811061194a5761194a612008565b602002602001018181525050856020015160016002811061196d5761196d612008565b60200201518160108151811061198557611985612008565b60200260200101818152505085602001516000600281106119a8576119a8612008565b6020020151816011815181106119c0576119c0612008565b6020026020010181815250508460000151816012815181106119e4576119e4612008565b602002602001018181525050846020015181601381518110611a0857611a08612008565b602090810291909101015283516001602002015181601481518110611a2f57611a2f612008565b6020908102919091010152835151815182906015908110611a5257611a52612008565b6020026020010181815250508360200151600160028110611a7557611a75612008565b602002015181601681518110611a8d57611a8d612008565b6020026020010181815250508360200151600060028110611ab057611ab0612008565b602002015181601781518110611ac857611ac8612008565b602002602001018181525050611add81611bb5565b9b9a5050505050505050505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611b2e818689098280611b2557611b25611ff2565b86890983611c0a565b8180611b3c57611b3c611ff2565b8280611b4a57611b4a611ff2565b8789098380611b5b57611b5b611ff2565b878b0908925092505094509492505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611b9c878683611c0a565b611ba7878684611c0a565b925092505094509492505050565b8051600090611bc2611cbb565b6000602082602085026020880160086107d05a03fa905080801561002b575080611bff57604051633842fc7360e21b815260040160405180910390fd5b505115159392505050565b60008180611c1a57611c1a611ff2565b611c248484611f88565b8508949350505050565b6040805160e08101909152600060a0820181815260c0830191909152815260208101611c58611cd9565b8152602001611c65611cd9565b8152602001611c72611cd9565b8152602001606081525090565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060400160405280611cec611cfe565b8152602001611cf9611cfe565b905290565b60405180604001604052806002906020820280368337509192915050565b600082601f830112611d2d57600080fd5b611d35611f24565b808385604086011115611d4757600080fd5b60005b6002811015611d69578135845260209384019390910190600101611d4a565b509095945050505050565b600082601f830112611d8557600080fd5b8135602067ffffffffffffffff80831115611da257611da261201e565b8260051b604051601f19603f83011681018181108482111715611dc757611dc761201e565b60405284815283810192508684018288018501891015611de657600080fd5b600092505b85831015611e09578035845292840192600192909201918401611deb565b50979650505050505050565b600060408284031215611e2757600080fd5b6040516040810181811067ffffffffffffffff82111715611e4a57611e4a61201e565b604052823581526020928301359281019290925250919050565b600080828403610120811215611e7957600080fd5b61010080821215611e8957600080fd5b611e91611f4d565b611e9b8787611e15565b81526080603f1984011215611eaf57600080fd5b611eb7611f24565b9250611ec68760408801611d1c565b8352611ed58760808801611d1c565b6020840152826020820152611eed8760c08801611e15565b60408201529350840135905067ffffffffffffffff811115611f0e57600080fd5b611f1a85828601611d74565b9150509250929050565b6040805190810167ffffffffffffffff81118282101715611f4757611f4761201e565b60405290565b6040516060810167ffffffffffffffff81118282101715611f4757611f4761201e565b60008219821115611f8357611f83611fdc565b500190565b600082821015611f9a57611f9a611fdc565b500390565b6000600019821415611fb357611fb3611fdc565b5060010190565b600082611fd757634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212207c34ec1ebf9ef94012f94d2e8e786767da33af5b3bb44f70a571902fdbcd66a064736f6c63430008070033';

type Transaction1x2VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Transaction1x2VerifierConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Transaction1x2Verifier__factory extends ContractFactory {
  constructor(...args: Transaction1x2VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Transaction1x2Verifier';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Transaction1x2Verifier> {
    return super.deploy(overrides || {}) as Promise<Transaction1x2Verifier>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Transaction1x2Verifier {
    return super.attach(address) as Transaction1x2Verifier;
  }
  connect(signer: Signer): Transaction1x2Verifier__factory {
    return super.connect(signer) as Transaction1x2Verifier__factory;
  }
  static readonly contractName: 'Transaction1x2Verifier';
  public readonly contractName: 'Transaction1x2Verifier';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Transaction1x2VerifierInterface {
    return new utils.Interface(_abi) as Transaction1x2VerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Transaction1x2Verifier {
    return new Contract(address, _abi, signerOrProvider) as Transaction1x2Verifier;
  }
}
