/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Transaction1x2Verifier, Transaction1x2VerifierInterface } from '../Transaction1x2Verifier';

const _abi = [
  {
    inputs: [],
    name: 'InvalidParam',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotOnCurve',
    type: 'error',
  },
  {
    inputs: [],
    name: 'StaticCallFailed',
    type: 'error',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'a',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256[2]',
                name: 'X',
                type: 'uint256[2]',
              },
              {
                internalType: 'uint256[2]',
                name: 'Y',
                type: 'uint256[2]',
              },
            ],
            internalType: 'struct Pairing.G2Point',
            name: 'b',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'c',
            type: 'tuple',
          },
        ],
        internalType: 'struct VerifierLib.Proof',
        name: 'proof',
        type: 'tuple',
      },
      {
        internalType: 'uint256[]',
        name: 'input',
        type: 'uint256[]',
      },
    ],
    name: 'verifyTx',
    outputs: [
      {
        internalType: 'bool',
        name: 'r',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5061206a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e366004611e64565b610057565b604051901515815260200160405180910390f35b60008151601b1461007b57604051633494a40d60e21b815260040160405180910390fd5b610085828461008c565b9392505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100b86103ff565b9050806080015151855160016100ce9190611f70565b146100ec57604051633494a40d60e21b815260040160405180910390fd5b835151821161010e57604051633494a40d60e21b815260040160405180910390fd5b835160200151821161013357604051633494a40d60e21b815260040160405180910390fd5b60208401515151821161015957604051633494a40d60e21b815260040160405180910390fd5b602084810151015151821161018157604051633494a40d60e21b815260040160405180910390fd5b60208481015151015182116101a957604051633494a40d60e21b815260040160405180910390fd5b602084810151810151015182116101d357604051633494a40d60e21b815260040160405180910390fd5b60408401515182116101f857604051633494a40d60e21b815260040160405180910390fd5b818460400151602001511061022057604051633494a40d60e21b815260040160405180910390fd5b835161022b906113af565b610248576040516361586bdd60e01b815260040160405180910390fd5b6102558460200151611427565b610272576040516361586bdd60e01b815260040160405180910390fd5b61027f84604001516113af565b61029c576040516361586bdd60e01b815260040160405180910390fd5b60006102dc604051806040016040528060008152602001600081525083608001516000815181106102cf576102cf612008565b6020026020010151611511565b905060005b865181101561038c57838782815181106102fd576102fd612008565b60200260200101511061032357604051633494a40d60e21b815260040160405180910390fd5b61037882610373856080015184600161033c9190611f70565b8151811061034c5761034c612008565b60200260200101518a858151811061036657610366612008565b602002602001015161158e565b611511565b91508061038481611f9f565b9150506102e1565b50610396816113af565b6103b3576040516361586bdd60e01b815260040160405180910390fd5b6103f5856000015186602001516103c9846115dd565b85604001516103db8a604001516115dd565b606088015188516103eb906115dd565b896020015161168b565b9695505050505050565b610407611c2e565b6040805180820182527f1f3a074b3fc46f3f2f0f5b84077f619386e5b24deb375ea9ac5b427014700c2f81527f259b8448890f09a41bb8a1c1bf63f9b3da1acd7f86b914c91319e8a97dd53a996020808301919091529083528151608080820184527f0c3c8707ca3dac3eb4b254d615db52e52121cea4917b369b4e13803aec335b5e8285019081527f073fe83f902c338898e449ca99a03b884d2581ae230ecd457f9854cfa68eaeaa606080850191909152908352845180860186527f0915bdb1056430b6454d5748a2924345cb4c6d0fb1dea4a7d5ea73311a17e32a81527f0abe79d05390163ca051a57d2f3aad29b99a7266cae273c8b3d04999e3f9e521818601528385015285840192909252835180820185527f08dc6bd817d13c97cb79cb4eaed2d6b56a13c0e28976ffcc8197b2cfc03fcf148186019081527f0bbc9426e775bfc62aa834dccaddf42ade96435f56a74886561c570b0ce7250b828501528152845180860186527f058f6554c3cf6d2917c9b3e92d3297cb12091faaa033a318334053fa62820db881527f2acb3e68f987853197f080b9e7a3a7bfeb0d60d5a8dca7d2452c4238cd9d5caf818601528185015285850152835190810184527f045a3c2cee4cd155ef71725b91661b690772c69b6188cb78fd964fed49cdd2768185019081527f0cf63bdec8f07f07f504451e27f7cc9341962a2e2000dd12a290383ea4c97a6d828401528152835180850185527f1b803c33eee272eab7446958119a3e3189e1cbd46503f9c06570a73c0064a41e81527f21ac64c54c30a7d384e672a2cbf189ba1fb8f8109840d83331ed120abcef142e8185015281840152908401528151601c8082526103a08201909352919082015b604080518082019091526000808252602082015281526020019060019003908161068357505060808201908152604080518082019091527eeae0833c3b0bf6f2c09d54be5c4a088341a27d78dd12ecdee4da7a814c6a4081527f08a460dd2a8df4c751415f2c65383759067e03cfd97a547818d1232b30fe08f860208201529051805160009061071557610715612008565b602002602001018190525060405180604001604052807f0be7fc55134f4d8d17f76da50c06640a79884697471fa069fe0a5c1196449ea081526020017f2da3ac49b9d8e2e67965f4f72f02461ba26aecb53cc7fff0beecaab9f0c4f789815250816080015160018151811061078c5761078c612008565b602002602001018190525060405180604001604052807f1685446a3f0eb055ba11ab393b724636cf4bb4fae4cc6a255fd2c5aacfab245a81526020017f1d9bde1ef2d6395deff1e3c9799e7bc314e3facf4f87957291acd9266d192e55815250816080015160028151811061080357610803612008565b602002602001018190525060405180604001604052807f0c4bc3063abf4acbab32aee946214f0e2274e3562be5b8d0002feb780530815781526020017f048e086d3f53ce2355a505ef04065ad1a64ccfebdb121481505d3bbd77bb8740815250816080015160038151811061087a5761087a612008565b602002602001018190525060405180604001604052807f20b89c4b8091e8aa37696aaba734ca1365fb6fd993c5924eaff662d3ad003e0181526020017f287e34a1fe7b57d0fb85e41776d0e2b7b9fac01fd4648a4d6ba7eec8065db9e481525081608001516004815181106108f1576108f1612008565b602002602001018190525060405180604001604052807f11fb31ac831dc9e4047195ab0f0f3a55fd6ab491d73bb277a40a2ce4fa721f7581526020017f160fa17747096614a1bed25517054f9a7d4cd9fec7fb1b9f74c0801814d57b87815250816080015160058151811061096857610968612008565b602002602001018190525060405180604001604052807f0fe3123ceb8f0491337f9c3227c87cf110c16f8c66e04fe50fd5d5267a4beac481526020017f0d53af22fb8e54f4197497dba51a73de90875d952fc2e96e41b5b00cd29dd39a81525081608001516006815181106109df576109df612008565b602002602001018190525060405180604001604052807f108c6fd2457c00fe38133496a70d2698080cdcb3f9dca3b2e86101837a8458f581526020017f2f928cac8f975f0db3398b95920645bfcaf6a045af1609ebecc39192b37512408152508160800151600781518110610a5657610a56612008565b602002602001018190525060405180604001604052807f1dfe2ebbc3c3d824d7a052cbb72c1e11ca69b74042b31c9c614fc511aeed656f81526020017f0f9ff775fdc93ec0ec7a8271a15a2b5fa61d5531551999968264596cd2325be28152508160800151600881518110610acd57610acd612008565b602002602001018190525060405180604001604052807f2a9d35076fa169310197ba7ea94a3c6833f174b2eeb69823da2fd1d9cc21528681526020017f0cbcfc320576d7c6cd509746841ad7ac0734c61b839e0caea561087ac7fc3f3d8152508160800151600981518110610b4457610b44612008565b602002602001018190525060405180604001604052807f1a1c227021147867d4297067c50b4640367575770a742521bd2d3719462a1ffd81526020017f2027f64c557c57fe7bcf58260dd87fba8afd92c2794ddb71245025d53edd461f8152508160800151600a81518110610bbb57610bbb612008565b602002602001018190525060405180604001604052807f0206da6873045942729807eee96877a32301af0ccdc4a865aff3a9692e6ffcae81526020017f2f186ce4fb94864eea6d6509f30a58046168636504fd26659043ddb25cb781c58152508160800151600b81518110610c3257610c32612008565b602002602001018190525060405180604001604052807f02122dc1ee7409a57a8a7024e846f58f31b62b43485886541b9b5e70bc7c64e081526020017f1603de00f9b74fd9b31a9a388d65b036a89fdf53630fee4ca12a447dcfd9d4e48152508160800151600c81518110610ca957610ca9612008565b602002602001018190525060405180604001604052807f1aec7cfe495a51310546f933cccd44acb6d58240f599f4aed9fbaa99823de34481526020017f05d400e5cfe4ad0f87e8ba2ff84ce62444d856a8e8cea152c839a53e0f1db4568152508160800151600d81518110610d2057610d20612008565b602002602001018190525060405180604001604052807f2c540f4303e82bf2a4b327bbf81dfbc24e33ab8153c64c34cb65ab392ba848fb81526020017f04c6c536895462b10fdc142d60154aa872f4ff2b5ad3c0aa99d266bbd169e9fa8152508160800151600e81518110610d9757610d97612008565b602002602001018190525060405180604001604052807f1427ab46fc8f1b986dbffe61b2cb516368f307c12e401c2a03826456b08ea80881526020017f0960f1edb37e4b3de9c99296cadf856aeac7f58b6710bc63c59da5535e95d5088152508160800151600f81518110610e0e57610e0e612008565b602002602001018190525060405180604001604052807f22b4b50bd72aec7ba9a54d58ab2567af7aeb027327e7e67ddb846387acf9ff7f81526020017eb06ec4789df4d8c4243ce0114e2236a39e120b1c28e33afb4a0942c4882ac58152508160800151601081518110610e8457610e84612008565b602002602001018190525060405180604001604052807f1025da95bbac704b227099d68a18a073210c443d612a397e60ad5b3dfbe7056681526020017f0d6fd1e398d2accf18e781f4dcdbb34d36f27eee5526a8da92c64839996515a48152508160800151601181518110610efb57610efb612008565b602002602001018190525060405180604001604052807f10d30b9b4180816d4adef13656e22860b1e6e15f2a75ac49bcab4a309ef8e57081526020017f155a9f520ce4aa87813da3290c807f1c597f7b2d18c751dc589ac6e1db1444318152508160800151601281518110610f7257610f72612008565b602002602001018190525060405180604001604052807f2bb8c2ea0063b7813a78716d028d5afa5c35d67f10c4f7f4d4617afb113c020981526020017f2cdb2b8f6c93bb29a6bfdef3dfb2c2f0e701ecc8ba1e7e90bc9fef8fe5b661278152508160800151601381518110610fe957610fe9612008565b602002602001018190525060405180604001604052807f1a44b99ccefd0f9bc1330e6ad6f0e7e38c0da7a9f1c7f66e0eaca097dc5557e581526020017f23f07babbc820ebc39e3edb5958406617b2682be197cf0431124628a4fcbc595815250816080015160148151811061106057611060612008565b602002602001018190525060405180604001604052807f0f5cc8652695f97d0fe656f229c4c15380ea3d82be4d4c443c809ed1e62155d781526020017f084abf3a1b117b1cd9e1a1e108a03934c965dbe803519876446bec643a2cdd5781525081608001516015815181106110d7576110d7612008565b602002602001018190525060405180604001604052807f302b45d83bde71faf8bfc8e7907eed67a9b5cfb5e134ae608ca7a0807d6b2ad481526020017f0246d10f233adb93703c29fe9988c729514e8236f8736bc7394d87c5447cdece815250816080015160168151811061114e5761114e612008565b602002602001018190525060405180604001604052807f0daad50a1081e00c70af4cfae4eb03f9efa0b3d43d04c4fa50ce7ed02171122481526020017f27353609c4738c7597dd3bbb1f69ba8775dd4b10a85db694fb566c5ae7bfd1dc81525081608001516017815181106111c5576111c5612008565b602002602001018190525060405180604001604052807f2ae71262d6b9efa88e5770de7350c7e874a9aa37fc2b725943951b9b07cf7b0481526020017f23d0472ab24519f79a70e8acd790d4d0354a6c3df9abd12a3abadc4125568850815250816080015160188151811061123c5761123c612008565b602002602001018190525060405180604001604052807f2ebaefa3cf43d6abd9a75d32d9f4df4882661a98acd31ca9f7e07decd322167f81526020017f1eeb6fcc3925fdf092b27a1edaed64363197f5b5cc49abcea93df089e0f3d15e81525081608001516019815181106112b3576112b3612008565b602002602001018190525060405180604001604052807f04605b64c765da059e2b46df78335b3bac8a01ea915b2d6806a5b32c7d835b6e81526020017f052531c470921462ccb1c0c0a42b06dceeb23f97d958d5904d5b306a5e5cd6458152508160800151601a8151811061132a5761132a612008565b602002602001018190525060405180604001604052807f1bc2268f3ac3756bbb98a3e64e79a35f489320d76489b255b3909734b927503381526020017f0297a17c2925134786c007de610c69a698c8a470ed6d152faafe4d0df0e0c74f8152508160800151601b815181106113a1576113a1612008565b602002602001018190525090565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476113dd816003611fba565b81806113eb576113eb611ff2565b845183806113fb576113fb611ff2565b8651800909828061140e5761140e611ff2565b6020860151800961141f9190611f88565b149392505050565b6020818101518051918101516000927f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5927e9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d292859283928392839261149792909190829060015b6020020151611aec565b8951805160208201519397509195506114bc929060005b60200201518b51600161148d565b895191935091506114d2908390839060006114ae565b90925090506114e384848484611b6d565b90945092506114f484848888611b6d565b909450925083158015611505575082155b98975050505050505050565b604080518082019091526000808252602082015261152d611c7f565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa905080801561002b575b508061158657604051633842fc7360e21b815260040160405180910390fd5b505092915050565b60408051808201909152600080825260208201526115aa611c9d565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa905080801561002b57611567565b604080518082019091526000808252602082015260208201517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47906116485760405180604001604052808285600001516116379190611fba565b815260006020909101529392505050565b60405180604001604052808285600001516116639190611fba565b81526020018285602001516116789190611fba565b6116829084611f88565b90529392505050565b60408051601880825261032082019092526000919082908260208201610300803683370190505090508a60000151816000815181106116cc576116cc612008565b6020026020010181815250508a60200151816001815181106116f0576116f0612008565b60209081029190910101528951600160200201518160028151811061171757611717612008565b602090810291909101015289515181518290600390811061173a5761173a612008565b602002602001018181525050896020015160016002811061175d5761175d612008565b60200201518160048151811061177557611775612008565b602002602001018181525050896020015160006002811061179857611798612008565b6020020151816005815181106117b0576117b0612008565b6020026020010181815250508860000151816006815181106117d4576117d4612008565b6020026020010181815250508860200151816007815181106117f8576117f8612008565b60209081029190910101528751600160200201518160088151811061181f5761181f612008565b602090810291909101015287515181518290600990811061184257611842612008565b602002602001018181525050876020015160016002811061186557611865612008565b602002015181600a8151811061187d5761187d612008565b60200260200101818152505087602001516000600281106118a0576118a0612008565b602002015181600b815181106118b8576118b8612008565b602002602001018181525050866000015181600c815181106118dc576118dc612008565b602002602001018181525050866020015181600d8151811061190057611900612008565b602090810291909101015285516001602002015181600e8151811061192757611927612008565b602090810291909101015285515181518290600f90811061194a5761194a612008565b602002602001018181525050856020015160016002811061196d5761196d612008565b60200201518160108151811061198557611985612008565b60200260200101818152505085602001516000600281106119a8576119a8612008565b6020020151816011815181106119c0576119c0612008565b6020026020010181815250508460000151816012815181106119e4576119e4612008565b602002602001018181525050846020015181601381518110611a0857611a08612008565b602090810291909101015283516001602002015181601481518110611a2f57611a2f612008565b6020908102919091010152835151815182906015908110611a5257611a52612008565b6020026020010181815250508360200151600160028110611a7557611a75612008565b602002015181601681518110611a8d57611a8d612008565b6020026020010181815250508360200151600060028110611ab057611ab0612008565b602002015181601781518110611ac857611ac8612008565b602002602001018181525050611add81611bb5565b9b9a5050505050505050505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611b2e818689098280611b2557611b25611ff2565b86890983611c0a565b8180611b3c57611b3c611ff2565b8280611b4a57611b4a611ff2565b8789098380611b5b57611b5b611ff2565b878b0908925092505094509492505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611b9c878683611c0a565b611ba7878684611c0a565b925092505094509492505050565b8051600090611bc2611cbb565b6000602082602085026020880160086107d05a03fa905080801561002b575080611bff57604051633842fc7360e21b815260040160405180910390fd5b505115159392505050565b60008180611c1a57611c1a611ff2565b611c248484611f88565b8508949350505050565b6040805160e08101909152600060a0820181815260c0830191909152815260208101611c58611cd9565b8152602001611c65611cd9565b8152602001611c72611cd9565b8152602001606081525090565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060400160405280611cec611cfe565b8152602001611cf9611cfe565b905290565b60405180604001604052806002906020820280368337509192915050565b600082601f830112611d2d57600080fd5b611d35611f24565b808385604086011115611d4757600080fd5b60005b6002811015611d69578135845260209384019390910190600101611d4a565b509095945050505050565b600082601f830112611d8557600080fd5b8135602067ffffffffffffffff80831115611da257611da261201e565b8260051b604051601f19603f83011681018181108482111715611dc757611dc761201e565b60405284815283810192508684018288018501891015611de657600080fd5b600092505b85831015611e09578035845292840192600192909201918401611deb565b50979650505050505050565b600060408284031215611e2757600080fd5b6040516040810181811067ffffffffffffffff82111715611e4a57611e4a61201e565b604052823581526020928301359281019290925250919050565b600080828403610120811215611e7957600080fd5b61010080821215611e8957600080fd5b611e91611f4d565b611e9b8787611e15565b81526080603f1984011215611eaf57600080fd5b611eb7611f24565b9250611ec68760408801611d1c565b8352611ed58760808801611d1c565b6020840152826020820152611eed8760c08801611e15565b60408201529350840135905067ffffffffffffffff811115611f0e57600080fd5b611f1a85828601611d74565b9150509250929050565b6040805190810167ffffffffffffffff81118282101715611f4757611f4761201e565b60405290565b6040516060810167ffffffffffffffff81118282101715611f4757611f4761201e565b60008219821115611f8357611f83611fdc565b500190565b600082821015611f9a57611f9a611fdc565b500390565b6000600019821415611fb357611fb3611fdc565b5060010190565b600082611fd757634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea26469706673582212203e5349f754ec4429ecb0afd737e7fbc54833eff83df9d07c9f9fc58ae09c91b764736f6c63430008070033';

type Transaction1x2VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Transaction1x2VerifierConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Transaction1x2Verifier__factory extends ContractFactory {
  constructor(...args: Transaction1x2VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Transaction1x2Verifier';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Transaction1x2Verifier> {
    return super.deploy(overrides || {}) as Promise<Transaction1x2Verifier>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Transaction1x2Verifier {
    return super.attach(address) as Transaction1x2Verifier;
  }
  connect(signer: Signer): Transaction1x2Verifier__factory {
    return super.connect(signer) as Transaction1x2Verifier__factory;
  }
  static readonly contractName: 'Transaction1x2Verifier';
  public readonly contractName: 'Transaction1x2Verifier';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Transaction1x2VerifierInterface {
    return new utils.Interface(_abi) as Transaction1x2VerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Transaction1x2Verifier {
    return new Contract(address, _abi, signerOrProvider) as Transaction1x2Verifier;
  }
}
