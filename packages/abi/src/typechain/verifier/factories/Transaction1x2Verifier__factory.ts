/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Transaction1x2Verifier, Transaction1x2VerifierInterface } from '../Transaction1x2Verifier';

const _abi = [
  {
    inputs: [],
    name: 'InvalidParam',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotOnCurve',
    type: 'error',
  },
  {
    inputs: [],
    name: 'StaticCallFailed',
    type: 'error',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'a',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256[2]',
                name: 'X',
                type: 'uint256[2]',
              },
              {
                internalType: 'uint256[2]',
                name: 'Y',
                type: 'uint256[2]',
              },
            ],
            internalType: 'struct Pairing.G2Point',
            name: 'b',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'c',
            type: 'tuple',
          },
        ],
        internalType: 'struct VerifierLib.Proof',
        name: 'proof',
        type: 'tuple',
      },
      {
        internalType: 'uint256[]',
        name: 'input',
        type: 'uint256[]',
      },
    ],
    name: 'verifyTx',
    outputs: [
      {
        internalType: 'bool',
        name: 'r',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5061206c806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e366004611e66565b610057565b604051901515815260200160405180910390f35b60008151601b1461007b57604051633494a40d60e21b815260040160405180910390fd5b610085828461008c565b9392505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100b86103ff565b9050806080015151855160016100ce9190611f72565b146100ec57604051633494a40d60e21b815260040160405180910390fd5b835151821161010e57604051633494a40d60e21b815260040160405180910390fd5b835160200151821161013357604051633494a40d60e21b815260040160405180910390fd5b60208401515151821161015957604051633494a40d60e21b815260040160405180910390fd5b602084810151015151821161018157604051633494a40d60e21b815260040160405180910390fd5b60208481015151015182116101a957604051633494a40d60e21b815260040160405180910390fd5b602084810151810151015182116101d357604051633494a40d60e21b815260040160405180910390fd5b60408401515182116101f857604051633494a40d60e21b815260040160405180910390fd5b818460400151602001511061022057604051633494a40d60e21b815260040160405180910390fd5b835161022b906113b1565b610248576040516361586bdd60e01b815260040160405180910390fd5b6102558460200151611429565b610272576040516361586bdd60e01b815260040160405180910390fd5b61027f84604001516113b1565b61029c576040516361586bdd60e01b815260040160405180910390fd5b60006102dc604051806040016040528060008152602001600081525083608001516000815181106102cf576102cf61200a565b6020026020010151611513565b905060005b865181101561038c57838782815181106102fd576102fd61200a565b60200260200101511061032357604051633494a40d60e21b815260040160405180910390fd5b61037882610373856080015184600161033c9190611f72565b8151811061034c5761034c61200a565b60200260200101518a85815181106103665761036661200a565b6020026020010151611590565b611513565b91508061038481611fa1565b9150506102e1565b50610396816113b1565b6103b3576040516361586bdd60e01b815260040160405180910390fd5b6103f5856000015186602001516103c9846115df565b85604001516103db8a604001516115df565b606088015188516103eb906115df565b896020015161168d565b9695505050505050565b610407611c30565b6040805180820182527f1a8726d10fd276bc6cdcf54b98113a7e22ad38dc91947c93504fddce50e2de3481527f0c74fc0d64a5f18fc25374e25fde6b872fbd3f914885f819b1bea8aff279d8556020808301919091529083528151608080820184527f0b7466e928e667349f486df901010fd0d972daa364c20c0582b8e3c6a74cc2078285019081527f05901ba6585225220f6d77a61d211753c6e89a7aedcf306badb0d3eb4206c71a606080850191909152908352845180860186527f04a10da0f796047a1e1b74c7cbc0a9455b79b2c3086f16ed009b243d04f36dbd81527f26af36c270580235c34cc9f484db5d44fff72ba543520babfff2f79b6344ab6d818601528385015285840192909252835180820185527f2bbc4570915aeb2c7c742d39136c2080aa8caf958da237f4763563063320086e8186019081527f24eab43320ae0d53c1ab57760371229c7a9be09db136ffb0b0a01cb5533247ff828501528152845180860186527f13a1b18d66d28dbaf76c2e86214fa937aed38dd11777cb297e9cb3064359269381527f16ae4eb2cd357c72903725942046c930c496d4ddd1f412c79aff4d893b786b0b818601528185015285850152835190810184527f19658205745bf80c80fedadda0825fc56d570bccd5b9afda803026e143e61d7c8185019081527f298a757980626ccd60a262d17c4d154f66919eb91abc0884699ce5e9c860a597828401528152835180850185527f2d4e94a2119147dbdcc7a7fef690e0504d89eb1e53d2d4110dfdc2c744c8d6ec81527f1edfdc9c9f7092395f90993fe3cca48b3e3a8e809c7da3e66f8403776eb1453f8185015281840152908401528151601c8082526103a08201909352919082015b604080518082019091526000808252602082015281526020019060019003908161068357505060808201908152604080518082019091527f2f92b71afff0a5b49a32bdd312c3f8bbe5e3b3fb80363db2ccdfdc9b7c37174981527f0d78d3c34ad0945326db4a71e24a523b74bd9cb7a6ebd7f71ffc4371f1aa1b9a6020820152905180516000906107165761071661200a565b602002602001018190525060405180604001604052807f07b46d079026eb4536288e7012fa63dc660163b95f035a185836dbb383d72bca81526020017f04de6cc317e35b25acf6fb06739a566e60851770017fe6159ffed2b35e9bb8e3815250816080015160018151811061078d5761078d61200a565b602002602001018190525060405180604001604052807f19aeb9385f2c45882ac04aebeecbab5f1b5311a7a4a80b4ff490b1e6f6c34eae81526020017f16fcdad6824d989490f64183317ccea47464ccbb76afb699357487a9f2e0cad981525081608001516002815181106108045761080461200a565b602002602001018190525060405180604001604052807f1acdc09e8af445e660b15603cc9e46027ce05bae1ebd5660e35d7f25dfd0ea6681526020017f21b5ab5d8153227b29fc4f7407907f9653e556566655a06d54ef7fe89a2db860815250816080015160038151811061087b5761087b61200a565b602002602001018190525060405180604001604052807f0c60d2d75bf0257c21cae6fef9ee20188ec89a6444ef18c9611d0489418c4bd681526020017f24b2ecb5b4848823b80eebc2c9c2291b8725f7e52f19117d4074790a46e5336181525081608001516004815181106108f2576108f261200a565b602002602001018190525060405180604001604052807f0a7d23e86ffddad9fc8d008843eab0a946f3d78a811813f66c8b14168feffe7981526020017f2e52854e3cc4fed16cf0ad0a3feed858e7a46261fc47514a74457a8f8084250f81525081608001516005815181106109695761096961200a565b602002602001018190525060405180604001604052807f0fe5855bb83ac07c0dd16e0db0e7ca08a39e1df200659f92be42a7d91c2134f981526020017f077e155e12aaec2a4f1b77122bf047d59a414ebc92c7288081e6b2e248b76d7681525081608001516006815181106109e0576109e061200a565b602002602001018190525060405180604001604052807f13b2a0c8b83e58ce4d4364834c780298adee611863b65b0b9062c3393ddfe36c81526020017f1498c80910e45c3885c6c092687ff20f85bcd08d9512faea6db0cf928edf681a8152508160800151600781518110610a5757610a5761200a565b602002602001018190525060405180604001604052807f01b75fd8073d2ca48ea109c95227ae4516951f955910c82466de90e6fcc48bda81526020017f065f28f924119f4e29ca98fcddf6b430c134800aa3314adf6478a7e6794d198f8152508160800151600881518110610ace57610ace61200a565b602002602001018190525060405180604001604052807f2a2863ae239d321214c8298133dc5a7f3f557f08c47d4447ede8ba71bfb2f64f81526020017f0fd1c74be797da5fbed22d7848f0890b627586eaf87d32b0607863a767d9e28a8152508160800151600981518110610b4557610b4561200a565b602002602001018190525060405180604001604052807f20c2cc581458046b4374ea75a4b576eea32bc0609b474d652207cefc186ef18a81526020017f0234a1643219346fdd82cecc8f7a613285d00d1138f183f2e90a5134ff57db878152508160800151600a81518110610bbc57610bbc61200a565b602002602001018190525060405180604001604052807f0ca8da7b5b3a2b079f573a37b48d8bbf78fe98a5eadf8950e200420a8a419f5281526020017f066e7e52a447e1ca3eb1134fd6c7fd0c6bcb790f4f755615d0d8390de6d2ec0f8152508160800151600b81518110610c3357610c3361200a565b602002602001018190525060405180604001604052807f08f0b76677cebcfe82581a6f889042af4db34aecbc2147c57f63c695eb87da3b81526020017f1ad48944d5d96dc492f2d023598a9b2ae9f6ae9f3bf2013c554c193d112f21ac8152508160800151600c81518110610caa57610caa61200a565b602002602001018190525060405180604001604052807f03c92f9df5dad844bb3eaa6d3e3a2389635235e48ec6ab285c64e1ddba6824c481526020017f07425140d71fbe7fe5d79d92f354b305511ee5be6091f411130dfe3241a38b838152508160800151600d81518110610d2157610d2161200a565b602002602001018190525060405180604001604052807f126aa5533bf265c94b6b4d3dbb7aae3902ddfbae3426b008619b7cc57b1e433981526020017f299bed3839592ac207f6b027f9bec57977bd056bba083f33550cca3bc8fe8e008152508160800151600e81518110610d9857610d9861200a565b602002602001018190525060405180604001604052807f05f9a95fd807033f07931992aea1db2b952c23a316067705168e7d02b948fe0e81526020017f279c5ef67c509146f8d953761a5084b0b92e5c52c07c26b81e2d90ac06a2951f8152508160800151600f81518110610e0f57610e0f61200a565b602002602001018190525060405180604001604052807f0779c9d9ccb2ba6a1b272228427ccc2c7ce93f057c1a3b49edb20d7c53e173dd81526020017f1dd27b257b167e07d51b12cd1a6e5d5023511cd1eb5f3e1d45a27e59c4ca6d158152508160800151601081518110610e8657610e8661200a565b602002602001018190525060405180604001604052807f306378f0a6992d719417624103394832bd83431aad15ad1f6d495273be281e9981526020017f29a64a8feb504e4210370b3a64df300e697aa61cda05439d3e2819c3c5409a6d8152508160800151601181518110610efd57610efd61200a565b602002602001018190525060405180604001604052807f302e0b0d58d09714d99f0af706c827f80ba145513871eb59b8b9eaae9eca482581526020017f1fc905f5a296aeb5db210172edb61da0b8e41ab4b60ce25d17180d53792263a88152508160800151601281518110610f7457610f7461200a565b602002602001018190525060405180604001604052807f0ffd6de9e347829c7461551ed95ef40dc330c213e68fed4f9950fa9685f5b23d81526020017f036918705e6adce1fa78bebd9e3e269f4ca80c6c8d31280f39b1ad9ec7fb8a468152508160800151601381518110610feb57610feb61200a565b602002602001018190525060405180604001604052807f1ef4d1775d6371d34d66c7c9a459548bd877e1e0c05b2cac98167c3a1508bfa481526020017f16446c39efb72590282b33d16068e087de4a8a9fd845562afde7d51ea37c60cc81525081608001516014815181106110625761106261200a565b602002602001018190525060405180604001604052807f0dbc29b7fae735a3c8dfbf2da915de219a57fbbae1cda4e1483e56af94d95b1d81526020017f0acf3bdb6f8ff1e24edbceb876cdb42ab0d00dc1845cae2a00d6d553297f791581525081608001516015815181106110d9576110d961200a565b602002602001018190525060405180604001604052807f0ca223885ec4ec6a83008d9cae22c12dd6d1620ab9d17d6faaa9bba7de3d200d81526020017f02ebd958834841630656c17443c698aeae72ff31f3d0d7657d1293749d818e0b81525081608001516016815181106111505761115061200a565b602002602001018190525060405180604001604052807f2148e21add5077ddb518b706dfc9e7f5283c46aa4e4786e336aac3550a5082ac81526020017f2a11c3d66a79ec1d0af121bd1f3127914e9becdd090061a7507cf823268a6da681525081608001516017815181106111c7576111c761200a565b602002602001018190525060405180604001604052807f03f79d98b59038510e7e1245375f551a741efeb6e6febbd8235330771324a58781526020017f0e874c7046f72975243827edd877b61ba0585a06410268499ccd45a758f0a212815250816080015160188151811061123e5761123e61200a565b602002602001018190525060405180604001604052807f158459b8833ff7bbf4aa53621fe326186a42d11450e9538d0409aed3eea8962f81526020017f0c8a06e4e993bdea2e50701fb652fd60bbd1fe1cee87b70f3ac9c40d99ca26ca81525081608001516019815181106112b5576112b561200a565b602002602001018190525060405180604001604052807f2a3f6c7f49ca984384d3c41416b883106e7837312730d5b71d13f4bd30a34ae181526020017f159835d8f22968976705cb4b37291d1e0f3a6b1a3d576cd54631cc1d9ea1bebf8152508160800151601a8151811061132c5761132c61200a565b602002602001018190525060405180604001604052807f225c8bc45846e121242abefbab920c8d5f5319a0360926b1940bcda0802de0ef81526020017f02fb6cdbf56f9d2ed75715be904a7232f56eee9d91b035b7f9517b81983470268152508160800151601b815181106113a3576113a361200a565b602002602001018190525090565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476113df816003611fbc565b81806113ed576113ed611ff4565b845183806113fd576113fd611ff4565b8651800909828061141057611410611ff4565b602086015180096114219190611f8a565b149392505050565b6020818101518051918101516000927f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5927e9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d292859283928392839261149992909190829060015b6020020151611aee565b8951805160208201519397509195506114be929060005b60200201518b51600161148f565b895191935091506114d4908390839060006114b0565b90925090506114e584848484611b6f565b90945092506114f684848888611b6f565b909450925083158015611507575082155b98975050505050505050565b604080518082019091526000808252602082015261152f611c81565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa905080801561002b575b508061158857604051633842fc7360e21b815260040160405180910390fd5b505092915050565b60408051808201909152600080825260208201526115ac611c9f565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa905080801561002b57611569565b604080518082019091526000808252602082015260208201517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd479061164a5760405180604001604052808285600001516116399190611fbc565b815260006020909101529392505050565b60405180604001604052808285600001516116659190611fbc565b815260200182856020015161167a9190611fbc565b6116849084611f8a565b90529392505050565b60408051601880825261032082019092526000919082908260208201610300803683370190505090508a60000151816000815181106116ce576116ce61200a565b6020026020010181815250508a60200151816001815181106116f2576116f261200a565b6020908102919091010152895160016020020151816002815181106117195761171961200a565b602090810291909101015289515181518290600390811061173c5761173c61200a565b602002602001018181525050896020015160016002811061175f5761175f61200a565b6020020151816004815181106117775761177761200a565b602002602001018181525050896020015160006002811061179a5761179a61200a565b6020020151816005815181106117b2576117b261200a565b6020026020010181815250508860000151816006815181106117d6576117d661200a565b6020026020010181815250508860200151816007815181106117fa576117fa61200a565b6020908102919091010152875160016020020151816008815181106118215761182161200a565b60209081029190910101528751518151829060099081106118445761184461200a565b60200260200101818152505087602001516001600281106118675761186761200a565b602002015181600a8151811061187f5761187f61200a565b60200260200101818152505087602001516000600281106118a2576118a261200a565b602002015181600b815181106118ba576118ba61200a565b602002602001018181525050866000015181600c815181106118de576118de61200a565b602002602001018181525050866020015181600d815181106119025761190261200a565b602090810291909101015285516001602002015181600e815181106119295761192961200a565b602090810291909101015285515181518290600f90811061194c5761194c61200a565b602002602001018181525050856020015160016002811061196f5761196f61200a565b6020020151816010815181106119875761198761200a565b60200260200101818152505085602001516000600281106119aa576119aa61200a565b6020020151816011815181106119c2576119c261200a565b6020026020010181815250508460000151816012815181106119e6576119e661200a565b602002602001018181525050846020015181601381518110611a0a57611a0a61200a565b602090810291909101015283516001602002015181601481518110611a3157611a3161200a565b6020908102919091010152835151815182906015908110611a5457611a5461200a565b6020026020010181815250508360200151600160028110611a7757611a7761200a565b602002015181601681518110611a8f57611a8f61200a565b6020026020010181815250508360200151600060028110611ab257611ab261200a565b602002015181601781518110611aca57611aca61200a565b602002602001018181525050611adf81611bb7565b9b9a5050505050505050505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611b30818689098280611b2757611b27611ff4565b86890983611c0c565b8180611b3e57611b3e611ff4565b8280611b4c57611b4c611ff4565b8789098380611b5d57611b5d611ff4565b878b0908925092505094509492505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611b9e878683611c0c565b611ba9878684611c0c565b925092505094509492505050565b8051600090611bc4611cbd565b6000602082602085026020880160086107d05a03fa905080801561002b575080611c0157604051633842fc7360e21b815260040160405180910390fd5b505115159392505050565b60008180611c1c57611c1c611ff4565b611c268484611f8a565b8508949350505050565b6040805160e08101909152600060a0820181815260c0830191909152815260208101611c5a611cdb565b8152602001611c67611cdb565b8152602001611c74611cdb565b8152602001606081525090565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060400160405280611cee611d00565b8152602001611cfb611d00565b905290565b60405180604001604052806002906020820280368337509192915050565b600082601f830112611d2f57600080fd5b611d37611f26565b808385604086011115611d4957600080fd5b60005b6002811015611d6b578135845260209384019390910190600101611d4c565b509095945050505050565b600082601f830112611d8757600080fd5b8135602067ffffffffffffffff80831115611da457611da4612020565b8260051b604051601f19603f83011681018181108482111715611dc957611dc9612020565b60405284815283810192508684018288018501891015611de857600080fd5b600092505b85831015611e0b578035845292840192600192909201918401611ded565b50979650505050505050565b600060408284031215611e2957600080fd5b6040516040810181811067ffffffffffffffff82111715611e4c57611e4c612020565b604052823581526020928301359281019290925250919050565b600080828403610120811215611e7b57600080fd5b61010080821215611e8b57600080fd5b611e93611f4f565b611e9d8787611e17565b81526080603f1984011215611eb157600080fd5b611eb9611f26565b9250611ec88760408801611d1e565b8352611ed78760808801611d1e565b6020840152826020820152611eef8760c08801611e17565b60408201529350840135905067ffffffffffffffff811115611f1057600080fd5b611f1c85828601611d76565b9150509250929050565b6040805190810167ffffffffffffffff81118282101715611f4957611f49612020565b60405290565b6040516060810167ffffffffffffffff81118282101715611f4957611f49612020565b60008219821115611f8557611f85611fde565b500190565b600082821015611f9c57611f9c611fde565b500390565b6000600019821415611fb557611fb5611fde565b5060010190565b600082611fd957634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220aaa2d81f6fd030b8156076165493725207bdbd9297e8cc7bcdf74fc5f3bd801c64736f6c63430008070033';

type Transaction1x2VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Transaction1x2VerifierConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Transaction1x2Verifier__factory extends ContractFactory {
  constructor(...args: Transaction1x2VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Transaction1x2Verifier';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Transaction1x2Verifier> {
    return super.deploy(overrides || {}) as Promise<Transaction1x2Verifier>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Transaction1x2Verifier {
    return super.attach(address) as Transaction1x2Verifier;
  }
  connect(signer: Signer): Transaction1x2Verifier__factory {
    return super.connect(signer) as Transaction1x2Verifier__factory;
  }
  static readonly contractName: 'Transaction1x2Verifier';
  public readonly contractName: 'Transaction1x2Verifier';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Transaction1x2VerifierInterface {
    return new utils.Interface(_abi) as Transaction1x2VerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Transaction1x2Verifier {
    return new Contract(address, _abi, signerOrProvider) as Transaction1x2Verifier;
  }
}
