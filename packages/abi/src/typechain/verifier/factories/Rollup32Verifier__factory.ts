/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Rollup32Verifier, Rollup32VerifierInterface } from '../Rollup32Verifier';

const _abi = [
  {
    inputs: [],
    name: 'InvalidParam',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotOnCurve',
    type: 'error',
  },
  {
    inputs: [],
    name: 'StaticCallFailed',
    type: 'error',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'a',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256[2]',
                name: 'X',
                type: 'uint256[2]',
              },
              {
                internalType: 'uint256[2]',
                name: 'Y',
                type: 'uint256[2]',
              },
            ],
            internalType: 'struct Pairing.G2Point',
            name: 'b',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'c',
            type: 'tuple',
          },
        ],
        internalType: 'struct VerifierLib.Proof',
        name: 'proof',
        type: 'tuple',
      },
      {
        internalType: 'uint256[]',
        name: 'input',
        type: 'uint256[]',
      },
    ],
    name: 'verifyTx',
    outputs: [
      {
        internalType: 'bool',
        name: 'r',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x6080604052348015600f57600080fd5b5061157a8061001f6000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e3660046113f9565b610057565b604051901515815260200160405180910390f35b6000815160041461007b57604051633494a40d60e21b815260040160405180910390fd5b610085828461008e565b90505b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100ba6103f7565b9050806080015151855160016100d091906114d0565b146100ee57604051633494a40d60e21b815260040160405180910390fd5b835151821161011057604051633494a40d60e21b815260040160405180910390fd5b835160200151821161013557604051633494a40d60e21b815260040160405180910390fd5b60208401515151821161015b57604051633494a40d60e21b815260040160405180910390fd5b602084810151015151821161018357604051633494a40d60e21b815260040160405180910390fd5b60208481015151015182116101ab57604051633494a40d60e21b815260040160405180910390fd5b602084810151810151015182116101d557604051633494a40d60e21b815260040160405180910390fd5b60408401515182116101fa57604051633494a40d60e21b815260040160405180910390fd5b818460400151602001511061022257604051633494a40d60e21b815260040160405180910390fd5b835161022d906108f6565b61024a576040516361586bdd60e01b815260040160405180910390fd5b610257846020015161096e565b610274576040516361586bdd60e01b815260040160405180910390fd5b61028184604001516108f6565b61029e576040516361586bdd60e01b815260040160405180910390fd5b60006102de604051806040016040528060008152602001600081525083608001516000815181106102d1576102d16114e3565b6020026020010151610a58565b905060005b865181101561038457838782815181106102ff576102ff6114e3565b60200260200101511061032557604051633494a40d60e21b815260040160405180910390fd5b61037a82610375856080015184600161033e91906114d0565b8151811061034e5761034e6114e3565b60200260200101518a8581518110610368576103686114e3565b6020026020010151610ad8565b610a58565b91506001016102e3565b5061038e816108f6565b6103ab576040516361586bdd60e01b815260040160405180910390fd5b6103ed856000015186602001516103c184610b26565b85604001516103d38a60400151610b26565b606088015188516103e390610b26565b8960200151610bd7565b9695505050505050565b6103ff61117e565b6040805180820182527f203f2c0b010471b6af5c97dd5bc3ef30bb91f3d9dba2fa26f0f0bbabbec1f8c681527f22abfa94f098c71691809acbab6220b7a88cde5c119792b4d89b4ec2f76e6f776020808301919091529083528151608080820184527f28b669c9f445b283517d975a90afc00bd4d25564bbecad3d7de2d3add2d40fa38285019081527f0e3a298756528b296a193bb9d1fa9cfe3be0be88abbcdfc8cf61aa93ab02d0e8606080850191909152908352845180860186527f2b9ff10a85eed1a8e507bebd3cd50aaa01614451eedecca380a828d23008f1bf81527f12df13fbf5ccb9db7ee63d2fa2b7a6a6902262b9a1c54ab36d6019e8f65c3e25818601528385015285840192909252835180820185527f12b3fd788fe73eefd45eded45c25278311eb39da43124009809fdc5f531ec1038186019081527f0e4115f3c5c4f68f8bcbdccd1b0fdc1dc6078c17f6c92024f35dde4b6137edd1828501528152845180860186527e666470b419a8ef1df480eb3d6ca4fc2af35af490cf425edcbc35e40d81de6181527f085730cb1a619647070dec2d7262cbed8afae6201c101d05aa43fed7a56dee66818601528185015285850152835190810184527f2384087c76458145784c054230b12d32fc2894f425028c2bf63ed0d9c81c84bf8185019081527f07c95150246e6ca87ff3be5982b1a9917bdd91c7f6ca758f25603c1eb0ce51cb828401528152835180850185527f2f5510b98bf2908ca818fa119c12f98066e3fb1e953f47a95c8177591b6a00ee81527f26b191085b4381050fe60c23be14a832441da200274d2de320feaa44797a8cf38185015281840152908401528151600580825260c08201909352919082015b604080518082019091526000808252602082015281526020019060019003908161067957505060808201908152604080518082019091527f1b4249ef811882ea8f897c7a55ea2362fa15fe7035f3da33f61eee1e2ff5282181527f038f187f5582cc40e619dad6a605dcacc33df3039e12ba9933aaceb127d0c64960208201529051805160009061070c5761070c6114e3565b602002602001018190525060405180604001604052807f1bb04135cbae2725331f272a10180cdc5144582abc2007470dddf1b5ac4c1e8d81526020017f22c7b7caa003efa7976fa3c246f7728c546e93034985c593dd37d0b45ec3fba68152508160800151600181518110610783576107836114e3565b602002602001018190525060405180604001604052807f19cf65b9759961a8c0617a82fdfdcd6019956312b340376aa7092d32b750f83281526020017f0a8c8af39948a9c821798ddc579c4b6c8104cc11081da7c4537d0f3325f0294181525081608001516002815181106107fa576107fa6114e3565b602002602001018190525060405180604001604052807f2393d39bbf2c275b3a289b78c83154a083de4fcc1b805497af5465f7b29bb4f981526020017f2818749f1f2fc5f0edc08ff05090b97fa75a1f69d67def59fc3f3fef77579eef8152508160800151600381518110610871576108716114e3565b602002602001018190525060405180604001604052807f10159519ac4fb4b9c79dd311b7345b8c6f13106e0b6f8b1914e755f40b5166d881526020017f0d81737209a98bbf376f11460d2d2dd58a6abc026f3280dafb3989d0a07d6bad81525081608001516004815181106108e8576108e86114e3565b602002602001018190525090565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761092481600361150f565b8180610932576109326114f9565b84518380610942576109426114f9565b86518009098280610955576109556114f9565b602086015180096109669190611531565b149392505050565b6020818101518051918101516000927f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5927e9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d29285928392839283926109de92909190829060015b6020020151611038565b895180516020820151939750919550610a03929060005b60200201518b5160016109d4565b89519193509150610a19908390839060006109f5565b9092509050610a2a848484846110b9565b9094509250610a3b848488886110b9565b909450925083158015610a4c575082155b98975050505050505050565b6040805180820190915260008082526020820152610a746111cf565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa90508080610ab157600080fd5b5080610ad057604051633842fc7360e21b815260040160405180910390fd5b505092915050565b6040805180820190915260008082526020820152610af46111ed565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa90508080610ab157600080fd5b604080518082019091526000808252602082015260208201517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790600003610b94576040518060400160405280828560000151610b83919061150f565b815260006020909101529392505050565b6040518060400160405280828560000151610baf919061150f565b8152602001828560200151610bc4919061150f565b610bce9084611531565b90529392505050565b60408051601880825261032082019092526000919082908260208201610300803683370190505090508a6000015181600081518110610c1857610c186114e3565b6020026020010181815250508a6020015181600181518110610c3c57610c3c6114e3565b602090810291909101015289516001602002015181600281518110610c6357610c636114e3565b6020908102919091010152895151815182906003908110610c8657610c866114e3565b6020026020010181815250508960200151600160028110610ca957610ca96114e3565b602002015181600481518110610cc157610cc16114e3565b6020026020010181815250508960200151600060028110610ce457610ce46114e3565b602002015181600581518110610cfc57610cfc6114e3565b602002602001018181525050886000015181600681518110610d2057610d206114e3565b602002602001018181525050886020015181600781518110610d4457610d446114e3565b602090810291909101015287516001602002015181600881518110610d6b57610d6b6114e3565b6020908102919091010152875151815182906009908110610d8e57610d8e6114e3565b6020026020010181815250508760200151600160028110610db157610db16114e3565b602002015181600a81518110610dc957610dc96114e3565b6020026020010181815250508760200151600060028110610dec57610dec6114e3565b602002015181600b81518110610e0457610e046114e3565b602002602001018181525050866000015181600c81518110610e2857610e286114e3565b602002602001018181525050866020015181600d81518110610e4c57610e4c6114e3565b602090810291909101015285516001602002015181600e81518110610e7357610e736114e3565b602090810291909101015285515181518290600f908110610e9657610e966114e3565b6020026020010181815250508560200151600160028110610eb957610eb96114e3565b602002015181601081518110610ed157610ed16114e3565b6020026020010181815250508560200151600060028110610ef457610ef46114e3565b602002015181601181518110610f0c57610f0c6114e3565b602002602001018181525050846000015181601281518110610f3057610f306114e3565b602002602001018181525050846020015181601381518110610f5457610f546114e3565b602090810291909101015283516001602002015181601481518110610f7b57610f7b6114e3565b6020908102919091010152835151815182906015908110610f9e57610f9e6114e3565b6020026020010181815250508360200151600160028110610fc157610fc16114e3565b602002015181601681518110610fd957610fd96114e3565b6020026020010181815250508360200151600060028110610ffc57610ffc6114e3565b602002015181601781518110611014576110146114e3565b60200260200101818152505061102981611101565b9b9a5050505050505050505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761107a818689098280611071576110716114f9565b8689098361115a565b8180611088576110886114f9565b8280611096576110966114f9565b87890983806110a7576110a76114f9565b878b0908925092505094509492505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476110e887868361115a565b6110f387868461115a565b925092505094509492505050565b805160009061110e61120b565b6000602082602085026020880160086107d05a03fa9050808061113057600080fd5b508061114f57604051633842fc7360e21b815260040160405180910390fd5b505115159392505050565b6000818061116a5761116a6114f9565b6111748484611531565b8508949350505050565b6040805160e08101909152600060a0820181815260c08301919091528152602081016111a8611229565b81526020016111b5611229565b81526020016111c2611229565b8152602001606081525090565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b604051806040016040528061123c61124e565b815260200161124961124e565b905290565b60405180604001604052806002906020820280368337509192915050565b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff811182821017156112a5576112a561126c565b60405290565b6040516060810167ffffffffffffffff811182821017156112a5576112a561126c565b604051601f8201601f1916810167ffffffffffffffff811182821017156112f7576112f761126c565b604052919050565b60006040828403121561131157600080fd5b611319611282565b823581526020928301359281019290925250919050565b600082601f83011261134157600080fd5b611349611282565b80604084018581111561135b57600080fd5b845b8181101561137557803584526020938401930161135d565b509095945050505050565b600082601f83011261139157600080fd5b813567ffffffffffffffff8111156113ab576113ab61126c565b8060051b6113bb602082016112ce565b918252602081850181019290810190868411156113d757600080fd5b6020860192505b838310156103ed5782358252602092830192909101906113de565b60008082840361012081121561140e57600080fd5b61010081121561141d57600080fd5b6114256112ab565b61142f86866112ff565b81526080603f198301121561144357600080fd5b61144b611282565b915061145a8660408701611330565b82526114698660808701611330565b60208301528160208201526114818660c087016112ff565b604082015292505061010083013567ffffffffffffffff8111156114a457600080fd5b6114b085828601611380565b9150509250929050565b634e487b7160e01b600052601160045260246000fd5b80820180821115610088576100886114ba565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052601260045260246000fd5b60008261152c57634e487b7160e01b600052601260045260246000fd5b500690565b81810381811115610088576100886114ba56fea2646970667358221220dd48d64f8d35751fce31acb02eb53a65f43567559854c8d052d7018a21fa2c9664736f6c634300081a0033';

type Rollup32VerifierConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Rollup32VerifierConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Rollup32Verifier__factory extends ContractFactory {
  constructor(...args: Rollup32VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Rollup32Verifier';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Rollup32Verifier> {
    return super.deploy(overrides || {}) as Promise<Rollup32Verifier>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Rollup32Verifier {
    return super.attach(address) as Rollup32Verifier;
  }
  connect(signer: Signer): Rollup32Verifier__factory {
    return super.connect(signer) as Rollup32Verifier__factory;
  }
  static readonly contractName: 'Rollup32Verifier';
  public readonly contractName: 'Rollup32Verifier';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Rollup32VerifierInterface {
    return new utils.Interface(_abi) as Rollup32VerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Rollup32Verifier {
    return new Contract(address, _abi, signerOrProvider) as Rollup32Verifier;
  }
}
