/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface SanctionsInterface extends utils.Interface {
  contractName: 'Sanctions';
  functions: {
    'chainalysisSanctionsList()': FunctionFragment;
    'mystikoSanctionsList()': FunctionFragment;
    'sanctionsCheck()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'chainalysisSanctionsList', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mystikoSanctionsList', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sanctionsCheck', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'chainalysisSanctionsList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mystikoSanctionsList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sanctionsCheck', data: BytesLike): Result;

  events: {
    'ChainalysisSanctionsList(address)': EventFragment;
    'MystikoSanctionsList(address)': EventFragment;
    'SanctionsCheck(bool)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'ChainalysisSanctionsList'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MystikoSanctionsList'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SanctionsCheck'): EventFragment;
}

export type ChainalysisSanctionsListEvent = TypedEvent<[string], { sanctions: string }>;

export type ChainalysisSanctionsListEventFilter = TypedEventFilter<ChainalysisSanctionsListEvent>;

export type MystikoSanctionsListEvent = TypedEvent<[string], { sanctions: string }>;

export type MystikoSanctionsListEventFilter = TypedEventFilter<MystikoSanctionsListEvent>;

export type SanctionsCheckEvent = TypedEvent<[boolean], { state: boolean }>;

export type SanctionsCheckEventFilter = TypedEventFilter<SanctionsCheckEvent>;

export interface Sanctions extends BaseContract {
  contractName: 'Sanctions';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SanctionsInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chainalysisSanctionsList(overrides?: CallOverrides): Promise<[string]>;

    mystikoSanctionsList(overrides?: CallOverrides): Promise<[string]>;

    sanctionsCheck(overrides?: CallOverrides): Promise<[boolean]>;
  };

  chainalysisSanctionsList(overrides?: CallOverrides): Promise<string>;

  mystikoSanctionsList(overrides?: CallOverrides): Promise<string>;

  sanctionsCheck(overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    chainalysisSanctionsList(overrides?: CallOverrides): Promise<string>;

    mystikoSanctionsList(overrides?: CallOverrides): Promise<string>;

    sanctionsCheck(overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'ChainalysisSanctionsList(address)'(sanctions?: null): ChainalysisSanctionsListEventFilter;
    ChainalysisSanctionsList(sanctions?: null): ChainalysisSanctionsListEventFilter;

    'MystikoSanctionsList(address)'(sanctions?: null): MystikoSanctionsListEventFilter;
    MystikoSanctionsList(sanctions?: null): MystikoSanctionsListEventFilter;

    'SanctionsCheck(bool)'(state?: null): SanctionsCheckEventFilter;
    SanctionsCheck(state?: null): SanctionsCheckEventFilter;
  };

  estimateGas: {
    chainalysisSanctionsList(overrides?: CallOverrides): Promise<BigNumber>;

    mystikoSanctionsList(overrides?: CallOverrides): Promise<BigNumber>;

    sanctionsCheck(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    chainalysisSanctionsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mystikoSanctionsList(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sanctionsCheck(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
