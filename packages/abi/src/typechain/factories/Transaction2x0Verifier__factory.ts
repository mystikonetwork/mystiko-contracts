/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Transaction2x0Verifier, Transaction2x0VerifierInterface } from '../Transaction2x0Verifier';

const _abi = [
  {
    inputs: [],
    name: 'InvalidParam',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotOnCurve',
    type: 'error',
  },
  {
    inputs: [],
    name: 'StaticCallFailed',
    type: 'error',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'a',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256[2]',
                name: 'X',
                type: 'uint256[2]',
              },
              {
                internalType: 'uint256[2]',
                name: 'Y',
                type: 'uint256[2]',
              },
            ],
            internalType: 'struct Pairing.G2Point',
            name: 'b',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'c',
            type: 'tuple',
          },
        ],
        internalType: 'struct VerifierLib.Proof',
        name: 'proof',
        type: 'tuple',
      },
      {
        internalType: 'uint256[]',
        name: 'input',
        type: 'uint256[]',
      },
    ],
    name: 'verifyTx',
    outputs: [
      {
        internalType: 'bool',
        name: 'r',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50611797806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e366004611591565b610057565b604051901515815260200160405180910390f35b6000815160081461007b57604051633494a40d60e21b815260040160405180910390fd5b610085828461008c565b9392505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100b86103ff565b9050806080015151855160016100ce919061169d565b146100ec57604051633494a40d60e21b815260040160405180910390fd5b835151821161010e57604051633494a40d60e21b815260040160405180910390fd5b835160200151821161013357604051633494a40d60e21b815260040160405180910390fd5b60208401515151821161015957604051633494a40d60e21b815260040160405180910390fd5b602084810151015151821161018157604051633494a40d60e21b815260040160405180910390fd5b60208481015151015182116101a957604051633494a40d60e21b815260040160405180910390fd5b602084810151810151015182116101d357604051633494a40d60e21b815260040160405180910390fd5b60408401515182116101f857604051633494a40d60e21b815260040160405180910390fd5b818460400151602001511061022057604051633494a40d60e21b815260040160405180910390fd5b835161022b90610adc565b610248576040516361586bdd60e01b815260040160405180910390fd5b6102558460200151610b54565b610272576040516361586bdd60e01b815260040160405180910390fd5b61027f8460400151610adc565b61029c576040516361586bdd60e01b815260040160405180910390fd5b60006102dc604051806040016040528060008152602001600081525083608001516000815181106102cf576102cf611735565b6020026020010151610c3e565b905060005b865181101561038c57838782815181106102fd576102fd611735565b60200260200101511061032357604051633494a40d60e21b815260040160405180910390fd5b61037882610373856080015184600161033c919061169d565b8151811061034c5761034c611735565b60200260200101518a858151811061036657610366611735565b6020026020010151610cbb565b610c3e565b915080610384816116cc565b9150506102e1565b5061039681610adc565b6103b3576040516361586bdd60e01b815260040160405180910390fd5b6103f5856000015186602001516103c984610d0a565b85604001516103db8a60400151610d0a565b606088015188516103eb90610d0a565b8960200151610db8565b9695505050505050565b61040761135b565b6040805180820182527f277538903f6863fb3921e0cfe41d4502aa3a144ce52979012ae944c4f67031b681527f2b82d37e61da101fed4d85361472764e008ed959ff193ce9a53412ecc1432e7e6020808301919091529083528151608080820184527f019aa9c3ea93626bc40f59a365015f78af14863d3ddd633f79a776703a9567958285019081527f12538b1dbb5192f7d90c92b3986e03690f86638afb98c9d8f3db91a57978a9a4606080850191909152908352845180860186527f2c2b7a1a4ddc6bf8acb5d03ed7b466762cada5b349af47716a200822a3e78a5b81527f22f2dd6c6e0008394eb049a92d53f3270a76ca0ff51ea4aa6a4c9961515887b9818601528385015285840192909252835180820185527f27bd60a35c5cb7f8e3a677826d3712407d483374463376387ace18c6d9d61c898186019081527f0aea1fd74ed5e22986a6bb51c763fc9a5d1299e85527d56dc606936734d74e97828501528152845180860186527f12a3cc9c73dc97fbfdf6d1c5de79131b3851baba55d313b21f2cab020a859c4881527f2288fe30f2dfa7068919064270b0acd0fbf4dbcfc290e2b3007608162dbc9a3b818601528185015285850152835190810184527f1ac20b4c1275572a60cbd03bb8e580fcbd228cb3de3cb4f18f7d75bf94db8ca38185019081527f14714123946fd8602f3f3d49a90cd660fba8272e9c062652a69d69ac1b416c13828401528152835180850185527f0c8c4085dfe4e2604c7d9704df6b3b896d3d20c0191a2b6796212e5578cd7ea081527f0c44294fc4c443c2444807e2ef7d46b4793c9b123b120af55c575683a6bdd5c9818501528184015290840152815160098082526101408201909352919082015b604080518082019091526000808252602082015281526020019060019003908161068357505060808201908152604080518082019091527f144c5a5fbda30154f38f55c6ede7ae443040b65a8af0b14f5be4c60a6afc4c8b81527f0fa01804a52d01a4aeeb40ab92c656f72cfd4a63441a1a54260801082474db1f60208201529051805160009061071657610716611735565b602002602001018190525060405180604001604052807f2ce4655622d329b0a2a4990533f413ec33f98d51c233b9a1b6802e1ad55f3ef581526020017f15e2f2f0464d27bd20f129adbd8422e5404b7997feaf52c23f0a8376d106e76f815250816080015160018151811061078d5761078d611735565b602002602001018190525060405180604001604052807f04769d0ebfdce581ed81513d84c851574f397b91bcfa9777f150797d2ce76e1081526020017f02d461237bdc9c13b678f80665c190265615c0ff6b48678d9c842ce6ebfdd431815250816080015160028151811061080457610804611735565b602002602001018190525060405180604001604052807f042f2bdeaff71f5901dd3807d88f3808d2e06690080268aa31fa836011695c3f81526020017f20b2dd57333cae4a7927e08bda9c1daf0836c4314269771baf4c13556039743c815250816080015160038151811061087b5761087b611735565b602002602001018190525060405180604001604052807f140d88e7dec3a1146a90ddc8f3c6ad361172024f13d7b8cee25cafd0972ba52a81526020017f180fa190608b3b9821c348a298cabb112e73b8108ff14b5681c2adba0623b39f81525081608001516004815181106108f2576108f2611735565b602002602001018190525060405180604001604052807f030f1dcbfba706c933f16977141271c4f419b677b92a96c169c801a666c4346381526020017f270f30720ad2cad252ec5efa79289f66a8c8ed80300ea47ce0c3d7d7ce48af6b815250816080015160058151811061096957610969611735565b602002602001018190525060405180604001604052807f2d7a951bb0bb777fff15ef36b73b1ba55bcf0bdb1fa1c8b97972bebda925434681526020017f01e0db889c0c877fe41ed96a598ed3d5e51c21c5fbe6c94833a1ca6bcd8a114b81525081608001516006815181106109e0576109e0611735565b602002602001018190525060405180604001604052807f16fc1465e5e9f056e4eaccdee1c4d061072b74b3eea8eba33c7a0b88c55cbb1781526020017f1f65dc647a255072402c96603a5cb6351345000c2aea6ad64aabb5e4ff9520a68152508160800151600781518110610a5757610a57611735565b602002602001018190525060405180604001604052807f037b8c67e581edc2edea9f16a66966b128e7111b7cdc64ff7d92a10379764a0d81526020017f26349cffc68c534ba62aaa76c2e16ee785a0982d711f2794be6f9956d94851fc8152508160800151600881518110610ace57610ace611735565b602002602001018190525090565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610b0a8160036116e7565b8180610b1857610b1861171f565b84518380610b2857610b2861171f565b86518009098280610b3b57610b3b61171f565b60208601518009610b4c91906116b5565b149392505050565b6020818101518051918101516000927f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5927e9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d2928592839283928392610bc492909190829060015b6020020151611219565b895180516020820151939750919550610be9929060005b60200201518b516001610bba565b89519193509150610bff90839083906000610bdb565b9092509050610c108484848461129a565b9094509250610c218484888861129a565b909450925083158015610c32575082155b98975050505050505050565b6040805180820190915260008082526020820152610c5a6113ac565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa905080801561002b575b5080610cb357604051633842fc7360e21b815260040160405180910390fd5b505092915050565b6040805180820190915260008082526020820152610cd76113ca565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa905080801561002b57610c94565b604080518082019091526000808252602082015260208201517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790610d75576040518060400160405280828560000151610d6491906116e7565b815260006020909101529392505050565b6040518060400160405280828560000151610d9091906116e7565b8152602001828560200151610da591906116e7565b610daf90846116b5565b90529392505050565b60408051601880825261032082019092526000919082908260208201610300803683370190505090508a6000015181600081518110610df957610df9611735565b6020026020010181815250508a6020015181600181518110610e1d57610e1d611735565b602090810291909101015289516001602002015181600281518110610e4457610e44611735565b6020908102919091010152895151815182906003908110610e6757610e67611735565b6020026020010181815250508960200151600160028110610e8a57610e8a611735565b602002015181600481518110610ea257610ea2611735565b6020026020010181815250508960200151600060028110610ec557610ec5611735565b602002015181600581518110610edd57610edd611735565b602002602001018181525050886000015181600681518110610f0157610f01611735565b602002602001018181525050886020015181600781518110610f2557610f25611735565b602090810291909101015287516001602002015181600881518110610f4c57610f4c611735565b6020908102919091010152875151815182906009908110610f6f57610f6f611735565b6020026020010181815250508760200151600160028110610f9257610f92611735565b602002015181600a81518110610faa57610faa611735565b6020026020010181815250508760200151600060028110610fcd57610fcd611735565b602002015181600b81518110610fe557610fe5611735565b602002602001018181525050866000015181600c8151811061100957611009611735565b602002602001018181525050866020015181600d8151811061102d5761102d611735565b602090810291909101015285516001602002015181600e8151811061105457611054611735565b602090810291909101015285515181518290600f90811061107757611077611735565b602002602001018181525050856020015160016002811061109a5761109a611735565b6020020151816010815181106110b2576110b2611735565b60200260200101818152505085602001516000600281106110d5576110d5611735565b6020020151816011815181106110ed576110ed611735565b60200260200101818152505084600001518160128151811061111157611111611735565b60200260200101818152505084602001518160138151811061113557611135611735565b60209081029190910101528351600160200201518160148151811061115c5761115c611735565b602090810291909101015283515181518290601590811061117f5761117f611735565b60200260200101818152505083602001516001600281106111a2576111a2611735565b6020020151816016815181106111ba576111ba611735565b60200260200101818152505083602001516000600281106111dd576111dd611735565b6020020151816017815181106111f5576111f5611735565b60200260200101818152505061120a816112e2565b9b9a5050505050505050505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761125b8186890982806112525761125261171f565b86890983611337565b81806112695761126961171f565b82806112775761127761171f565b87890983806112885761128861171f565b878b0908925092505094509492505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476112c9878683611337565b6112d4878684611337565b925092505094509492505050565b80516000906112ef6113e8565b6000602082602085026020880160086107d05a03fa905080801561002b57508061132c57604051633842fc7360e21b815260040160405180910390fd5b505115159392505050565b600081806113475761134761171f565b61135184846116b5565b8508949350505050565b6040805160e08101909152600060a0820181815260c0830191909152815260208101611385611406565b8152602001611392611406565b815260200161139f611406565b8152602001606081525090565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b604051806040016040528061141961142b565b815260200161142661142b565b905290565b60405180604001604052806002906020820280368337509192915050565b600082601f83011261145a57600080fd5b611462611651565b80838560408601111561147457600080fd5b60005b6002811015611496578135845260209384019390910190600101611477565b509095945050505050565b600082601f8301126114b257600080fd5b8135602067ffffffffffffffff808311156114cf576114cf61174b565b8260051b604051601f19603f830116810181811084821117156114f4576114f461174b565b6040528481528381019250868401828801850189101561151357600080fd5b600092505b85831015611536578035845292840192600192909201918401611518565b50979650505050505050565b60006040828403121561155457600080fd5b6040516040810181811067ffffffffffffffff821117156115775761157761174b565b604052823581526020928301359281019290925250919050565b6000808284036101208112156115a657600080fd5b610100808212156115b657600080fd5b6115be61167a565b6115c88787611542565b81526080603f19840112156115dc57600080fd5b6115e4611651565b92506115f38760408801611449565b83526116028760808801611449565b602084015282602082015261161a8760c08801611542565b60408201529350840135905067ffffffffffffffff81111561163b57600080fd5b611647858286016114a1565b9150509250929050565b6040805190810167ffffffffffffffff811182821017156116745761167461174b565b60405290565b6040516060810167ffffffffffffffff811182821017156116745761167461174b565b600082198211156116b0576116b0611709565b500190565b6000828210156116c7576116c7611709565b500390565b60006000198214156116e0576116e0611709565b5060010190565b60008261170457634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220a8071f05b65c1dc4abfa6be63651814e22a7566ad6c7d4117ca8f67255ba302164736f6c63430008070033';

type Transaction2x0VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Transaction2x0VerifierConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Transaction2x0Verifier__factory extends ContractFactory {
  constructor(...args: Transaction2x0VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Transaction2x0Verifier';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Transaction2x0Verifier> {
    return super.deploy(overrides || {}) as Promise<Transaction2x0Verifier>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Transaction2x0Verifier {
    return super.attach(address) as Transaction2x0Verifier;
  }
  connect(signer: Signer): Transaction2x0Verifier__factory {
    return super.connect(signer) as Transaction2x0Verifier__factory;
  }
  static readonly contractName: 'Transaction2x0Verifier';
  public readonly contractName: 'Transaction2x0Verifier';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Transaction2x0VerifierInterface {
    return new utils.Interface(_abi) as Transaction2x0VerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Transaction2x0Verifier {
    return new Contract(address, _abi, signerOrProvider) as Transaction2x0Verifier;
  }
}
