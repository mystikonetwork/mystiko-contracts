/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Transaction2x0Verifier, Transaction2x0VerifierInterface } from '../Transaction2x0Verifier';

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Transaction2x0Pairing.G1Point',
            name: 'a',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256[2]',
                name: 'X',
                type: 'uint256[2]',
              },
              {
                internalType: 'uint256[2]',
                name: 'Y',
                type: 'uint256[2]',
              },
            ],
            internalType: 'struct Transaction2x0Pairing.G2Point',
            name: 'b',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Transaction2x0Pairing.G1Point',
            name: 'c',
            type: 'tuple',
          },
        ],
        internalType: 'struct Transaction2x0Verifier.Proof',
        name: 'proof',
        type: 'tuple',
      },
      {
        internalType: 'uint256[]',
        name: 'input',
        type: 'uint256[]',
      },
    ],
    name: 'verifyTx',
    outputs: [
      {
        internalType: 'bool',
        name: 'r',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506116b4806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e36600461146f565b610057565b604051901515815260200160405180910390f35b600081516008146100ae5760405162461bcd60e51b815260206004820152601460248201527f696e76616c696420696e707574206c656e677468000000000000000000000000604482015260640160405180910390fd5b6100b882846100ce565b6100c4575060016100c8565b5060005b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100fa610337565b905080608001515185516001610110919061157b565b1461011a57600080fd5b835151821161012857600080fd5b835160200151821161013957600080fd5b60208401515151821161014b57600080fd5b602084810151015151821161015f57600080fd5b602084810151510151821161017357600080fd5b6020848101518101510151821161018957600080fd5b604084015151821161019a57600080fd5b81846040015160200151106101ae57600080fd5b83516101b990610a12565b6101c257600080fd5b6101cf8460200151610a79565b6101d857600080fd5b6101e58460400151610a12565b6101ee57600080fd5b604080518082019091526000808252602082018190525b865181101561029c578387828151811061022157610221611632565b60200260200101511061023357600080fd5b61028882610283856080015184600161024c919061157b565b8151811061025c5761025c611632565b60200260200101518a858151811061027657610276611632565b6020026020010151610bb0565b610c14565b915080610294816115c9565b915050610205565b506102c58183608001516000815181106102b8576102b8611632565b6020026020010151610c14565b90506102d081610a12565b6102d957600080fd5b61031b856000015186602001516102ef84610c6e565b85604001516103018a60400151610c6e565b6060880151885161031190610c6e565b8960200151610cf7565b61032b57600193505050506100c8565b50600095945050505050565b61033f611239565b6040805180820182527f2f669af2bde28c3afb697c8196470fba7f087dd08c23389467668c18d6c2d64c81527f13f692a655a64502d6a0d6adefc338659905f04ab45ff8308d204f8da34221056020808301919091529083528151608080820184527f2d504fc74d28a22795893dc267a40c069ab7fee0394b22b3ad32a149b96e38c78285019081527f2aac24637230a232c8c56135a6376f08e1555639ac5b3cc67564569bc205a62c606080850191909152908352845180860186527f10121e1f29cae1590e553f8e0d72f08cbe3d7092853b5d8bd30f7c876b29df4281527e19470c507162f162d15a2feda34a82bf34fcf1906586c157e77f6985e62b1c818601528385015285840192909252835180820185527f0f3547633fc64dc710f04375cf4609cd43ce960e55f69d0bb33c7c3475e156eb8186019081527f1a159c9049a70f1287136f24b8630259b95c489c233017414aee32a3c25c75de828501528152845180860186527f119be9b78300543e93f25b3ce6244e904772a06243b12701796562d13d05052681527f0527c3ba353815897029edac9d6e4b92be152500b119519b1ab27889d866f531818601528185015285850152835190810184527f2f25ee1c3a83696a079dbcb948b9e84f9e9f568f3bf6b6e8aa4d44596d65b1be8185019081527f05bc72f0316d6492155d27fede25c68303558460a4f04235a75a09758cb0e61c828401528152835180850185527f08ae029654c1518b23007d82474431da0ee69fc393dd5aca674c7dbd4b15213781527f2c26f36b7fa236fba50afc13388bb0c8810fb88d476101b52d7b7c5aa2c15dd7818501528184015290840152815160098082526101408201909352919082015b60408051808201909152600080825260208201528152602001906001900390816105ba57505060808201908152604080518082019091527f23ed62276a20a2bf3ed4250dd64dfe466a1f808a25e9603dc7617d6f30a10ce881527f14a6099abd495ae65b2bf939f6009a7952776bce13547761a962bf50c4aaa7de60208201529051805160009061064d5761064d611632565b602002602001018190525060405180604001604052807f2a5fccb262b6463af2503a49de693c2ade30e8cd0031cb2148d17abaa860890281526020017f26e397bfbdca674bb6e2a60a15e0c0b71479033843e1a41a09a197d546719cfa81525081608001516001815181106106c4576106c4611632565b602002602001018190525060405180604001604052807f1ccedfc8cf5a524a0c8c7ec0d965c8703485ac5689c30fa936db5c9d5306190f81526020017f0d582ded4082c162df9527af0b343f4740c119b8a57a724db1bf73e66e11883e815250816080015160028151811061073b5761073b611632565b602002602001018190525060405180604001604052807f19a89cc4d8ea73977852c9dcd09a3bbdbbb53e5a11bd47887f8c2cab265cd40381526020017f2643c5bee2e011d5c35c649ac1659ee6b3081261be24837c1766dba4ae10143c81525081608001516003815181106107b2576107b2611632565b602002602001018190525060405180604001604052807f021d593e84dba3a75b5a6ff799b1d08e6354c91f862d2d89facaed037a4cfcfd81526020017f14405d17f0128ef323eedf1a67d202a799bd1dcf4ddd592c19075f5e54de4f6f815250816080015160048151811061082957610829611632565b602002602001018190525060405180604001604052807f2f59c9332f55612c0b5e2ef47530653b13d3bb8d74f8437ada32e777fbb2833981526020017f16ca21e5b60a7e372a27646c7e11c5c1c86ee66f085c497b54d0cb8db44277c781525081608001516005815181106108a0576108a0611632565b602002602001018190525060405180604001604052807f049e095b321a1b718e2689969669d0ae3dd1e877f28a9dfbb8558d2c2a86b47c81526020017f2b28771a5d1c7acf7261505a72b493089c8e0b434d483784466ba03a99d79bc7815250816080015160068151811061091757610917611632565b602002602001018190525060405180604001604052807f2f9159a6f24091070df45b7cf9c5d6d740c40f1f2b93256d1308a0350987251681526020017e98d503f24b0d318775ce640b5159e54ae08cbc39fd60a56ea012000c53223b815250816080015160078151811061098d5761098d611632565b602002602001018190525060405180604001604052807f0e33d23255985cfaa7af61d7e7a95eff5c75bdb5f5c6159e8e39b4eb1b48ab2a81526020017f2dfbef77260827b8e1b5f4f9882f39dd9b4bf319d8ef1ff25a6277cae6ad38688152508160800151600881518110610a0457610a04611632565b602002602001018190525090565b6000610a2d60008051602061165f83398151915260036115e4565b60008051602061165f833981519152835160008051602061165f833981519152855180090960008051602061165f83398151915260208501518009610a7291906115b2565b1492915050565b6000806000806000610af98660200151600060028110610a9b57610a9b611632565b60200201518760200151600160028110610ab757610ab7611632565b60200201518860200151600060028110610ad357610ad3611632565b60200201518960200151600160028110610aef57610aef611632565b6020020151610e82565b875180516020820151939750919550610b1e929060005b602002015189516001610aef565b87519193509150610b3490839083906000610b10565b9092509050610b4584848484610ef3565b9094509250610b9584847f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e57e9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d2610ef3565b909450925083158015610ba6575082155b9695505050505050565b6040805180820190915260008082526020820152610bcc61128a565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa9050808015610bff57610c01565bfe5b5080610c0c57600080fd5b505092915050565b6040805180820190915260008082526020820152610c306112a8565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa9050808015610bff57610c01565b60408051808201909152600080825260208201526020820151610ca4575060408051808201909152905181526000602082015290565b60405180604001604052808360000151815260200160008051602061165f8339815191528460200151610cd791906115e4565b610cef9060008051602061165f8339815191526115b2565b905292915050565b60408051600480825260a08201909252600091829190816020015b6040805180820190915260008082526020820152815260200190600190039081610d1257505060408051600480825260a0820190925291925060009190602082015b610d5c6112c6565b815260200190600190039081610d545790505090508a82600081518110610d8557610d85611632565b60200260200101819052508882600181518110610da457610da4611632565b60200260200101819052508682600281518110610dc357610dc3611632565b60200260200101819052508482600381518110610de257610de2611632565b60200260200101819052508981600081518110610e0157610e01611632565b60200260200101819052508781600181518110610e2057610e20611632565b60200260200101819052508581600281518110610e3f57610e3f611632565b60200260200101819052508381600381518110610e5e57610e5e611632565b6020026020010181905250610e738282610f35565b9b9a5050505050505050505050565b600080610ec060008051602061165f83398151915285880960008051602061165f83398151915285880960008051602061165f833981519152611215565b60008051602061165f8339815191528086880960008051602061165f833981519152868a09089150915094509492505050565b600080610f0f868560008051602061165f833981519152611215565b610f28868560008051602061165f833981519152611215565b9150915094509492505050565b60008151835114610f4557600080fd5b82516000610f54826006611593565b905060008167ffffffffffffffff811115610f7157610f71611648565b604051908082528060200260200182016040528015610f9a578160200160208202803683370190505b50905060005b838110156111d557868181518110610fba57610fba611632565b60200260200101516000015182826006610fd49190611593565b610fdf90600061157b565b81518110610fef57610fef611632565b60200260200101818152505086818151811061100d5761100d611632565b602002602001015160200151828260066110279190611593565b61103290600161157b565b8151811061104257611042611632565b60200260200101818152505085818151811061106057611060611632565b6020908102919091018101515101518261107b836006611593565b61108690600261157b565b8151811061109657611096611632565b6020026020010181815250508581815181106110b4576110b4611632565b60209081029190910101515151826110cd836006611593565b6110d890600361157b565b815181106110e8576110e8611632565b60200260200101818152505085818151811061110657611106611632565b60200260200101516020015160016002811061112457611124611632565b602002015182611135836006611593565b61114090600461157b565b8151811061115057611150611632565b60200260200101818152505085818151811061116e5761116e611632565b60200260200101516020015160006002811061118c5761118c611632565b60200201518261119d836006611593565b6111a890600561157b565b815181106111b8576111b8611632565b6020908102919091010152806111cd816115c9565b915050610fa0565b506111de6112eb565b6000602082602086026020860160086107d05a03fa9050808015610bff57508061120757600080fd5b505115159695505050505050565b600081806112255761122561161c565b61122f84846115b2565b8508949350505050565b6040805160e08101909152600060a0820181815260c08301919091528152602081016112636112c6565b81526020016112706112c6565b815260200161127d6112c6565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806112d9611309565b81526020016112e6611309565b905290565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b600082601f83011261133857600080fd5b61134061152f565b80838560408601111561135257600080fd5b60005b6002811015611374578135845260209384019390910190600101611355565b509095945050505050565b600082601f83011261139057600080fd5b8135602067ffffffffffffffff808311156113ad576113ad611648565b8260051b604051601f19603f830116810181811084821117156113d2576113d2611648565b604052848152838101925086840182880185018910156113f157600080fd5b600092505b858310156114145780358452928401926001929092019184016113f6565b50979650505050505050565b60006040828403121561143257600080fd5b6040516040810181811067ffffffffffffffff8211171561145557611455611648565b604052823581526020928301359281019290925250919050565b60008082840361012081121561148457600080fd5b6101008082121561149457600080fd5b61149c611558565b6114a68787611420565b81526080603f19840112156114ba57600080fd5b6114c261152f565b92506114d18760408801611327565b83526114e08760808801611327565b60208401528260208201526114f88760c08801611420565b60408201529350840135905067ffffffffffffffff81111561151957600080fd5b6115258582860161137f565b9150509250929050565b6040805190810167ffffffffffffffff8111828210171561155257611552611648565b60405290565b6040516060810167ffffffffffffffff8111828210171561155257611552611648565b6000821982111561158e5761158e611606565b500190565b60008160001904831182151516156115ad576115ad611606565b500290565b6000828210156115c4576115c4611606565b500390565b60006000198214156115dd576115dd611606565b5060010190565b60008261160157634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a26469706673582212204b0570f7e910779d5a1e8ee24dc0f555be564177e44d61ca0883e3d0e1aef53864736f6c63430008070033';

type Transaction2x0VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Transaction2x0VerifierConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Transaction2x0Verifier__factory extends ContractFactory {
  constructor(...args: Transaction2x0VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Transaction2x0Verifier';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Transaction2x0Verifier> {
    return super.deploy(overrides || {}) as Promise<Transaction2x0Verifier>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Transaction2x0Verifier {
    return super.attach(address) as Transaction2x0Verifier;
  }
  connect(signer: Signer): Transaction2x0Verifier__factory {
    return super.connect(signer) as Transaction2x0Verifier__factory;
  }
  static readonly contractName: 'Transaction2x0Verifier';
  public readonly contractName: 'Transaction2x0Verifier';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Transaction2x0VerifierInterface {
    return new utils.Interface(_abi) as Transaction2x0VerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Transaction2x0Verifier {
    return new Contract(address, _abi, signerOrProvider) as Transaction2x0Verifier;
  }
}
