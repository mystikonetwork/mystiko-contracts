/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Transaction1x2Verifier, Transaction1x2VerifierInterface } from '../Transaction1x2Verifier';

const _abi = [
  {
    inputs: [],
    name: 'InvalidParam',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotOnCurve',
    type: 'error',
  },
  {
    inputs: [],
    name: 'StaticCallFailed',
    type: 'error',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'a',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256[2]',
                name: 'X',
                type: 'uint256[2]',
              },
              {
                internalType: 'uint256[2]',
                name: 'Y',
                type: 'uint256[2]',
              },
            ],
            internalType: 'struct Pairing.G2Point',
            name: 'b',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'c',
            type: 'tuple',
          },
        ],
        internalType: 'struct VerifierLib.Proof',
        name: 'proof',
        type: 'tuple',
      },
      {
        internalType: 'uint256[]',
        name: 'input',
        type: 'uint256[]',
      },
    ],
    name: 'verifyTx',
    outputs: [
      {
        internalType: 'bool',
        name: 'r',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b5061206a806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e366004611e64565b610057565b604051901515815260200160405180910390f35b60008151601b1461007b57604051633494a40d60e21b815260040160405180910390fd5b610085828461008c565b9392505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100b86103ff565b9050806080015151855160016100ce9190611f70565b146100ec57604051633494a40d60e21b815260040160405180910390fd5b835151821161010e57604051633494a40d60e21b815260040160405180910390fd5b835160200151821161013357604051633494a40d60e21b815260040160405180910390fd5b60208401515151821161015957604051633494a40d60e21b815260040160405180910390fd5b602084810151015151821161018157604051633494a40d60e21b815260040160405180910390fd5b60208481015151015182116101a957604051633494a40d60e21b815260040160405180910390fd5b602084810151810151015182116101d357604051633494a40d60e21b815260040160405180910390fd5b60408401515182116101f857604051633494a40d60e21b815260040160405180910390fd5b818460400151602001511061022057604051633494a40d60e21b815260040160405180910390fd5b835161022b906113af565b610248576040516361586bdd60e01b815260040160405180910390fd5b6102558460200151611427565b610272576040516361586bdd60e01b815260040160405180910390fd5b61027f84604001516113af565b61029c576040516361586bdd60e01b815260040160405180910390fd5b60006102dc604051806040016040528060008152602001600081525083608001516000815181106102cf576102cf612008565b6020026020010151611511565b905060005b865181101561038c57838782815181106102fd576102fd612008565b60200260200101511061032357604051633494a40d60e21b815260040160405180910390fd5b61037882610373856080015184600161033c9190611f70565b8151811061034c5761034c612008565b60200260200101518a858151811061036657610366612008565b602002602001015161158e565b611511565b91508061038481611f9f565b9150506102e1565b50610396816113af565b6103b3576040516361586bdd60e01b815260040160405180910390fd5b6103f5856000015186602001516103c9846115dd565b85604001516103db8a604001516115dd565b606088015188516103eb906115dd565b896020015161168b565b9695505050505050565b610407611c2e565b6040805180820182527f2f8027194aaf5baf1cf5f34c22f9bb12785aa79c2c5ee58c40b9cb766760ad2f81527f2adcc46a915b8228780aa93ef806ec8fe3df2df7337f2f2251f334bd286b91e16020808301919091529083528151608080820184527f2eaa36aa2c597e2ee6a859c61bc287276f3eb241b7fb9713190821f08ee989158285019081527f0b158ad51a8d911bb33814bbc77218a5001d8c2848c26f78cea01ab2a943bf8b606080850191909152908352845180860186527f20c295389f1d2ab9b4e940984c23a40a0d7f3bf32eecaab959287f0c6c685c5981527f027909baf26758b1bd7d9ad115114878ffd800a95da9d444e5cfe297895dad7c818601528385015285840192909252835180820185527f2ddf335bb1266f2413da48389f489d9492c65d9d94af24ea60666d64251b614c8186019081527f2719d4d4af018f0a776b5735c414f22d905b0555dd0c6ef8b3176af5f312a254828501528152845180860186527f189e7918d6b2baab64647c7391272f172afb12150c227685b66adb10419e267381527f05d620440ca71d66fd66832b7823678722403a38abd56ebb37476242c16f7bd8818601528185015285850152835190810184527f0b4ecb98ccc8ff9cef6bad99d05d884e2487216c2b3ecf494a0fe01443cbadaa8185019081527f2941713f3a16c65a39c2d2bcacd8069f2774ba908b542f7c9d00559eef90aa78828401528152835180850185527f10f293ae85041ff31be79a3b072e05ad3819323bafb6f8cf74523c9db23e5c8481527f2689e623045cd9274447db79796034c7b529f176e9d014c0f58820de897997988185015281840152908401528151601c8082526103a08201909352919082015b604080518082019091526000808252602082015281526020019060019003908161068357505060808201908152604080518082019091527f11eaeedea777ac329306a66155924de964a3e7db0180b807fc048e26ca6a32e481527f06111bc92f1df25ed22367c61124b50fa73d8b877b1eeafd9b4cb786b5cd21a460208201529051805160009061071657610716612008565b602002602001018190525060405180604001604052807f1d1961edcb97ba2a3bfcdfd2cf0d5cabe4637147d5646b24aed7c5049f78e91c81526020017f249681e34117119d7982b8a9963405ac4eddfe7324c1e4447bea166ebc7a4cd7815250816080015160018151811061078d5761078d612008565b602002602001018190525060405180604001604052807f2cfcc50c6ee635d35f3036a6460c1b6a57cd6def5f35ef7fcef3cd780312d86b81526020017f112e42289d2f93c1d48899da23c043c777fdd1b2bb9f5674ee18aca1c52a93dd815250816080015160028151811061080457610804612008565b602002602001018190525060405180604001604052807f2ffc5142361c8ed11cba5bdcd7386b0d9d180759413a6ab3d06ba9cd52b0540581526020017f1fa0da1148b57a904b8742a012d87a6fa95ea23c0dc6f9560699feb532c8d91e815250816080015160038151811061087b5761087b612008565b602002602001018190525060405180604001604052807f09dce93a14bfed9896d85b2b395b83a3960d4d50e53f6577be2e9375a1d7ade081526020017f142e1301989319a9c3adac8e2e8b7b2d72890f35238d6df5305e37058e670e8681525081608001516004815181106108f2576108f2612008565b602002602001018190525060405180604001604052807f165acd9beb5a1ed9b3a2a0f5a5ffd5b4689d28d6e08879451ba24f72b3d57d9a81526020017f1372772fcf0bad652c719de194ca0a0eea1aa6a7ad40762eb7e9e3235fc1ba34815250816080015160058151811061096957610969612008565b602002602001018190525060405180604001604052807f2c3d2b4d8e791e4a4044c9062c0c3ae1e648022192d528e3b28663ba7eea939e81526020017f1a2df29236514eef63ea104aa3fc6cbd31f1cf938a951329595514478a7e1b6181525081608001516006815181106109e0576109e0612008565b602002602001018190525060405180604001604052807f15d4c9360817a24c47a15c6c1b597550cf06d3133f1f6ce404b9167baa47dc0681526020017f09474ab6b1607aa5f0a81287337e66c752ef802635c004e607966012afa5fd1b8152508160800151600781518110610a5757610a57612008565b602002602001018190525060405180604001604052807f12fa6511a18a10035a5b5e375333e443ca470540873c9fc3d9e6c81e27648cce81526020017f16a798f7ad3aba211e98a02dcef7e6b3949955af1d1b21a16aa6154795b122b58152508160800151600881518110610ace57610ace612008565b602002602001018190525060405180604001604052807f20ba8159c7851c93299649a46851e37b8cf0e7821e5a0c5c5d67e8f96a893b5d81526020017f295de18bd02769588ed9b1ef03a5cc742c5ff3c91080518040399d40c69600d78152508160800151600981518110610b4557610b45612008565b602002602001018190525060405180604001604052807f1f8c150eebd4a4bb0af703de667b74ad6c95df01f07fe6c7e3ff954b8331a2e181526020017f111c221c7fa828d417e822e8b5e52b0bac4d88339154728200366e548a0233f88152508160800151600a81518110610bbc57610bbc612008565b602002602001018190525060405180604001604052807f0c6ba4362dee4c9755c5bf0268f3105796853855a33f17a2561658c1ef1de10d81526020017e43d6e07391d7e6c4ac9f4fa1d7c4b5f248b3a37e25b22535e0064ca942aa158152508160800151600b81518110610c3257610c32612008565b602002602001018190525060405180604001604052807f0fc566d141897c35d52f2a3399e655c7af67da1bf7fc4b120d055648d09a761281526020017f1f9cbd74d5bb73319b7154535673486c096c54cae2dd3047ac81a581d234b3458152508160800151600c81518110610ca957610ca9612008565b602002602001018190525060405180604001604052807f0783ee15fb73df26d8c320d52addbd373807729a467c730affe80429d16b476e81526020017f056524772a2c8a7bb82660df65ea82e973560326154f3a9e1f258bb8d6cd4a478152508160800151600d81518110610d2057610d20612008565b602002602001018190525060405180604001604052807f13f610b79b8ca226a15374ab886ad451d8afaa0f99ae5943a31e83beedc43e3881526020017f232acae78a149748eca020de30ebd3961bc52f5e3053670ce4388bce09e5f5f68152508160800151600e81518110610d9757610d97612008565b602002602001018190525060405180604001604052807f18d51f5dfd0e3f15b403c8d0a20f7fa0dd081aac4b32465aaa85aa18b54b82d381526020017f182b4e62c5545ed1da076d2a0dc290c4f3f43422a492a5666b7153a2d57f51698152508160800151600f81518110610e0e57610e0e612008565b602002602001018190525060405180604001604052807f0f9e2b252c46867ff510f5426bfbf1e142f2f32e3551b15a3356bd7b70d634ef81526020017ee18e9de4527daf917ba8f94eb7b7e04a1eecebc7e6f2a01d46a1f8a7ab42988152508160800151601081518110610e8457610e84612008565b602002602001018190525060405180604001604052807f1f175fccab79b13869de226c863d541802a35a295084043486ede815aeb5ff8481526020017f1f539926db010aa5e2522c8a2b21c612fcf05b5f5c8b4b0d1d38a7952fba4fc68152508160800151601181518110610efb57610efb612008565b602002602001018190525060405180604001604052807f13f3e10cfe73401ad48c804c94d78be72e93bb228b9c6fbc4a8ad073561b8d2581526020017f16e17db1bc9e1a0280fc2c55722ec51944fa9cbeb567bdbe8121dbf4ec709efe8152508160800151601281518110610f7257610f72612008565b602002602001018190525060405180604001604052807f246e6763646f8af66932b69bd3236ad93ec844131cad34b6df83ede54dbeee4381526020017f0defe17ccbfba4757cd0ea89f1591940d22f08d2449db142dac03928d97b56318152508160800151601381518110610fe957610fe9612008565b602002602001018190525060405180604001604052807f1abc09125169c1040d2ae014c428f417f2dbab55cd3cf484b57862408551496381526020017f2767a9bed1b60c7c71087c2928b6500b7f3a2aa51316636e22c109ff0fc7948e815250816080015160148151811061106057611060612008565b602002602001018190525060405180604001604052807f27814103c3c1af8467fa2d919e06f61d1fbd83cc44e8e6f952851047d87b775981526020017f29406a72305d21542da3a23ad7f8e5ba92ccac4d524aa5517a8725c8978c99f081525081608001516015815181106110d7576110d7612008565b602002602001018190525060405180604001604052807f111f6ad93357295322fb44daf0300ce4bfc7699e66292bc60217116080cb887481526020017f187bd7049be44628aa3a66c446e84268decf70c96b1b5888e5e5bf2d31c7ccaf815250816080015160168151811061114e5761114e612008565b602002602001018190525060405180604001604052807f17b784cff200ab706d93c9222ae7c681c021f58e00dd5c1b4374dceb494e3bf581526020017f210a14be41082202e4b26bdf339e20c57b67afa7f577a75eb7b3bdb7dd177feb81525081608001516017815181106111c5576111c5612008565b602002602001018190525060405180604001604052807f259db14a2219626956cb08c3be418af63eff53c2fa49c0594b2df142c481860e81526020017f0b33e516a0f0a3f58eeb8d47d656be21206c5f28c930b60a20d3fb5075e5cbdd815250816080015160188151811061123c5761123c612008565b602002602001018190525060405180604001604052807f0b1b08cbb711155404d180d9a522cab8869a0ebc5225ff5f12fd2ac61b82bd1781526020017f029ce2bfc2105c14ec5883d508628708b7f4aee8ea216cc46a78097f1059fcb281525081608001516019815181106112b3576112b3612008565b602002602001018190525060405180604001604052807f0da28b021ccfc5673d4f85018b200a1f9c3b4abe0bc8196b7748a2cc2f21776481526020017f0d7ea07245daee83c9125f193c5d60fefb64503646e2248f4a3ef94159e46b7d8152508160800151601a8151811061132a5761132a612008565b602002602001018190525060405180604001604052807f1d492d2a4dc20cf831baec70536ebff0e3d01e60b0aac4b96eb255674876fc2681526020017f2e2a075621315b00a40ea383e26b8112f33efaa47f08e0e626cd694dd85548998152508160800151601b815181106113a1576113a1612008565b602002602001018190525090565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476113dd816003611fba565b81806113eb576113eb611ff2565b845183806113fb576113fb611ff2565b8651800909828061140e5761140e611ff2565b6020860151800961141f9190611f88565b149392505050565b6020818101518051918101516000927f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5927e9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d292859283928392839261149792909190829060015b6020020151611aec565b8951805160208201519397509195506114bc929060005b60200201518b51600161148d565b895191935091506114d2908390839060006114ae565b90925090506114e384848484611b6d565b90945092506114f484848888611b6d565b909450925083158015611505575082155b98975050505050505050565b604080518082019091526000808252602082015261152d611c7f565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa905080801561002b575b508061158657604051633842fc7360e21b815260040160405180910390fd5b505092915050565b60408051808201909152600080825260208201526115aa611c9d565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa905080801561002b57611567565b604080518082019091526000808252602082015260208201517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47906116485760405180604001604052808285600001516116379190611fba565b815260006020909101529392505050565b60405180604001604052808285600001516116639190611fba565b81526020018285602001516116789190611fba565b6116829084611f88565b90529392505050565b60408051601880825261032082019092526000919082908260208201610300803683370190505090508a60000151816000815181106116cc576116cc612008565b6020026020010181815250508a60200151816001815181106116f0576116f0612008565b60209081029190910101528951600160200201518160028151811061171757611717612008565b602090810291909101015289515181518290600390811061173a5761173a612008565b602002602001018181525050896020015160016002811061175d5761175d612008565b60200201518160048151811061177557611775612008565b602002602001018181525050896020015160006002811061179857611798612008565b6020020151816005815181106117b0576117b0612008565b6020026020010181815250508860000151816006815181106117d4576117d4612008565b6020026020010181815250508860200151816007815181106117f8576117f8612008565b60209081029190910101528751600160200201518160088151811061181f5761181f612008565b602090810291909101015287515181518290600990811061184257611842612008565b602002602001018181525050876020015160016002811061186557611865612008565b602002015181600a8151811061187d5761187d612008565b60200260200101818152505087602001516000600281106118a0576118a0612008565b602002015181600b815181106118b8576118b8612008565b602002602001018181525050866000015181600c815181106118dc576118dc612008565b602002602001018181525050866020015181600d8151811061190057611900612008565b602090810291909101015285516001602002015181600e8151811061192757611927612008565b602090810291909101015285515181518290600f90811061194a5761194a612008565b602002602001018181525050856020015160016002811061196d5761196d612008565b60200201518160108151811061198557611985612008565b60200260200101818152505085602001516000600281106119a8576119a8612008565b6020020151816011815181106119c0576119c0612008565b6020026020010181815250508460000151816012815181106119e4576119e4612008565b602002602001018181525050846020015181601381518110611a0857611a08612008565b602090810291909101015283516001602002015181601481518110611a2f57611a2f612008565b6020908102919091010152835151815182906015908110611a5257611a52612008565b6020026020010181815250508360200151600160028110611a7557611a75612008565b602002015181601681518110611a8d57611a8d612008565b6020026020010181815250508360200151600060028110611ab057611ab0612008565b602002015181601781518110611ac857611ac8612008565b602002602001018181525050611add81611bb5565b9b9a5050505050505050505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611b2e818689098280611b2557611b25611ff2565b86890983611c0a565b8180611b3c57611b3c611ff2565b8280611b4a57611b4a611ff2565b8789098380611b5b57611b5b611ff2565b878b0908925092505094509492505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47611b9c878683611c0a565b611ba7878684611c0a565b925092505094509492505050565b8051600090611bc2611cbb565b6000602082602085026020880160086107d05a03fa905080801561002b575080611bff57604051633842fc7360e21b815260040160405180910390fd5b505115159392505050565b60008180611c1a57611c1a611ff2565b611c248484611f88565b8508949350505050565b6040805160e08101909152600060a0820181815260c0830191909152815260208101611c58611cd9565b8152602001611c65611cd9565b8152602001611c72611cd9565b8152602001606081525090565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060400160405280611cec611cfe565b8152602001611cf9611cfe565b905290565b60405180604001604052806002906020820280368337509192915050565b600082601f830112611d2d57600080fd5b611d35611f24565b808385604086011115611d4757600080fd5b60005b6002811015611d69578135845260209384019390910190600101611d4a565b509095945050505050565b600082601f830112611d8557600080fd5b8135602067ffffffffffffffff80831115611da257611da261201e565b8260051b604051601f19603f83011681018181108482111715611dc757611dc761201e565b60405284815283810192508684018288018501891015611de657600080fd5b600092505b85831015611e09578035845292840192600192909201918401611deb565b50979650505050505050565b600060408284031215611e2757600080fd5b6040516040810181811067ffffffffffffffff82111715611e4a57611e4a61201e565b604052823581526020928301359281019290925250919050565b600080828403610120811215611e7957600080fd5b61010080821215611e8957600080fd5b611e91611f4d565b611e9b8787611e15565b81526080603f1984011215611eaf57600080fd5b611eb7611f24565b9250611ec68760408801611d1c565b8352611ed58760808801611d1c565b6020840152826020820152611eed8760c08801611e15565b60408201529350840135905067ffffffffffffffff811115611f0e57600080fd5b611f1a85828601611d74565b9150509250929050565b6040805190810167ffffffffffffffff81118282101715611f4757611f4761201e565b60405290565b6040516060810167ffffffffffffffff81118282101715611f4757611f4761201e565b60008219821115611f8357611f83611fdc565b500190565b600082821015611f9a57611f9a611fdc565b500390565b6000600019821415611fb357611fb3611fdc565b5060010190565b600082611fd757634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122025b97491ea7ac42f368fb994eac56220e532b4e2dff19efc58e066ce7a1d2aa864736f6c63430008070033';

type Transaction1x2VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Transaction1x2VerifierConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Transaction1x2Verifier__factory extends ContractFactory {
  constructor(...args: Transaction1x2VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Transaction1x2Verifier';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Transaction1x2Verifier> {
    return super.deploy(overrides || {}) as Promise<Transaction1x2Verifier>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Transaction1x2Verifier {
    return super.attach(address) as Transaction1x2Verifier;
  }
  connect(signer: Signer): Transaction1x2Verifier__factory {
    return super.connect(signer) as Transaction1x2Verifier__factory;
  }
  static readonly contractName: 'Transaction1x2Verifier';
  public readonly contractName: 'Transaction1x2Verifier';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Transaction1x2VerifierInterface {
    return new utils.Interface(_abi) as Transaction1x2VerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Transaction1x2Verifier {
    return new Contract(address, _abi, signerOrProvider) as Transaction1x2Verifier;
  }
}
