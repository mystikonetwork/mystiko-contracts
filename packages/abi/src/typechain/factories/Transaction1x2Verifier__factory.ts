/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Transaction1x2Verifier, Transaction1x2VerifierInterface } from '../Transaction1x2Verifier';

const _abi = [
  {
    inputs: [],
    name: 'InvalidParam',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotOnCurve',
    type: 'error',
  },
  {
    inputs: [],
    name: 'StaticCallFailed',
    type: 'error',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'a',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256[2]',
                name: 'X',
                type: 'uint256[2]',
              },
              {
                internalType: 'uint256[2]',
                name: 'Y',
                type: 'uint256[2]',
              },
            ],
            internalType: 'struct Pairing.G2Point',
            name: 'b',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'c',
            type: 'tuple',
          },
        ],
        internalType: 'struct VerifierLib.Proof',
        name: 'proof',
        type: 'tuple',
      },
      {
        internalType: 'uint256[]',
        name: 'input',
        type: 'uint256[]',
      },
    ],
    name: 'verifyTx',
    outputs: [
      {
        internalType: 'bool',
        name: 'r',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50611885806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e36600461167f565b610057565b604051901515815260200160405180910390f35b60008151600a1461007b57604051633494a40d60e21b815260040160405180910390fd5b610085828461008c565b9392505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100b86103ff565b9050806080015151855160016100ce919061178b565b146100ec57604051633494a40d60e21b815260040160405180910390fd5b835151821161010e57604051633494a40d60e21b815260040160405180910390fd5b835160200151821161013357604051633494a40d60e21b815260040160405180910390fd5b60208401515151821161015957604051633494a40d60e21b815260040160405180910390fd5b602084810151015151821161018157604051633494a40d60e21b815260040160405180910390fd5b60208481015151015182116101a957604051633494a40d60e21b815260040160405180910390fd5b602084810151810151015182116101d357604051633494a40d60e21b815260040160405180910390fd5b60408401515182116101f857604051633494a40d60e21b815260040160405180910390fd5b818460400151602001511061022057604051633494a40d60e21b815260040160405180910390fd5b835161022b90610bca565b610248576040516361586bdd60e01b815260040160405180910390fd5b6102558460200151610c42565b610272576040516361586bdd60e01b815260040160405180910390fd5b61027f8460400151610bca565b61029c576040516361586bdd60e01b815260040160405180910390fd5b60006102dc604051806040016040528060008152602001600081525083608001516000815181106102cf576102cf611823565b6020026020010151610d2c565b905060005b865181101561038c57838782815181106102fd576102fd611823565b60200260200101511061032357604051633494a40d60e21b815260040160405180910390fd5b61037882610373856080015184600161033c919061178b565b8151811061034c5761034c611823565b60200260200101518a858151811061036657610366611823565b6020026020010151610da9565b610d2c565b915080610384816117ba565b9150506102e1565b5061039681610bca565b6103b3576040516361586bdd60e01b815260040160405180910390fd5b6103f5856000015186602001516103c984610df8565b85604001516103db8a60400151610df8565b606088015188516103eb90610df8565b8960200151610ea6565b9695505050505050565b610407611449565b6040805180820182527f0868ce6a9f85b3cbaa46cb1cbb8ed99bfe8031d2086c7bb50b47fb027afecca581527f0dbd9041278b993f3e0315944c17fe5cf339ffb6f331ee7a3039cf186b63afbb6020808301919091529083528151608080820184527f2b31f0fde52246d56b7b7aa760e8e08b2756bb20f312e76e6af3e57389f2b2a38285019081527f13525300b1746f0ebccebd28c40602da776f5a43a15bfd6b4bd9840c48668790606080850191909152908352845180860186527f199dd25d5d9158e92767e8ad08ab2daecf069638c2db96cf8b983abd561d83c781527f0164c2a30efb84e50cd1fc40e285fdd28f04b87f781ad76d64f3922eb5dd4d12818601528385015285840192909252835180820185527f0c42be75e43b4670795f728d7aa08af912dc44e31699eb2eeaa01dd69ab350af8186019081527f156b5b08eb09f565a1298c64940edfb2998d53d9395b44f50575b98d60cb1d77828501528152845180860186527f10e68153451ad15f4ab9c92d864f958f9615045fc7e97ae8b78dfde84597681581527f0e4776cdd70246a429ff1aed2787d9cfe8f9ceeb6c4e3cc513c37df486aec39e818601528185015285850152835190810184527f1e1517fae80eb34b2072066e56e96d51c25a4b1822e58c77a4069aafae43734b8185019081527f2b81dc5208feafa7eae66ed0f0f44f8a8fc6d93bb205d54c2fdc612e680c09f6828401528152835180850185527f07429c613fa170851e22bf508416e2e2f9402c2e36b4f2409653dbd86f899cd981527f2782768f9109b490ac3a5c5432b206ed848b9dc42d504ea1e668b3346eb8ec348185015281840152908401528151600b8082526101808201909352919082015b604080518082019091526000808252602082015281526020019060019003908161068357505060808201908152604080518082019091527f0da0199b4c990dfa685dfdd6a960c2bf0968199e2311b1107323425a8f5189d581527f134447abb38c633c9214ba5ca5725de0ec5344e93c7480fde9d8af0e12892a3960208201529051805160009061071657610716611823565b602002602001018190525060405180604001604052807f2ea5ed88a03dc92b56f4d09621252cfb6297efdf8134ff5016356ca6dc0fcf7281526020017f077d45ca83d2913cfd6dc3f009771ef5b5d4120ac389409729e0dbe688603d3a815250816080015160018151811061078d5761078d611823565b602002602001018190525060405180604001604052807f11a248e54bce9934db98b0228b9733087f03ee0469a59c59657379078432f72281526020017f03a88668cfb7f99572aafe875f7cfb008a440bb8e1a62439c49a965fb0c9bc5e815250816080015160028151811061080457610804611823565b602002602001018190525060405180604001604052807f148b5b8d77d5ed5b450087916a147d508ebc3f994ce96eed97926aef01c7230581526020017f0a8c39ba6b8096a7f46cf7707d5164ffd968a2e9d5f27d06c03d4771cedfaa52815250816080015160038151811061087b5761087b611823565b602002602001018190525060405180604001604052807f24a83d99daa383089def93ec1b81bd4b86243f426c71dea751e2b8a4b39707ef81526020017f1ebd88b81861aeb3de6128cc4c8bb44204584d881d5c477dbcd69be6cdaabaa381525081608001516004815181106108f2576108f2611823565b602002602001018190525060405180604001604052807f1a29fded01837885d41e51d1ce3bab081f329cd8904223a14079614b87dbaf2281526020017f1a149ce245558f19bc60dc61295fc28580996281c8132fa19e61588d6150456e815250816080015160058151811061096957610969611823565b602002602001018190525060405180604001604052807f1df7419957b601abf19490d8635200d8499f439c55d0d2e3cccadecc94ad226b81526020017f10fedbc5a046cf5601ae91f82602781296a0b4ca0676e14de4c684a60213b02781525081608001516006815181106109e0576109e0611823565b602002602001018190525060405180604001604052807f03ebb8619bf731d737a82c1de19add9caf29c492a18c83863d9538e46401e0b181526020017f0ab7b9604570b4f551a8c37fdacc2b0ddb178aad950a4c97751319dc2c28d90b8152508160800151600781518110610a5757610a57611823565b602002602001018190525060405180604001604052807f01f32fa37ddecc2f9bcdbee923882b8b4f40c45cd9cf38ae61aea118bbc0cab481526020017f266de9fb015722098153e653b3882497ef406d4686a50820fc7796deb81953568152508160800151600881518110610ace57610ace611823565b602002602001018190525060405180604001604052807f0a183362625b1dffeb0f7cd27e6e361dc40e9cdd3ace182877aa15c6cb378ce481526020017f1163d867263d83143a986768b52170d6086db77e56cf6ff4a6c1522cd6deb3398152508160800151600981518110610b4557610b45611823565b602002602001018190525060405180604001604052807f1d6e02a7c884911e80c46a9290fad76d0cd3e7462d06b685708a8b46b14859d081526020017f050ed246c2cd8bf04457197928b0b2bd30d8bfade59e631c1a575c26cc970b308152508160800151600a81518110610bbc57610bbc611823565b602002602001018190525090565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610bf88160036117d5565b8180610c0657610c0661180d565b84518380610c1657610c1661180d565b86518009098280610c2957610c2961180d565b60208601518009610c3a91906117a3565b149392505050565b6020818101518051918101516000927f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5927e9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d2928592839283928392610cb292909190829060015b6020020151611307565b895180516020820151939750919550610cd7929060005b60200201518b516001610ca8565b89519193509150610ced90839083906000610cc9565b9092509050610cfe84848484611388565b9094509250610d0f84848888611388565b909450925083158015610d20575082155b98975050505050505050565b6040805180820190915260008082526020820152610d4861149a565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa905080801561002b575b5080610da157604051633842fc7360e21b815260040160405180910390fd5b505092915050565b6040805180820190915260008082526020820152610dc56114b8565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa905080801561002b57610d82565b604080518082019091526000808252602082015260208201517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790610e63576040518060400160405280828560000151610e5291906117d5565b815260006020909101529392505050565b6040518060400160405280828560000151610e7e91906117d5565b8152602001828560200151610e9391906117d5565b610e9d90846117a3565b90529392505050565b60408051601880825261032082019092526000919082908260208201610300803683370190505090508a6000015181600081518110610ee757610ee7611823565b6020026020010181815250508a6020015181600181518110610f0b57610f0b611823565b602090810291909101015289516001602002015181600281518110610f3257610f32611823565b6020908102919091010152895151815182906003908110610f5557610f55611823565b6020026020010181815250508960200151600160028110610f7857610f78611823565b602002015181600481518110610f9057610f90611823565b6020026020010181815250508960200151600060028110610fb357610fb3611823565b602002015181600581518110610fcb57610fcb611823565b602002602001018181525050886000015181600681518110610fef57610fef611823565b60200260200101818152505088602001518160078151811061101357611013611823565b60209081029190910101528751600160200201518160088151811061103a5761103a611823565b602090810291909101015287515181518290600990811061105d5761105d611823565b602002602001018181525050876020015160016002811061108057611080611823565b602002015181600a8151811061109857611098611823565b60200260200101818152505087602001516000600281106110bb576110bb611823565b602002015181600b815181106110d3576110d3611823565b602002602001018181525050866000015181600c815181106110f7576110f7611823565b602002602001018181525050866020015181600d8151811061111b5761111b611823565b602090810291909101015285516001602002015181600e8151811061114257611142611823565b602090810291909101015285515181518290600f90811061116557611165611823565b602002602001018181525050856020015160016002811061118857611188611823565b6020020151816010815181106111a0576111a0611823565b60200260200101818152505085602001516000600281106111c3576111c3611823565b6020020151816011815181106111db576111db611823565b6020026020010181815250508460000151816012815181106111ff576111ff611823565b60200260200101818152505084602001518160138151811061122357611223611823565b60209081029190910101528351600160200201518160148151811061124a5761124a611823565b602090810291909101015283515181518290601590811061126d5761126d611823565b602002602001018181525050836020015160016002811061129057611290611823565b6020020151816016815181106112a8576112a8611823565b60200260200101818152505083602001516000600281106112cb576112cb611823565b6020020151816017815181106112e3576112e3611823565b6020026020010181815250506112f8816113d0565b9b9a5050505050505050505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476113498186890982806113405761134061180d565b86890983611425565b81806113575761135761180d565b82806113655761136561180d565b87890983806113765761137661180d565b878b0908925092505094509492505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476113b7878683611425565b6113c2878684611425565b925092505094509492505050565b80516000906113dd6114d6565b6000602082602085026020880160086107d05a03fa905080801561002b57508061141a57604051633842fc7360e21b815260040160405180910390fd5b505115159392505050565b600081806114355761143561180d565b61143f84846117a3565b8508949350505050565b6040805160e08101909152600060a0820181815260c08301919091528152602081016114736114f4565b81526020016114806114f4565b815260200161148d6114f4565b8152602001606081525090565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b6040518060400160405280611507611519565b8152602001611514611519565b905290565b60405180604001604052806002906020820280368337509192915050565b600082601f83011261154857600080fd5b61155061173f565b80838560408601111561156257600080fd5b60005b6002811015611584578135845260209384019390910190600101611565565b509095945050505050565b600082601f8301126115a057600080fd5b8135602067ffffffffffffffff808311156115bd576115bd611839565b8260051b604051601f19603f830116810181811084821117156115e2576115e2611839565b6040528481528381019250868401828801850189101561160157600080fd5b600092505b85831015611624578035845292840192600192909201918401611606565b50979650505050505050565b60006040828403121561164257600080fd5b6040516040810181811067ffffffffffffffff8211171561166557611665611839565b604052823581526020928301359281019290925250919050565b60008082840361012081121561169457600080fd5b610100808212156116a457600080fd5b6116ac611768565b6116b68787611630565b81526080603f19840112156116ca57600080fd5b6116d261173f565b92506116e18760408801611537565b83526116f08760808801611537565b60208401528260208201526117088760c08801611630565b60408201529350840135905067ffffffffffffffff81111561172957600080fd5b6117358582860161158f565b9150509250929050565b6040805190810167ffffffffffffffff8111828210171561176257611762611839565b60405290565b6040516060810167ffffffffffffffff8111828210171561176257611762611839565b6000821982111561179e5761179e6117f7565b500190565b6000828210156117b5576117b56117f7565b500390565b60006000198214156117ce576117ce6117f7565b5060010190565b6000826117f257634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c19633dbbc579f701845a895af9ef1487584e08eb3a848fa18b584e99f632bda64736f6c63430008070033';

type Transaction1x2VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Transaction1x2VerifierConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Transaction1x2Verifier__factory extends ContractFactory {
  constructor(...args: Transaction1x2VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Transaction1x2Verifier';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Transaction1x2Verifier> {
    return super.deploy(overrides || {}) as Promise<Transaction1x2Verifier>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Transaction1x2Verifier {
    return super.attach(address) as Transaction1x2Verifier;
  }
  connect(signer: Signer): Transaction1x2Verifier__factory {
    return super.connect(signer) as Transaction1x2Verifier__factory;
  }
  static readonly contractName: 'Transaction1x2Verifier';
  public readonly contractName: 'Transaction1x2Verifier';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Transaction1x2VerifierInterface {
    return new utils.Interface(_abi) as Transaction1x2VerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Transaction1x2Verifier {
    return new Contract(address, _abi, signerOrProvider) as Transaction1x2Verifier;
  }
}
