/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Transaction2x2Verifier, Transaction2x2VerifierInterface } from '../Transaction2x2Verifier';

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Transaction2x2Pairing.G1Point',
            name: 'a',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256[2]',
                name: 'X',
                type: 'uint256[2]',
              },
              {
                internalType: 'uint256[2]',
                name: 'Y',
                type: 'uint256[2]',
              },
            ],
            internalType: 'struct Transaction2x2Pairing.G2Point',
            name: 'b',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Transaction2x2Pairing.G1Point',
            name: 'c',
            type: 'tuple',
          },
        ],
        internalType: 'struct Transaction2x2Verifier.Proof',
        name: 'proof',
        type: 'tuple',
      },
      {
        internalType: 'uint256[]',
        name: 'input',
        type: 'uint256[]',
      },
    ],
    name: 'verifyTx',
    outputs: [
      {
        internalType: 'bool',
        name: 'r',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50611517806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e366004611308565b610057565b604051901515815260200160405180910390f35b60008151600c146100ae5760405162461bcd60e51b815260206004820152601460248201527f696e76616c696420696e707574206c656e677468000000000000000000000000604482015260640160405180910390fd5b6100b882846100ce565b6100c4575060016100c8565b5060005b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100fa610251565b9050806080015151855160016101109190611414565b1461011a57600080fd5b604080518082019091526000808252602082018190525b86518110156101c8578387828151811061014d5761014d6114b5565b60200260200101511061015f57600080fd5b6101b4826101af85608001518460016101789190611414565b81518110610188576101886114b5565b60200260200101518a85815181106101a2576101a26114b5565b6020026020010151610b0a565b610b6e565b9150806101c081611462565b915050610131565b506101f18183608001516000815181106101e4576101e46114b5565b6020026020010151610b6e565b90506102358560000151866020015161020984610bc8565b856040015161021b8a60400151610bc8565b6060880151885161022b90610bc8565b8960200151610c67565b61024557600193505050506100c8565b50600095945050505050565b6102596110d2565b6040805180820182527f065d5bb66d1e5d5404d87a83b556bd2029ff0eabe82b77630701183d5163954481527f08dd321aab63b4a8c23bd09d585505008009a88ba7c3fba9638c3c0ddcbea9fa6020808301919091529083528151608080820184527f17175121abb6c818acbae333687834b781bd65ac86ead079d6665c57e92e8c3e8285019081527f20498321b07a3f2e7ed423f1a8deac0356f222a63d70700fe30bbce6c4b3dce9606080850191909152908352845180860186527f1b23a650a27e7e4037e6802c26583033e38140b4650b712f9383a256fd4dc79b81527f2e1b73811dd9f433ce81ccf90dc01697eb3045acd39caa8d7f79006f9e2c64bb818601528385015285840192909252835180820185527f285bfb022b14af3dcb15dd0b9236ec4331caf95d9c62b0f9228997ddb6ee00d58186019081527f0c446cadb9f62fa0d7d4fc5acd60cd434584883bcce09fc09ad0116d0546baeb828501528152845180860186527f09066cc0d305d39f17d541cf0bb7b46033e90756ad3d55c8e4fd465a931d3f9681527f12238a87848f2f6fbdda2eb2464fedd705e7f6d61510ac1a94922af0e25a6bf5818601528185015285850152835190810184527f26b884ce2d792dffb4f0726b2b162b5ba2839d67248de37b7eeed92f50f556c98185019081527f2e142687c06e33bbdc8543f4420d988ab6c71e4782bc405968b91a0bb4435467828401528152835180850185527f048a0a5edcd421010b1afe70530440dde5af1a1ae0857b2e00aa19b037ac317c81527f291db466d4457af5512a449a306daebfa93b83bea4b5d009591af80ba276e2e38185015281840152908401528151600d8082526101c08201909352919082015b60408051808201909152600080825260208201528152602001906001900390816104d557505060808201908152604080518082019091527f14de4c8a80c809fd6e2b6c8cba481abf2e42ef961d7425138f30976be08891ca81527f17cd58993a4976d717177f65dd37c476e94c5b90e0099f6077051b4c41ed8a0b602082015290518051600090610568576105686114b5565b602002602001018190525060405180604001604052807f1fc679e2d31bb98b18f2e56e9d97853815761d296b856e77d2c2be2aa0c1be2681526020017f0417588679766a60b4fb1d9315cbba0556d5baa68dbe3e37b0ef004bfc2f334281525081608001516001815181106105df576105df6114b5565b602002602001018190525060405180604001604052807f2b21633684bd6157e6053f882d363d7a644e2c3ea0988dc51866c9d7c4ee2b4181526020017f1217536a983d50ade3970714fc647666fa7b5250ee089ab0deb597d17f39d25d8152508160800151600281518110610656576106566114b5565b602002602001018190525060405180604001604052807f137c92ffcd4ee8da0b20c6578def3b8fd4e87f06ad884036cd0a336f3db1e95481526020017f153b74478c7708ba11473492c989b2e32a6d6fcebc130a18db581b2ab04f5aa181525081608001516003815181106106cd576106cd6114b5565b602002602001018190525060405180604001604052807f11c299a3f272e142ef97661a486ae2083c6c700c498ee3a2cdb584ea9e55201e81526020017f2e9d87519fb6bdd1fda29270d3f53644221bd842e05fadc0ba88b8627b15a0bc8152508160800151600481518110610744576107446114b5565b602002602001018190525060405180604001604052807f263a1166ce2ad3b9c3d4310ffb7d768b7d09b444a4b5f9bcdc964836c4891a1a81526020017f15933c4eefe48714be292abcf264025de9948248d6d563da42e67d3fbf42feda81525081608001516005815181106107bb576107bb6114b5565b602002602001018190525060405180604001604052807f114d3067d1fe4e08a7c03a9f3eabefb439809463f88867618d13d5c37e7df49e81526020017f243161e6b3590b9f05cc05681ee45e23dffbda7b6a22147c43a9f3944cac0fd88152508160800151600681518110610832576108326114b5565b602002602001018190525060405180604001604052807f0a3a423e141ec936aa3bae3b7781eb785eb3ac126bb603c90b8dd58a32246e6e81526020017f0f9eb08f041ff1b8fd266798458e82e63b39bbe65e23bf0a53fe16273bdee11481525081608001516007815181106108a9576108a96114b5565b602002602001018190525060405180604001604052807f1e742e7acb744dcff64b901123da42b7db70602e26ac80a0166622edf18215c081526020017f18d6c97501e2f1a23697e3dc35f29fd892ab9dd8eb57fb091caa42d09256d9a38152508160800151600881518110610920576109206114b5565b602002602001018190525060405180604001604052807f29e6d126854d425bd4081a60b39c0a3184eefdb7d23c41cc192c7ffb4ec606f581526020017f178440ef5d9add32370fe98e0b05a4ddcb1cba9f7ab5858cdcecc3c9b7e3ca0f8152508160800151600981518110610997576109976114b5565b602002602001018190525060405180604001604052807f0226b2abbe854d25d050f9f96ac77b72d137246b97280f08568f59deaf4c03b381526020017f17732912427b5f244ba6ed5dd672fba7d6221c1f824ad1cc487acf3112f1798f8152508160800151600a81518110610a0e57610a0e6114b5565b602002602001018190525060405180604001604052807f23e860d94ddb6c98db77f096ff7fedfc21d93e03d06ad88b1a7af1e2b47f34bc81526020017f238ecee727f142c8bd84047f5da4bd4ff21426bb848f6d127dac2ab8fedb77218152508160800151600b81518110610a8557610a856114b5565b602002602001018190525060405180604001604052807f297515785b32be6514f96a8359a94e6e48eb8e387066205098fac78ee431405181526020017f145057f2c0e4c04eca0e85d121f36e1c37b526afa513d73b08379dfa5c23b9468152508160800151600c81518110610afc57610afc6114b5565b602002602001018190525090565b6040805180820190915260008082526020820152610b26611123565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa9050808015610b5957610b5b565bfe5b5080610b6657600080fd5b505092915050565b6040805180820190915260008082526020820152610b8a611141565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa9050808015610b5957610b5b565b604080518082019091526000808252602082015281517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790158015610c0f57506020830151155b15610c2f5750506040805180820190915260008082526020820152919050565b604051806040016040528084600001518152602001828560200151610c54919061147d565b610c5e908461144b565b90529392505050565b60408051600480825260a08201909252600091829190816020015b6040805180820190915260008082526020820152815260200190600190039081610c8257505060408051600480825260a0820190925291925060009190602082015b610ccc61115f565b815260200190600190039081610cc45790505090508a82600081518110610cf557610cf56114b5565b60200260200101819052508882600181518110610d1457610d146114b5565b60200260200101819052508682600281518110610d3357610d336114b5565b60200260200101819052508482600381518110610d5257610d526114b5565b60200260200101819052508981600081518110610d7157610d716114b5565b60200260200101819052508781600181518110610d9057610d906114b5565b60200260200101819052508581600281518110610daf57610daf6114b5565b60200260200101819052508381600381518110610dce57610dce6114b5565b6020026020010181905250610de38282610df2565b9b9a5050505050505050505050565b60008151835114610e0257600080fd5b82516000610e1182600661142c565b905060008167ffffffffffffffff811115610e2e57610e2e6114cb565b604051908082528060200260200182016040528015610e57578160200160208202803683370190505b50905060005b8381101561109257868181518110610e7757610e776114b5565b60200260200101516000015182826006610e91919061142c565b610e9c906000611414565b81518110610eac57610eac6114b5565b602002602001018181525050868181518110610eca57610eca6114b5565b60200260200101516020015182826006610ee4919061142c565b610eef906001611414565b81518110610eff57610eff6114b5565b602002602001018181525050858181518110610f1d57610f1d6114b5565b60209081029190910181015151015182610f3883600661142c565b610f43906002611414565b81518110610f5357610f536114b5565b602002602001018181525050858181518110610f7157610f716114b5565b6020908102919091010151515182610f8a83600661142c565b610f95906003611414565b81518110610fa557610fa56114b5565b602002602001018181525050858181518110610fc357610fc36114b5565b602002602001015160200151600160028110610fe157610fe16114b5565b602002015182610ff283600661142c565b610ffd906004611414565b8151811061100d5761100d6114b5565b60200260200101818152505085818151811061102b5761102b6114b5565b602002602001015160200151600060028110611049576110496114b5565b60200201518261105a83600661142c565b611065906005611414565b81518110611075576110756114b5565b60209081029190910101528061108a81611462565b915050610e5d565b5061109b611184565b6000602082602086026020860160086107d05a03fa9050808015610b595750806110c457600080fd5b505115159695505050505050565b6040805160e08101909152600060a0820181815260c08301919091528152602081016110fc61115f565b815260200161110961115f565b815260200161111661115f565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806111726111a2565b815260200161117f6111a2565b905290565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b600082601f8301126111d157600080fd5b6111d96113c8565b8083856040860111156111eb57600080fd5b60005b600281101561120d5781358452602093840193909101906001016111ee565b509095945050505050565b600082601f83011261122957600080fd5b8135602067ffffffffffffffff80831115611246576112466114cb565b8260051b604051601f19603f8301168101818110848211171561126b5761126b6114cb565b6040528481528381019250868401828801850189101561128a57600080fd5b600092505b858310156112ad57803584529284019260019290920191840161128f565b50979650505050505050565b6000604082840312156112cb57600080fd5b6040516040810181811067ffffffffffffffff821117156112ee576112ee6114cb565b604052823581526020928301359281019290925250919050565b60008082840361012081121561131d57600080fd5b6101008082121561132d57600080fd5b6113356113f1565b61133f87876112b9565b81526080603f198401121561135357600080fd5b61135b6113c8565b925061136a87604088016111c0565b835261137987608088016111c0565b60208401528260208201526113918760c088016112b9565b60408201529350840135905067ffffffffffffffff8111156113b257600080fd5b6113be85828601611218565b9150509250929050565b6040805190810167ffffffffffffffff811182821017156113eb576113eb6114cb565b60405290565b6040516060810167ffffffffffffffff811182821017156113eb576113eb6114cb565b600082198211156114275761142761149f565b500190565b60008160001904831182151516156114465761144661149f565b500290565b60008282101561145d5761145d61149f565b500390565b60006000198214156114765761147661149f565b5060010190565b60008261149a57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220179073127ceea82746e15ec0d6bd8d550af2615ccca9bff87735b3ae4405d56864736f6c63430008070033';

type Transaction2x2VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Transaction2x2VerifierConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Transaction2x2Verifier__factory extends ContractFactory {
  constructor(...args: Transaction2x2VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Transaction2x2Verifier';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Transaction2x2Verifier> {
    return super.deploy(overrides || {}) as Promise<Transaction2x2Verifier>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Transaction2x2Verifier {
    return super.attach(address) as Transaction2x2Verifier;
  }
  connect(signer: Signer): Transaction2x2Verifier__factory {
    return super.connect(signer) as Transaction2x2Verifier__factory;
  }
  static readonly contractName: 'Transaction2x2Verifier';
  public readonly contractName: 'Transaction2x2Verifier';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Transaction2x2VerifierInterface {
    return new utils.Interface(_abi) as Transaction2x2VerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Transaction2x2Verifier {
    return new Contract(address, _abi, signerOrProvider) as Transaction2x2Verifier;
  }
}
