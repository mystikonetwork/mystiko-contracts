/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Transaction2x2Verifier, Transaction2x2VerifierInterface } from '../Transaction2x2Verifier';

const _abi = [
  {
    inputs: [],
    name: 'InvalidParam',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotOnCurve',
    type: 'error',
  },
  {
    inputs: [],
    name: 'StaticCallFailed',
    type: 'error',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'a',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256[2]',
                name: 'X',
                type: 'uint256[2]',
              },
              {
                internalType: 'uint256[2]',
                name: 'Y',
                type: 'uint256[2]',
              },
            ],
            internalType: 'struct Pairing.G2Point',
            name: 'b',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'c',
            type: 'tuple',
          },
        ],
        internalType: 'struct VerifierLib.Proof',
        name: 'proof',
        type: 'tuple',
      },
      {
        internalType: 'uint256[]',
        name: 'input',
        type: 'uint256[]',
      },
    ],
    name: 'verifyTx',
    outputs: [
      {
        internalType: 'bool',
        name: 'r',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50611971806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e36600461176b565b610057565b604051901515815260200160405180910390f35b60008151600c1461007b57604051633494a40d60e21b815260040160405180910390fd5b610085828461008c565b9392505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100b86103ff565b9050806080015151855160016100ce9190611877565b146100ec57604051633494a40d60e21b815260040160405180910390fd5b835151821161010e57604051633494a40d60e21b815260040160405180910390fd5b835160200151821161013357604051633494a40d60e21b815260040160405180910390fd5b60208401515151821161015957604051633494a40d60e21b815260040160405180910390fd5b602084810151015151821161018157604051633494a40d60e21b815260040160405180910390fd5b60208481015151015182116101a957604051633494a40d60e21b815260040160405180910390fd5b602084810151810151015182116101d357604051633494a40d60e21b815260040160405180910390fd5b60408401515182116101f857604051633494a40d60e21b815260040160405180910390fd5b818460400151602001511061022057604051633494a40d60e21b815260040160405180910390fd5b835161022b90610cb6565b610248576040516361586bdd60e01b815260040160405180910390fd5b6102558460200151610d2e565b610272576040516361586bdd60e01b815260040160405180910390fd5b61027f8460400151610cb6565b61029c576040516361586bdd60e01b815260040160405180910390fd5b60006102dc604051806040016040528060008152602001600081525083608001516000815181106102cf576102cf61190f565b6020026020010151610e18565b905060005b865181101561038c57838782815181106102fd576102fd61190f565b60200260200101511061032357604051633494a40d60e21b815260040160405180910390fd5b61037882610373856080015184600161033c9190611877565b8151811061034c5761034c61190f565b60200260200101518a85815181106103665761036661190f565b6020026020010151610e95565b610e18565b915080610384816118a6565b9150506102e1565b5061039681610cb6565b6103b3576040516361586bdd60e01b815260040160405180910390fd5b6103f5856000015186602001516103c984610ee4565b85604001516103db8a60400151610ee4565b606088015188516103eb90610ee4565b8960200151610f92565b9695505050505050565b610407611535565b6040805180820182527f139f81d4be96daa6a72fb302e737ed667178701b1e242693b186cdc65c4689aa81527f0f5a05bf7d3cfb0870a296005b98ca9c59089c9c8e5a87da1141a0993dddf7ea6020808301919091529083528151608080820184527f1f9b1a72006721d3a229be18a46995c5be8582529e762453d88cafb6c53b8cba8285019081527f163bdc8bba3bccaf15bbcc603adc08b37b6d234877e83de5ab5c92b8054885d4606080850191909152908352845180860186527e219a2e93b0f9d6a9f65a4a94d5c593f3b579a964d9e4660a9c0412a258898981527f160877f13dabac279b0a6616b9489f92ca72e56cbe7ba7f08c47a6a5f3bb762c818601528385015285840192909252835180820185527f1689a5e0e68428af0328a161ae2550d3487ada0bdee8cc6976236deac9ac66908186019081527f1744300104c4d22a143586f36ea27a1ecdbb9fbd2067824c660eeac7cc15e433828501528152845180860186527f1de3675bcd5b04efc6ba5baf1142571f96752147a4e26170141c6396482daeb981527f2e36b88fc855b445ea945d9037a1ad21ab436f49299b03ffd2a7990ac93930e9818601528185015285850152835190810184527f286b53e141fee118cd7077116da717f9dec18f5004a5520a4696cb15ab29feb38185019081527e8ac66ede7fdfc053f3adef717bfc0fcef7228d37686456bd2035922f992d51828401528152835180850185527f2ff6e1e1cf1b043388c5b9b6dcdea9fd5849e0211fe7e429436a89d6708f58bd81527f0c1e484d2cf267575c2c28c0e5ab4d546d909274c4a64ed7d99b4970d6a38d758185015281840152908401528151600d8082526101c08201909352919082015b604080518082019091526000808252602082015281526020019060019003908161068157505060808201908152604080518082019091527f102c7f3fa321d9fef47b7f4e7250d3c4483ef5637bf7f3c1b49bcbb242fae2a581527f11223f9506589df27292673f889bf90bcea0ea0854f793d0d1e9b652162538886020820152905180516000906107145761071461190f565b602002602001018190525060405180604001604052807f18bfa3d6ae7b850a36f7b8b8535ae7cc2ea4d15964831dc752915e1a88eaa1d081526020017f0c183b00e5ce6b64305dd868d00e6e8dce6a0592778154b99b9df8223681d57d815250816080015160018151811061078b5761078b61190f565b602002602001018190525060405180604001604052807f143cf5b3211f0e50dba763ad8d9ebcdd8f13ae8479b88daa97851c3f9f6046c881526020017f1f850ef125e9d7353277fb30fd792f6ca5d2976170d4ab903831af637cf1f47281525081608001516002815181106108025761080261190f565b602002602001018190525060405180604001604052807f0ec686da43f90d52423b4dc31a79491705b2a2299d3958628e38dd4f713e5b1281526020017f2d59bbedecf120d9a6649cf16bb5ccc15b7f136b55d1a811bb71a5d64406edd781525081608001516003815181106108795761087961190f565b602002602001018190525060405180604001604052807f0431637e5dc41d217ef3a3022bdb68f99ec82c051d1bbf431a67c2e3fcebb5c981526020017f10866db230554c591bd00d1a101050f4a86e629b59aa891f497953f8d46f97fa81525081608001516004815181106108f0576108f061190f565b602002602001018190525060405180604001604052807f15625679365a48cdc44cb699dccfc32cb756ac3a22cd5f81b53fd60040fe4ff081526020017f0eeaa90ed575ccb00c9e48a12c21766cf65a11f637ceae80f9271d573e5ef09481525081608001516005815181106109675761096761190f565b602002602001018190525060405180604001604052807f1021c30347c64dfd5ab72af915943fd4f80d589ab6584990bb5f90f45f6012ff81526020017f04325e5a0dd2d49dda738573174f6d413a37ad62d9f4ea95adc207767ae330eb81525081608001516006815181106109de576109de61190f565b602002602001018190525060405180604001604052807f014da6121450352820cefdb3379aae88ea61867bfafad99874f60875ae6bca8381526020017f1dddb2f99694d7dff2136012f3d633f3b191be4a4e1de28458d6eb0526b1b7208152508160800151600781518110610a5557610a5561190f565b602002602001018190525060405180604001604052807f0ecfe24a340034b9f80096357c0c59572e573c610a561ca417bc297783c0320581526020017f04dceee94e3f8d1d8a621076c72ca81b5901fb4472dc7afd7fc7edc5c192793e8152508160800151600881518110610acc57610acc61190f565b602002602001018190525060405180604001604052807f2396dce873de1e34580ff308f38a665b2f4f4773527abc8380a1be7ba645578481526020017f111bfb2d696099cf8a59a841b02a458a816dbe133c540e25c3bfe5eae826d7078152508160800151600981518110610b4357610b4361190f565b602002602001018190525060405180604001604052807f1680240d849261223e4f7c4b4cada4dc897a05fa88263068289df8066715885c81526020017f11ec33b16bd90b3f509e0e8ad5e0796bc93bfca3ecdde25e5149a6013bd15bee8152508160800151600a81518110610bba57610bba61190f565b602002602001018190525060405180604001604052807f0d73707cd045c8940e5872921e079d50052118ddfe25b4d4ca07295f0fa2c65e81526020017f179c2edb8c6775c3a288513ebc881d3edc2735975efbc5a97e502d6c481c76758152508160800151600b81518110610c3157610c3161190f565b602002602001018190525060405180604001604052807f10316ff241df31d1a4cbab446de82498f309a6ea439b58a9fb1300dcd8fa98f981526020017f01893da93ef65d49576a4fc9a98d846bc53f1bbd1b8f9b7ed57c6599760057438152508160800151600c81518110610ca857610ca861190f565b602002602001018190525090565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610ce48160036118c1565b8180610cf257610cf26118f9565b84518380610d0257610d026118f9565b86518009098280610d1557610d156118f9565b60208601518009610d26919061188f565b149392505050565b6020818101518051918101516000927f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5927e9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d2928592839283928392610d9e92909190829060015b60200201516113f3565b895180516020820151939750919550610dc3929060005b60200201518b516001610d94565b89519193509150610dd990839083906000610db5565b9092509050610dea84848484611474565b9094509250610dfb84848888611474565b909450925083158015610e0c575082155b98975050505050505050565b6040805180820190915260008082526020820152610e34611586565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa905080801561002b575b5080610e8d57604051633842fc7360e21b815260040160405180910390fd5b505092915050565b6040805180820190915260008082526020820152610eb16115a4565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa905080801561002b57610e6e565b604080518082019091526000808252602082015260208201517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790610f4f576040518060400160405280828560000151610f3e91906118c1565b815260006020909101529392505050565b6040518060400160405280828560000151610f6a91906118c1565b8152602001828560200151610f7f91906118c1565b610f89908461188f565b90529392505050565b60408051601880825261032082019092526000919082908260208201610300803683370190505090508a6000015181600081518110610fd357610fd361190f565b6020026020010181815250508a6020015181600181518110610ff757610ff761190f565b60209081029190910101528951600160200201518160028151811061101e5761101e61190f565b60209081029190910101528951518151829060039081106110415761104161190f565b60200260200101818152505089602001516001600281106110645761106461190f565b60200201518160048151811061107c5761107c61190f565b602002602001018181525050896020015160006002811061109f5761109f61190f565b6020020151816005815181106110b7576110b761190f565b6020026020010181815250508860000151816006815181106110db576110db61190f565b6020026020010181815250508860200151816007815181106110ff576110ff61190f565b6020908102919091010152875160016020020151816008815181106111265761112661190f565b60209081029190910101528751518151829060099081106111495761114961190f565b602002602001018181525050876020015160016002811061116c5761116c61190f565b602002015181600a815181106111845761118461190f565b60200260200101818152505087602001516000600281106111a7576111a761190f565b602002015181600b815181106111bf576111bf61190f565b602002602001018181525050866000015181600c815181106111e3576111e361190f565b602002602001018181525050866020015181600d815181106112075761120761190f565b602090810291909101015285516001602002015181600e8151811061122e5761122e61190f565b602090810291909101015285515181518290600f9081106112515761125161190f565b60200260200101818152505085602001516001600281106112745761127461190f565b60200201518160108151811061128c5761128c61190f565b60200260200101818152505085602001516000600281106112af576112af61190f565b6020020151816011815181106112c7576112c761190f565b6020026020010181815250508460000151816012815181106112eb576112eb61190f565b60200260200101818152505084602001518160138151811061130f5761130f61190f565b6020908102919091010152835160016020020151816014815181106113365761133661190f565b60209081029190910101528351518151829060159081106113595761135961190f565b602002602001018181525050836020015160016002811061137c5761137c61190f565b6020020151816016815181106113945761139461190f565b60200260200101818152505083602001516000600281106113b7576113b761190f565b6020020151816017815181106113cf576113cf61190f565b6020026020010181815250506113e4816114bc565b9b9a5050505050505050505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761143581868909828061142c5761142c6118f9565b86890983611511565b8180611443576114436118f9565b8280611451576114516118f9565b8789098380611462576114626118f9565b878b0908925092505094509492505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476114a3878683611511565b6114ae878684611511565b925092505094509492505050565b80516000906114c96115c2565b6000602082602085026020880160086107d05a03fa905080801561002b57508061150657604051633842fc7360e21b815260040160405180910390fd5b505115159392505050565b60008180611521576115216118f9565b61152b848461188f565b8508949350505050565b6040805160e08101909152600060a0820181815260c083019190915281526020810161155f6115e0565b815260200161156c6115e0565b81526020016115796115e0565b8152602001606081525090565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806115f3611605565b8152602001611600611605565b905290565b60405180604001604052806002906020820280368337509192915050565b600082601f83011261163457600080fd5b61163c61182b565b80838560408601111561164e57600080fd5b60005b6002811015611670578135845260209384019390910190600101611651565b509095945050505050565b600082601f83011261168c57600080fd5b8135602067ffffffffffffffff808311156116a9576116a9611925565b8260051b604051601f19603f830116810181811084821117156116ce576116ce611925565b604052848152838101925086840182880185018910156116ed57600080fd5b600092505b858310156117105780358452928401926001929092019184016116f2565b50979650505050505050565b60006040828403121561172e57600080fd5b6040516040810181811067ffffffffffffffff8211171561175157611751611925565b604052823581526020928301359281019290925250919050565b60008082840361012081121561178057600080fd5b6101008082121561179057600080fd5b611798611854565b6117a2878761171c565b81526080603f19840112156117b657600080fd5b6117be61182b565b92506117cd8760408801611623565b83526117dc8760808801611623565b60208401528260208201526117f48760c0880161171c565b60408201529350840135905067ffffffffffffffff81111561181557600080fd5b6118218582860161167b565b9150509250929050565b6040805190810167ffffffffffffffff8111828210171561184e5761184e611925565b60405290565b6040516060810167ffffffffffffffff8111828210171561184e5761184e611925565b6000821982111561188a5761188a6118e3565b500190565b6000828210156118a1576118a16118e3565b500390565b60006000198214156118ba576118ba6118e3565b5060010190565b6000826118de57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220928848df4840f7936606190f13e8d52fe87ba68ff5f8a1835cd50d94716e3a1c64736f6c63430008070033';

type Transaction2x2VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Transaction2x2VerifierConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Transaction2x2Verifier__factory extends ContractFactory {
  constructor(...args: Transaction2x2VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Transaction2x2Verifier';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Transaction2x2Verifier> {
    return super.deploy(overrides || {}) as Promise<Transaction2x2Verifier>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Transaction2x2Verifier {
    return super.attach(address) as Transaction2x2Verifier;
  }
  connect(signer: Signer): Transaction2x2Verifier__factory {
    return super.connect(signer) as Transaction2x2Verifier__factory;
  }
  static readonly contractName: 'Transaction2x2Verifier';
  public readonly contractName: 'Transaction2x2Verifier';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Transaction2x2VerifierInterface {
    return new utils.Interface(_abi) as Transaction2x2VerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Transaction2x2Verifier {
    return new Contract(address, _abi, signerOrProvider) as Transaction2x2Verifier;
  }
}
