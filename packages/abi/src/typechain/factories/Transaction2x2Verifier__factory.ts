/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Transaction2x2Verifier, Transaction2x2VerifierInterface } from '../Transaction2x2Verifier';

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Transaction2x2Pairing.G1Point',
            name: 'a',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256[2]',
                name: 'X',
                type: 'uint256[2]',
              },
              {
                internalType: 'uint256[2]',
                name: 'Y',
                type: 'uint256[2]',
              },
            ],
            internalType: 'struct Transaction2x2Pairing.G2Point',
            name: 'b',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Transaction2x2Pairing.G1Point',
            name: 'c',
            type: 'tuple',
          },
        ],
        internalType: 'struct Transaction2x2Verifier.Proof',
        name: 'proof',
        type: 'tuple',
      },
      {
        internalType: 'uint256[]',
        name: 'input',
        type: 'uint256[]',
      },
    ],
    name: 'verifyTx',
    outputs: [
      {
        internalType: 'bool',
        name: 'r',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50611892806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e36600461164d565b610057565b604051901515815260200160405180910390f35b60008151600c146100ae5760405162461bcd60e51b815260206004820152601460248201527f696e76616c696420696e707574206c656e677468000000000000000000000000604482015260640160405180910390fd5b6100b882846100ce565b6100c4575060016100c8565b5060005b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100fa610337565b9050806080015151855160016101109190611759565b1461011a57600080fd5b835151821161012857600080fd5b835160200151821161013957600080fd5b60208401515151821161014b57600080fd5b602084810151015151821161015f57600080fd5b602084810151510151821161017357600080fd5b6020848101518101510151821161018957600080fd5b604084015151821161019a57600080fd5b81846040015160200151106101ae57600080fd5b83516101b990610bf0565b6101c257600080fd5b6101cf8460200151610c57565b6101d857600080fd5b6101e58460400151610bf0565b6101ee57600080fd5b604080518082019091526000808252602082018190525b865181101561029c578387828151811061022157610221611810565b60200260200101511061023357600080fd5b61028882610283856080015184600161024c9190611759565b8151811061025c5761025c611810565b60200260200101518a858151811061027657610276611810565b6020026020010151610d8e565b610df2565b915080610294816117a7565b915050610205565b506102c58183608001516000815181106102b8576102b8611810565b6020026020010151610df2565b90506102d081610bf0565b6102d957600080fd5b61031b856000015186602001516102ef84610e4c565b85604001516103018a60400151610e4c565b6060880151885161031190610e4c565b8960200151610ed5565b61032b57600193505050506100c8565b50600095945050505050565b61033f611417565b6040805180820182527f065d5bb66d1e5d5404d87a83b556bd2029ff0eabe82b77630701183d5163954481527f08dd321aab63b4a8c23bd09d585505008009a88ba7c3fba9638c3c0ddcbea9fa6020808301919091529083528151608080820184527f17175121abb6c818acbae333687834b781bd65ac86ead079d6665c57e92e8c3e8285019081527f20498321b07a3f2e7ed423f1a8deac0356f222a63d70700fe30bbce6c4b3dce9606080850191909152908352845180860186527f1b23a650a27e7e4037e6802c26583033e38140b4650b712f9383a256fd4dc79b81527f2e1b73811dd9f433ce81ccf90dc01697eb3045acd39caa8d7f79006f9e2c64bb818601528385015285840192909252835180820185527f285bfb022b14af3dcb15dd0b9236ec4331caf95d9c62b0f9228997ddb6ee00d58186019081527f0c446cadb9f62fa0d7d4fc5acd60cd434584883bcce09fc09ad0116d0546baeb828501528152845180860186527f09066cc0d305d39f17d541cf0bb7b46033e90756ad3d55c8e4fd465a931d3f9681527f12238a87848f2f6fbdda2eb2464fedd705e7f6d61510ac1a94922af0e25a6bf5818601528185015285850152835190810184527f26b884ce2d792dffb4f0726b2b162b5ba2839d67248de37b7eeed92f50f556c98185019081527f2e142687c06e33bbdc8543f4420d988ab6c71e4782bc405968b91a0bb4435467828401528152835180850185527f048a0a5edcd421010b1afe70530440dde5af1a1ae0857b2e00aa19b037ac317c81527f291db466d4457af5512a449a306daebfa93b83bea4b5d009591af80ba276e2e38185015281840152908401528151600d8082526101c08201909352919082015b60408051808201909152600080825260208201528152602001906001900390816105bb57505060808201908152604080518082019091527f14de4c8a80c809fd6e2b6c8cba481abf2e42ef961d7425138f30976be08891ca81527f17cd58993a4976d717177f65dd37c476e94c5b90e0099f6077051b4c41ed8a0b60208201529051805160009061064e5761064e611810565b602002602001018190525060405180604001604052807f1fc679e2d31bb98b18f2e56e9d97853815761d296b856e77d2c2be2aa0c1be2681526020017f0417588679766a60b4fb1d9315cbba0556d5baa68dbe3e37b0ef004bfc2f334281525081608001516001815181106106c5576106c5611810565b602002602001018190525060405180604001604052807f2b21633684bd6157e6053f882d363d7a644e2c3ea0988dc51866c9d7c4ee2b4181526020017f1217536a983d50ade3970714fc647666fa7b5250ee089ab0deb597d17f39d25d815250816080015160028151811061073c5761073c611810565b602002602001018190525060405180604001604052807f137c92ffcd4ee8da0b20c6578def3b8fd4e87f06ad884036cd0a336f3db1e95481526020017f153b74478c7708ba11473492c989b2e32a6d6fcebc130a18db581b2ab04f5aa181525081608001516003815181106107b3576107b3611810565b602002602001018190525060405180604001604052807f11c299a3f272e142ef97661a486ae2083c6c700c498ee3a2cdb584ea9e55201e81526020017f2e9d87519fb6bdd1fda29270d3f53644221bd842e05fadc0ba88b8627b15a0bc815250816080015160048151811061082a5761082a611810565b602002602001018190525060405180604001604052807f263a1166ce2ad3b9c3d4310ffb7d768b7d09b444a4b5f9bcdc964836c4891a1a81526020017f15933c4eefe48714be292abcf264025de9948248d6d563da42e67d3fbf42feda81525081608001516005815181106108a1576108a1611810565b602002602001018190525060405180604001604052807f114d3067d1fe4e08a7c03a9f3eabefb439809463f88867618d13d5c37e7df49e81526020017f243161e6b3590b9f05cc05681ee45e23dffbda7b6a22147c43a9f3944cac0fd8815250816080015160068151811061091857610918611810565b602002602001018190525060405180604001604052807f0a3a423e141ec936aa3bae3b7781eb785eb3ac126bb603c90b8dd58a32246e6e81526020017f0f9eb08f041ff1b8fd266798458e82e63b39bbe65e23bf0a53fe16273bdee114815250816080015160078151811061098f5761098f611810565b602002602001018190525060405180604001604052807f1e742e7acb744dcff64b901123da42b7db70602e26ac80a0166622edf18215c081526020017f18d6c97501e2f1a23697e3dc35f29fd892ab9dd8eb57fb091caa42d09256d9a38152508160800151600881518110610a0657610a06611810565b602002602001018190525060405180604001604052807f29e6d126854d425bd4081a60b39c0a3184eefdb7d23c41cc192c7ffb4ec606f581526020017f178440ef5d9add32370fe98e0b05a4ddcb1cba9f7ab5858cdcecc3c9b7e3ca0f8152508160800151600981518110610a7d57610a7d611810565b602002602001018190525060405180604001604052807f0226b2abbe854d25d050f9f96ac77b72d137246b97280f08568f59deaf4c03b381526020017f17732912427b5f244ba6ed5dd672fba7d6221c1f824ad1cc487acf3112f1798f8152508160800151600a81518110610af457610af4611810565b602002602001018190525060405180604001604052807f23e860d94ddb6c98db77f096ff7fedfc21d93e03d06ad88b1a7af1e2b47f34bc81526020017f238ecee727f142c8bd84047f5da4bd4ff21426bb848f6d127dac2ab8fedb77218152508160800151600b81518110610b6b57610b6b611810565b602002602001018190525060405180604001604052807f297515785b32be6514f96a8359a94e6e48eb8e387066205098fac78ee431405181526020017f145057f2c0e4c04eca0e85d121f36e1c37b526afa513d73b08379dfa5c23b9468152508160800151600c81518110610be257610be2611810565b602002602001018190525090565b6000610c0b60008051602061183d83398151915260036117c2565b60008051602061183d833981519152835160008051602061183d833981519152855180090960008051602061183d83398151915260208501518009610c509190611790565b1492915050565b6000806000806000610cd78660200151600060028110610c7957610c79611810565b60200201518760200151600160028110610c9557610c95611810565b60200201518860200151600060028110610cb157610cb1611810565b60200201518960200151600160028110610ccd57610ccd611810565b6020020151611060565b875180516020820151939750919550610cfc929060005b602002015189516001610ccd565b87519193509150610d1290839083906000610cee565b9092509050610d23848484846110d1565b9094509250610d7384847f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e57e9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d26110d1565b909450925083158015610d84575082155b9695505050505050565b6040805180820190915260008082526020820152610daa611468565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa9050808015610ddd57610ddf565bfe5b5080610dea57600080fd5b505092915050565b6040805180820190915260008082526020820152610e0e611486565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa9050808015610ddd57610ddf565b60408051808201909152600080825260208201526020820151610e82575060408051808201909152905181526000602082015290565b60405180604001604052808360000151815260200160008051602061183d8339815191528460200151610eb591906117c2565b610ecd9060008051602061183d833981519152611790565b905292915050565b60408051600480825260a08201909252600091829190816020015b6040805180820190915260008082526020820152815260200190600190039081610ef057505060408051600480825260a0820190925291925060009190602082015b610f3a6114a4565b815260200190600190039081610f325790505090508a82600081518110610f6357610f63611810565b60200260200101819052508882600181518110610f8257610f82611810565b60200260200101819052508682600281518110610fa157610fa1611810565b60200260200101819052508482600381518110610fc057610fc0611810565b60200260200101819052508981600081518110610fdf57610fdf611810565b60200260200101819052508781600181518110610ffe57610ffe611810565b6020026020010181905250858160028151811061101d5761101d611810565b6020026020010181905250838160038151811061103c5761103c611810565b60200260200101819052506110518282611113565b9b9a5050505050505050505050565b60008061109e60008051602061183d83398151915285880960008051602061183d83398151915285880960008051602061183d8339815191526113f3565b60008051602061183d8339815191528086880960008051602061183d833981519152868a09089150915094509492505050565b6000806110ed868560008051602061183d8339815191526113f3565b611106868560008051602061183d8339815191526113f3565b9150915094509492505050565b6000815183511461112357600080fd5b82516000611132826006611771565b905060008167ffffffffffffffff81111561114f5761114f611826565b604051908082528060200260200182016040528015611178578160200160208202803683370190505b50905060005b838110156113b35786818151811061119857611198611810565b602002602001015160000151828260066111b29190611771565b6111bd906000611759565b815181106111cd576111cd611810565b6020026020010181815250508681815181106111eb576111eb611810565b602002602001015160200151828260066112059190611771565b611210906001611759565b8151811061122057611220611810565b60200260200101818152505085818151811061123e5761123e611810565b60209081029190910181015151015182611259836006611771565b611264906002611759565b8151811061127457611274611810565b60200260200101818152505085818151811061129257611292611810565b60209081029190910101515151826112ab836006611771565b6112b6906003611759565b815181106112c6576112c6611810565b6020026020010181815250508581815181106112e4576112e4611810565b60200260200101516020015160016002811061130257611302611810565b602002015182611313836006611771565b61131e906004611759565b8151811061132e5761132e611810565b60200260200101818152505085818151811061134c5761134c611810565b60200260200101516020015160006002811061136a5761136a611810565b60200201518261137b836006611771565b611386906005611759565b8151811061139657611396611810565b6020908102919091010152806113ab816117a7565b91505061117e565b506113bc6114c9565b6000602082602086026020860160086107d05a03fa9050808015610ddd5750806113e557600080fd5b505115159695505050505050565b60008180611403576114036117fa565b61140d8484611790565b8508949350505050565b6040805160e08101909152600060a0820181815260c08301919091528152602081016114416114a4565b815260200161144e6114a4565b815260200161145b6114a4565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806114b76114e7565b81526020016114c46114e7565b905290565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b600082601f83011261151657600080fd5b61151e61170d565b80838560408601111561153057600080fd5b60005b6002811015611552578135845260209384019390910190600101611533565b509095945050505050565b600082601f83011261156e57600080fd5b8135602067ffffffffffffffff8083111561158b5761158b611826565b8260051b604051601f19603f830116810181811084821117156115b0576115b0611826565b604052848152838101925086840182880185018910156115cf57600080fd5b600092505b858310156115f25780358452928401926001929092019184016115d4565b50979650505050505050565b60006040828403121561161057600080fd5b6040516040810181811067ffffffffffffffff8211171561163357611633611826565b604052823581526020928301359281019290925250919050565b60008082840361012081121561166257600080fd5b6101008082121561167257600080fd5b61167a611736565b61168487876115fe565b81526080603f198401121561169857600080fd5b6116a061170d565b92506116af8760408801611505565b83526116be8760808801611505565b60208401528260208201526116d68760c088016115fe565b60408201529350840135905067ffffffffffffffff8111156116f757600080fd5b6117038582860161155d565b9150509250929050565b6040805190810167ffffffffffffffff8111828210171561173057611730611826565b60405290565b6040516060810167ffffffffffffffff8111828210171561173057611730611826565b6000821982111561176c5761176c6117e4565b500190565b600081600019048311821515161561178b5761178b6117e4565b500290565b6000828210156117a2576117a26117e4565b500390565b60006000198214156117bb576117bb6117e4565b5060010190565b6000826117df57634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a2646970667358221220377e02c1b6b5d1b315cc376c22d7185d452fa63f0be8fd495db8020a5381d84e64736f6c63430008070033';

type Transaction2x2VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Transaction2x2VerifierConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Transaction2x2Verifier__factory extends ContractFactory {
  constructor(...args: Transaction2x2VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Transaction2x2Verifier';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Transaction2x2Verifier> {
    return super.deploy(overrides || {}) as Promise<Transaction2x2Verifier>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Transaction2x2Verifier {
    return super.attach(address) as Transaction2x2Verifier;
  }
  connect(signer: Signer): Transaction2x2Verifier__factory {
    return super.connect(signer) as Transaction2x2Verifier__factory;
  }
  static readonly contractName: 'Transaction2x2Verifier';
  public readonly contractName: 'Transaction2x2Verifier';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Transaction2x2VerifierInterface {
    return new utils.Interface(_abi) as Transaction2x2VerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Transaction2x2Verifier {
    return new Contract(address, _abi, signerOrProvider) as Transaction2x2Verifier;
  }
}
