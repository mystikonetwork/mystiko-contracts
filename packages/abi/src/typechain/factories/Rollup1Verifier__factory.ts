/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Rollup1Verifier, Rollup1VerifierInterface } from '../Rollup1Verifier';

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Rollup1Pairing.G1Point',
            name: 'a',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256[2]',
                name: 'X',
                type: 'uint256[2]',
              },
              {
                internalType: 'uint256[2]',
                name: 'Y',
                type: 'uint256[2]',
              },
            ],
            internalType: 'struct Rollup1Pairing.G2Point',
            name: 'b',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Rollup1Pairing.G1Point',
            name: 'c',
            type: 'tuple',
          },
        ],
        internalType: 'struct Rollup1Verifier.Proof',
        name: 'proof',
        type: 'tuple',
      },
      {
        internalType: 'uint256[]',
        name: 'input',
        type: 'uint256[]',
      },
    ],
    name: 'verifyTx',
    outputs: [
      {
        internalType: 'bool',
        name: 'r',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506114d9806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e366004611294565b610057565b604051901515815260200160405180910390f35b600081516004146100ae5760405162461bcd60e51b815260206004820152601460248201527f696e76616c696420696e707574206c656e677468000000000000000000000000604482015260640160405180910390fd5b6100b882846100ce565b6100c4575060016100c8565b5060005b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100fa610337565b90508060800151518551600161011091906113a0565b1461011a57600080fd5b835151821161012857600080fd5b835160200151821161013957600080fd5b60208401515151821161014b57600080fd5b602084810151015151821161015f57600080fd5b602084810151510151821161017357600080fd5b6020848101518101510151821161018957600080fd5b604084015151821161019a57600080fd5b81846040015160200151106101ae57600080fd5b83516101b990610837565b6101c257600080fd5b6101cf846020015161089e565b6101d857600080fd5b6101e58460400151610837565b6101ee57600080fd5b604080518082019091526000808252602082018190525b865181101561029c578387828151811061022157610221611457565b60200260200101511061023357600080fd5b61028882610283856080015184600161024c91906113a0565b8151811061025c5761025c611457565b60200260200101518a858151811061027657610276611457565b60200260200101516109d5565b610a39565b915080610294816113ee565b915050610205565b506102c58183608001516000815181106102b8576102b8611457565b6020026020010151610a39565b90506102d081610837565b6102d957600080fd5b61031b856000015186602001516102ef84610a93565b85604001516103018a60400151610a93565b6060880151885161031190610a93565b8960200151610b1c565b61032b57600193505050506100c8565b50600095945050505050565b61033f61105e565b6040805180820182527f0c4dd0ffbf5c0fdfb5a643f136a855cc8a2bcbae3d492f5dd5eb55f6a52f011981527f1fef20c8903873d5291e18da782fa848cac11d1f608ebb462ad9f6eef0ae00bd6020808301919091529083528151608080820184527f0ce31200f558b0b967d1e46c87b19359d114ed91ca42a6b03da22cadaf9a20c18285019081527f222e74ebfd2f71a21ff6daf32d81a2531cd5034295cb7b6576d35d34a13a0213606080850191909152908352845180860186527f158aaf2b35114932d2a9e43691006c03534238d9c96e6f8f98fbc67a3a1679d381527f121b8bf8d7f71a4ea7b92606499fa8b069f0555db10f9698afdc3d1ed0f8b2a9818601528385015285840192909252835180820185527f2ef542277ceaba03403474f9dd470f33623c1f1ad9d763dcc8ab2a42b5dc7ade8186019081527f13321cd86c90515779531491bef7dd4893e82d5cdc89c5b649392d9d53e1ffd2828501528152845180860186527f12f0901e6c11352616e3767cb9daa861732d04e18eba8b1d02971034d99b99da81527f105a2141c628aaa34a646fe0acbb703e1f6dbeca6c46ec15fb54d71d9cb87c70818601528185015285850152835190810184527f0b16d0bf4a4f184c217eac98caffc091e6ffa86afaae21f577d7ca8b88e5f31e8185019081527f1a45e7a18cf51f1216e9d1a3183485369f113df91650f17e12ef6edbe6260754828401528152835180850185527f220803acaa74db55bc7a519941ac10afbd31ffad8347527697db2de6fee9186181527f04908f78ce131c4442fb9f0e66faaff84eff93eeb7ae745d99ff3ebaa385d9588185015281840152908401528151600580825260c08201909352919082015b60408051808201909152600080825260208201528152602001906001900390816105ba57505060808201908152604080518082019091527f264999f6cb4c4a2cdf07866877d69ea94c1d5b0053366451afdfab2c80ba033181527f0986e2b51c59176e19b5ce0ed76cedd88ff1d0007dc15ffdc3ac5b326f4fda6b60208201529051805160009061064d5761064d611457565b602002602001018190525060405180604001604052807f260d2dd6ef29cf3d79a117e7cd05d7a5068e04238b1bfe4e37c3097256abf98081526020017f1dd243eefc411f2bf0c39b6ca1e3fe41a5db0f2e133e6286de898bb2bf34174581525081608001516001815181106106c4576106c4611457565b602002602001018190525060405180604001604052807f1e7473cdc5977cc5ff5890e207368596fc592b30bf16a0c6c7ad4df545b3ffd981526020017f1459b5314ec612a40dbeffdade8b176803d811f3b8f65ad174d2c4c0881e081c815250816080015160028151811061073b5761073b611457565b602002602001018190525060405180604001604052807f228673df42305c669af4389f09c3b55cb38a32d6eecc4596960af693b9a9d4f381526020017f2ffc4e1cbb82834a819891f5da241d67930e5ede57cd3b2e7b2adfd444b650d081525081608001516003815181106107b2576107b2611457565b602002602001018190525060405180604001604052807f2de57a284b8716de7fd08472c865bbf1f85de0406d53d959d0a9ae499486974a81526020017f0d8e181a6e462bd7dc59cc31baef1e3619a321181fa8637f4f93a4907d3a5f4d815250816080015160048151811061082957610829611457565b602002602001018190525090565b60006108526000805160206114848339815191526003611409565b600080516020611484833981519152835160008051602061148483398151915285518009096000805160206114848339815191526020850151800961089791906113d7565b1492915050565b600080600080600061091e86602001516000600281106108c0576108c0611457565b602002015187602001516001600281106108dc576108dc611457565b602002015188602001516000600281106108f8576108f8611457565b6020020151896020015160016002811061091457610914611457565b6020020151610ca7565b875180516020820151939750919550610943929060005b602002015189516001610914565b8751919350915061095990839083906000610935565b909250905061096a84848484610d18565b90945092506109ba84847f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e57e9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d2610d18565b9094509250831580156109cb575082155b9695505050505050565b60408051808201909152600080825260208201526109f16110af565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa9050808015610a2457610a26565bfe5b5080610a3157600080fd5b505092915050565b6040805180820190915260008082526020820152610a556110cd565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa9050808015610a2457610a26565b60408051808201909152600080825260208201526020820151610ac9575060408051808201909152905181526000602082015290565b6040518060400160405280836000015181526020016000805160206114848339815191528460200151610afc9190611409565b610b14906000805160206114848339815191526113d7565b905292915050565b60408051600480825260a08201909252600091829190816020015b6040805180820190915260008082526020820152815260200190600190039081610b3757505060408051600480825260a0820190925291925060009190602082015b610b816110eb565b815260200190600190039081610b795790505090508a82600081518110610baa57610baa611457565b60200260200101819052508882600181518110610bc957610bc9611457565b60200260200101819052508682600281518110610be857610be8611457565b60200260200101819052508482600381518110610c0757610c07611457565b60200260200101819052508981600081518110610c2657610c26611457565b60200260200101819052508781600181518110610c4557610c45611457565b60200260200101819052508581600281518110610c6457610c64611457565b60200260200101819052508381600381518110610c8357610c83611457565b6020026020010181905250610c988282610d5a565b9b9a5050505050505050505050565b600080610ce560008051602061148483398151915285880960008051602061148483398151915285880960008051602061148483398151915261103a565b60008051602061148483398151915280868809600080516020611484833981519152868a09089150915094509492505050565b600080610d34868560008051602061148483398151915261103a565b610d4d868560008051602061148483398151915261103a565b9150915094509492505050565b60008151835114610d6a57600080fd5b82516000610d798260066113b8565b905060008167ffffffffffffffff811115610d9657610d9661146d565b604051908082528060200260200182016040528015610dbf578160200160208202803683370190505b50905060005b83811015610ffa57868181518110610ddf57610ddf611457565b60200260200101516000015182826006610df991906113b8565b610e049060006113a0565b81518110610e1457610e14611457565b602002602001018181525050868181518110610e3257610e32611457565b60200260200101516020015182826006610e4c91906113b8565b610e579060016113a0565b81518110610e6757610e67611457565b602002602001018181525050858181518110610e8557610e85611457565b60209081029190910181015151015182610ea08360066113b8565b610eab9060026113a0565b81518110610ebb57610ebb611457565b602002602001018181525050858181518110610ed957610ed9611457565b6020908102919091010151515182610ef28360066113b8565b610efd9060036113a0565b81518110610f0d57610f0d611457565b602002602001018181525050858181518110610f2b57610f2b611457565b602002602001015160200151600160028110610f4957610f49611457565b602002015182610f5a8360066113b8565b610f659060046113a0565b81518110610f7557610f75611457565b602002602001018181525050858181518110610f9357610f93611457565b602002602001015160200151600060028110610fb157610fb1611457565b602002015182610fc28360066113b8565b610fcd9060056113a0565b81518110610fdd57610fdd611457565b602090810291909101015280610ff2816113ee565b915050610dc5565b50611003611110565b6000602082602086026020860160086107d05a03fa9050808015610a2457508061102c57600080fd5b505115159695505050505050565b6000818061104a5761104a611441565b61105484846113d7565b8508949350505050565b6040805160e08101909152600060a0820181815260c08301919091528152602081016110886110eb565b81526020016110956110eb565b81526020016110a26110eb565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806110fe61112e565b815260200161110b61112e565b905290565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b600082601f83011261115d57600080fd5b611165611354565b80838560408601111561117757600080fd5b60005b600281101561119957813584526020938401939091019060010161117a565b509095945050505050565b600082601f8301126111b557600080fd5b8135602067ffffffffffffffff808311156111d2576111d261146d565b8260051b604051601f19603f830116810181811084821117156111f7576111f761146d565b6040528481528381019250868401828801850189101561121657600080fd5b600092505b8583101561123957803584529284019260019290920191840161121b565b50979650505050505050565b60006040828403121561125757600080fd5b6040516040810181811067ffffffffffffffff8211171561127a5761127a61146d565b604052823581526020928301359281019290925250919050565b6000808284036101208112156112a957600080fd5b610100808212156112b957600080fd5b6112c161137d565b6112cb8787611245565b81526080603f19840112156112df57600080fd5b6112e7611354565b92506112f6876040880161114c565b8352611305876080880161114c565b602084015282602082015261131d8760c08801611245565b60408201529350840135905067ffffffffffffffff81111561133e57600080fd5b61134a858286016111a4565b9150509250929050565b6040805190810167ffffffffffffffff811182821017156113775761137761146d565b60405290565b6040516060810167ffffffffffffffff811182821017156113775761137761146d565b600082198211156113b3576113b361142b565b500190565b60008160001904831182151516156113d2576113d261142b565b500290565b6000828210156113e9576113e961142b565b500390565b60006000198214156114025761140261142b565b5060010190565b60008261142657634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a264697066735822122024c49af291cd5102b1135149cf7ea20712f6c9d169d2dc4b66434c96377e25f864736f6c63430008070033';

type Rollup1VerifierConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Rollup1VerifierConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Rollup1Verifier__factory extends ContractFactory {
  constructor(...args: Rollup1VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Rollup1Verifier';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Rollup1Verifier> {
    return super.deploy(overrides || {}) as Promise<Rollup1Verifier>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Rollup1Verifier {
    return super.attach(address) as Rollup1Verifier;
  }
  connect(signer: Signer): Rollup1Verifier__factory {
    return super.connect(signer) as Rollup1Verifier__factory;
  }
  static readonly contractName: 'Rollup1Verifier';
  public readonly contractName: 'Rollup1Verifier';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Rollup1VerifierInterface {
    return new utils.Interface(_abi) as Rollup1VerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Rollup1Verifier {
    return new Contract(address, _abi, signerOrProvider) as Rollup1Verifier;
  }
}
