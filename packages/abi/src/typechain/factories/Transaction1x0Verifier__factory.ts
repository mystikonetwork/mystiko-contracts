/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Transaction1x0Verifier, Transaction1x0VerifierInterface } from '../Transaction1x0Verifier';

const _abi = [
  {
    inputs: [],
    name: 'InvalidParam',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotOnCurve',
    type: 'error',
  },
  {
    inputs: [],
    name: 'StaticCallFailed',
    type: 'error',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'a',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256[2]',
                name: 'X',
                type: 'uint256[2]',
              },
              {
                internalType: 'uint256[2]',
                name: 'Y',
                type: 'uint256[2]',
              },
            ],
            internalType: 'struct Pairing.G2Point',
            name: 'b',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Pairing.G1Point',
            name: 'c',
            type: 'tuple',
          },
        ],
        internalType: 'struct VerifierLib.Proof',
        name: 'proof',
        type: 'tuple',
      },
      {
        internalType: 'uint256[]',
        name: 'input',
        type: 'uint256[]',
      },
    ],
    name: 'verifyTx',
    outputs: [
      {
        internalType: 'bool',
        name: 'r',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506116a9806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e3660046114a3565b610057565b604051901515815260200160405180910390f35b6000815160061461007b57604051633494a40d60e21b815260040160405180910390fd5b610085828461008c565b9392505050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100b86103ff565b9050806080015151855160016100ce91906115af565b146100ec57604051633494a40d60e21b815260040160405180910390fd5b835151821161010e57604051633494a40d60e21b815260040160405180910390fd5b835160200151821161013357604051633494a40d60e21b815260040160405180910390fd5b60208401515151821161015957604051633494a40d60e21b815260040160405180910390fd5b602084810151015151821161018157604051633494a40d60e21b815260040160405180910390fd5b60208481015151015182116101a957604051633494a40d60e21b815260040160405180910390fd5b602084810151810151015182116101d357604051633494a40d60e21b815260040160405180910390fd5b60408401515182116101f857604051633494a40d60e21b815260040160405180910390fd5b818460400151602001511061022057604051633494a40d60e21b815260040160405180910390fd5b835161022b906109ee565b610248576040516361586bdd60e01b815260040160405180910390fd5b6102558460200151610a66565b610272576040516361586bdd60e01b815260040160405180910390fd5b61027f84604001516109ee565b61029c576040516361586bdd60e01b815260040160405180910390fd5b60006102dc604051806040016040528060008152602001600081525083608001516000815181106102cf576102cf611647565b6020026020010151610b50565b905060005b865181101561038c57838782815181106102fd576102fd611647565b60200260200101511061032357604051633494a40d60e21b815260040160405180910390fd5b61037882610373856080015184600161033c91906115af565b8151811061034c5761034c611647565b60200260200101518a858151811061036657610366611647565b6020026020010151610bcd565b610b50565b915080610384816115de565b9150506102e1565b50610396816109ee565b6103b3576040516361586bdd60e01b815260040160405180910390fd5b6103f5856000015186602001516103c984610c1c565b85604001516103db8a60400151610c1c565b606088015188516103eb90610c1c565b8960200151610cca565b9695505050505050565b61040761126d565b6040805180820182527f0602eb3c376bfb82386f450026a6fbfddac117f623266aa5f69b55bf5f0f135381527f054193b429b644cccf4edabdbac623e28dd70c838dc6ec66ffca7d6f57c92a426020808301919091529083528151608080820184527f2a78b19f938987495a64de05b355c4094b80fc91991f8b2cd4451ded05ebcf428285019081527f1ec9f278495e2d780d66821095e9ec5f53c5e5d15591d3036f89637c2c8785ce606080850191909152908352845180860186527f0ceef9b1bafc6faf5137081a560cd94deb5158306c52710424c46e64d7d593ff81527f03ba98bc3ef9b0efd777bc2766dcb8bf524cd7848127efcd4dcd5989f4f1675e818601528385015285840192909252835180820185527f189b83413e9fac885886403565335a50097b27f1958c84617cc7d3437935288f8186019081527f11c594f7372145f247ec1f21c146a02f92755b177a87dfc6647a35864b98b136828501528152845180860186527f2ed7ded4e4b65a27c4a81bd74b49006828ca0892cbb0fb30e888ed28573ca67781527f1a30f160308f6b66bf945396ea005130a9f48d0645ff6cd8fd1e1ce912fa03cc818601528185015285850152835190810184527f159b90bf3e10eb77dc5995be1f223dd290875f53eedf872c1119eb2c114b42408185019081527f25b5ae7906f6faa69c5b09940f70775d913f17ade156e6901daec5a9b59cdac5828401528152835180850185527f1161acd8bf87c671ff561548eeed961710155ac049eec1b2827b31a5d6ec601181527f180324aee5a5ad4f5a7c68b656a302c243c5df01401cca2db1f5930ab23b4f16818501528184015290840152815160078082526101008201909352919082015b604080518082019091526000808252602082015281526020019060019003908161068357505060808201908152604080518082019091527f107ce82982c8a8d5670674a12927c6ccc7b917f01043677b2229c8a2e23a4b7381527f21ff4841ca2b2ced1dc255b2134190f0bac46513867a5faf4c7dbcd90fb45a6560208201529051805160009061071657610716611647565b602002602001018190525060405180604001604052807f0e575e59f7122c7a70eb3d2683e0f554f97ffb26bd29a5e500feb78107731d5b81526020017f0cfac6068efcff2a9bc69ad5895cb2dc735f95925b48e99cecd4844a6867315d815250816080015160018151811061078d5761078d611647565b602002602001018190525060405180604001604052807f1f27c125640d630bbf1b8d19d10756632820ba8b5d58692dc6fe6c1964fc347b81526020017f29a11b1b594d0c0f3e7e550c0a8b61f815a3b5c315e43d35a6ee124d6a66ac8b815250816080015160028151811061080457610804611647565b602002602001018190525060405180604001604052807f171cfeb33a5452b87ad5ad8583cb161fc996ceb11bae9e10e6ad9666d0f5a1aa81526020017f1e5e04b9f75fe1f22be2fe6e1477614e5bbcb1f2cc81204df95c34645599857a815250816080015160038151811061087b5761087b611647565b602002602001018190525060405180604001604052807f15bf6ae2c114c3fcd1ae2c93535a866257502d80330f2c9a5a81543879c128f481526020017f1ca83996a7e279adba8a21cc00a02bdbae064e6debc5b38f04e929cdd6492ebc81525081608001516004815181106108f2576108f2611647565b602002602001018190525060405180604001604052807f2ded29b3ef3f43fcf63234573434b77b378903a95d410cc9f2f8fe08b0eb3f9f81526020017f0efbba3204395906911a0922576585eb399e1da354639558baf515db64d7d328815250816080015160058151811061096957610969611647565b602002602001018190525060405180604001604052807f21497be273f09077fdf00e30687c82cda79c741dfa7629a88e65615e4944caa781526020017f0520410a5b2fca0e57dd5db9a0aa4eb53e0a2e4569c819e2cb3c1f062111f27881525081608001516006815181106109e0576109e0611647565b602002602001018190525090565b60007f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47610a1c8160036115f9565b8180610a2a57610a2a611631565b84518380610a3a57610a3a611631565b86518009098280610a4d57610a4d611631565b60208601518009610a5e91906115c7565b149392505050565b6020818101518051918101516000927f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e5927e9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d2928592839283928392610ad692909190829060015b602002015161112b565b895180516020820151939750919550610afb929060005b60200201518b516001610acc565b89519193509150610b1190839083906000610aed565b9092509050610b22848484846111ac565b9094509250610b33848488886111ac565b909450925083158015610b44575082155b98975050505050505050565b6040805180820190915260008082526020820152610b6c6112be565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa905080801561002b575b5080610bc557604051633842fc7360e21b815260040160405180910390fd5b505092915050565b6040805180820190915260008082526020820152610be96112dc565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa905080801561002b57610ba6565b604080518082019091526000808252602082015260208201517f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4790610c87576040518060400160405280828560000151610c7691906115f9565b815260006020909101529392505050565b6040518060400160405280828560000151610ca291906115f9565b8152602001828560200151610cb791906115f9565b610cc190846115c7565b90529392505050565b60408051601880825261032082019092526000919082908260208201610300803683370190505090508a6000015181600081518110610d0b57610d0b611647565b6020026020010181815250508a6020015181600181518110610d2f57610d2f611647565b602090810291909101015289516001602002015181600281518110610d5657610d56611647565b6020908102919091010152895151815182906003908110610d7957610d79611647565b6020026020010181815250508960200151600160028110610d9c57610d9c611647565b602002015181600481518110610db457610db4611647565b6020026020010181815250508960200151600060028110610dd757610dd7611647565b602002015181600581518110610def57610def611647565b602002602001018181525050886000015181600681518110610e1357610e13611647565b602002602001018181525050886020015181600781518110610e3757610e37611647565b602090810291909101015287516001602002015181600881518110610e5e57610e5e611647565b6020908102919091010152875151815182906009908110610e8157610e81611647565b6020026020010181815250508760200151600160028110610ea457610ea4611647565b602002015181600a81518110610ebc57610ebc611647565b6020026020010181815250508760200151600060028110610edf57610edf611647565b602002015181600b81518110610ef757610ef7611647565b602002602001018181525050866000015181600c81518110610f1b57610f1b611647565b602002602001018181525050866020015181600d81518110610f3f57610f3f611647565b602090810291909101015285516001602002015181600e81518110610f6657610f66611647565b602090810291909101015285515181518290600f908110610f8957610f89611647565b6020026020010181815250508560200151600160028110610fac57610fac611647565b602002015181601081518110610fc457610fc4611647565b6020026020010181815250508560200151600060028110610fe757610fe7611647565b602002015181601181518110610fff57610fff611647565b60200260200101818152505084600001518160128151811061102357611023611647565b60200260200101818152505084602001518160138151811061104757611047611647565b60209081029190910101528351600160200201518160148151811061106e5761106e611647565b602090810291909101015283515181518290601590811061109157611091611647565b60200260200101818152505083602001516001600281106110b4576110b4611647565b6020020151816016815181106110cc576110cc611647565b60200260200101818152505083602001516000600281106110ef576110ef611647565b60200201518160178151811061110757611107611647565b60200260200101818152505061111c816111f4565b9b9a5050505050505050505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd4761116d81868909828061116457611164611631565b86890983611249565b818061117b5761117b611631565b828061118957611189611631565b878909838061119a5761119a611631565b878b0908925092505094509492505050565b6000807f30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd476111db878683611249565b6111e6878684611249565b925092505094509492505050565b80516000906112016112fa565b6000602082602085026020880160086107d05a03fa905080801561002b57508061123e57604051633842fc7360e21b815260040160405180910390fd5b505115159392505050565b6000818061125957611259611631565b61126384846115c7565b8508949350505050565b6040805160e08101909152600060a0820181815260c0830191909152815260208101611297611318565b81526020016112a4611318565b81526020016112b1611318565b8152602001606081525090565b60405180608001604052806004906020820280368337509192915050565b60405180606001604052806003906020820280368337509192915050565b60405180602001604052806001906020820280368337509192915050565b604051806040016040528061132b61133d565b815260200161133861133d565b905290565b60405180604001604052806002906020820280368337509192915050565b600082601f83011261136c57600080fd5b611374611563565b80838560408601111561138657600080fd5b60005b60028110156113a8578135845260209384019390910190600101611389565b509095945050505050565b600082601f8301126113c457600080fd5b8135602067ffffffffffffffff808311156113e1576113e161165d565b8260051b604051601f19603f830116810181811084821117156114065761140661165d565b6040528481528381019250868401828801850189101561142557600080fd5b600092505b8583101561144857803584529284019260019290920191840161142a565b50979650505050505050565b60006040828403121561146657600080fd5b6040516040810181811067ffffffffffffffff821117156114895761148961165d565b604052823581526020928301359281019290925250919050565b6000808284036101208112156114b857600080fd5b610100808212156114c857600080fd5b6114d061158c565b6114da8787611454565b81526080603f19840112156114ee57600080fd5b6114f6611563565b9250611505876040880161135b565b8352611514876080880161135b565b602084015282602082015261152c8760c08801611454565b60408201529350840135905067ffffffffffffffff81111561154d57600080fd5b611559858286016113b3565b9150509250929050565b6040805190810167ffffffffffffffff811182821017156115865761158661165d565b60405290565b6040516060810167ffffffffffffffff811182821017156115865761158661165d565b600082198211156115c2576115c261161b565b500190565b6000828210156115d9576115d961161b565b500390565b60006000198214156115f2576115f261161b565b5060010190565b60008261161657634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea264697066735822122034c0286ab178b2b6b336ee13c5629c24d6d1d11c31f31d5824362e65c5e80cb664736f6c63430008070033';

type Transaction1x0VerifierConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Transaction1x0VerifierConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Transaction1x0Verifier__factory extends ContractFactory {
  constructor(...args: Transaction1x0VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Transaction1x0Verifier';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Transaction1x0Verifier> {
    return super.deploy(overrides || {}) as Promise<Transaction1x0Verifier>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Transaction1x0Verifier {
    return super.attach(address) as Transaction1x0Verifier;
  }
  connect(signer: Signer): Transaction1x0Verifier__factory {
    return super.connect(signer) as Transaction1x0Verifier__factory;
  }
  static readonly contractName: 'Transaction1x0Verifier';
  public readonly contractName: 'Transaction1x0Verifier';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Transaction1x0VerifierInterface {
    return new utils.Interface(_abi) as Transaction1x0VerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Transaction1x0Verifier {
    return new Contract(address, _abi, signerOrProvider) as Transaction1x0Verifier;
  }
}
