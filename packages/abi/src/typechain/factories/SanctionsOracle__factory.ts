/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { SanctionsOracle, SanctionsOracleInterface } from '../SanctionsOracle';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'NotChanged',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OnlyOperator',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'addr',
        type: 'address',
      },
    ],
    name: 'NonSanctionedAddress',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'operator',
        type: 'address',
      },
    ],
    name: 'OperatorChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'addr',
        type: 'address',
      },
    ],
    name: 'SanctionedAddress',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address[]',
        name: 'addrs',
        type: 'address[]',
      },
    ],
    name: 'SanctionedAddressesAdded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address[]',
        name: 'addrs',
        type: 'address[]',
      },
    ],
    name: 'SanctionedAddressesRemoved',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'newSanctions',
        type: 'address[]',
      },
    ],
    name: 'addToSanctionsList',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_newOperator',
        type: 'address',
      },
    ],
    name: 'changeOperator',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'addr',
        type: 'address',
      },
    ],
    name: 'isSanctioned',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'addr',
        type: 'address',
      },
    ],
    name: 'isSanctionedVerbose',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address[]',
        name: 'removeSanctions',
        type: 'address[]',
      },
    ],
    name: 'removeFromSanctionsList',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b50600080546001600160a01b0319163317905561066e806100326000396000f3fe608060405234801561001057600080fd5b50600436106100725760003560e01c8063b972dfcc11610050578063b972dfcc146100f7578063df592f7d1461010a578063ef7824311461013c57600080fd5b806306394c9b1461007757806306fdde031461008c578063a2a6bbd8146100d4575b600080fd5b61008a610085366004610453565b61014f565b005b604080518082018252601881527f4d797374696b6f2073616e6374696f6e73206f7261636c650000000000000000602082015290516100cb919061058e565b60405180910390f35b6100e76100e2366004610453565b610209565b60405190151581526020016100cb565b61008a610105366004610475565b6102ac565b6100e7610118366004610453565b6001600160a01b031660009081526001602081905260409091205460ff1615151490565b61008a61014a366004610475565b610379565b6000546001600160a01b0316331461017a576040516327e1f1e560e01b815260040160405180910390fd5b6000546001600160a01b03828116911614156101a9576040516336a1c33f60e01b815260040160405180910390fd5b600080547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b038316908117825560405190917f4721129e0e676ed6a92909bb24e853ccdd63ad72280cc2e974e38e480e0e6e5491a250565b6001600160a01b038116600090815260016020819052604082205460ff161515141561026b576040516001600160a01b038316907f8027911123971054d93579ebea046c8461473fa4d2e510b9b49eed3bed3270e090600090a2506001919050565b6040516001600160a01b038316907fd595018321fcb8c2bcbf5bfe4b27d74bea505825f7d195abe8517f94a065539c90600090a2506000919050565b919050565b6000546001600160a01b031633146102d7576040516327e1f1e560e01b815260040160405180910390fd5b60005b815181101561033e5760018060008484815181106102fa576102fa61060c565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610336816105e3565b9150506102da565b507f2596d7dd6966c5673f9c06ddb0564c4f0e6d8d206ea075b83ad9ddd71a4fb9278160405161036e9190610541565b60405180910390a150565b6000546001600160a01b031633146103a4576040516327e1f1e560e01b815260040160405180910390fd5b60005b815181101561040c576000600160008484815181106103c8576103c861060c565b6020908102919091018101516001600160a01b03168252810191909152604001600020805460ff191691151591909117905580610404816105e3565b9150506103a7565b507f32aab684eee99db715515d1a9987a8fe33bb6341b0e35e60db7eab48a08f9a3a8160405161036e9190610541565b80356001600160a01b03811681146102a757600080fd5b60006020828403121561046557600080fd5b61046e8261043c565b9392505050565b6000602080838503121561048857600080fd5b823567ffffffffffffffff808211156104a057600080fd5b818501915085601f8301126104b457600080fd5b8135818111156104c6576104c6610622565b8060051b604051601f19603f830116810181811085821117156104eb576104eb610622565b604052828152858101935084860182860187018a101561050a57600080fd5b600095505b83861015610534576105208161043c565b85526001959095019493860193860161050f565b5098975050505050505050565b6020808252825182820181905260009190848201906040850190845b818110156105825783516001600160a01b03168352928401929184019160010161055d565b50909695505050505050565b600060208083528351808285015260005b818110156105bb5785810183015185820160400152820161059f565b818111156105cd576000604083870101525b50601f01601f1916929092016040019392505050565b600060001982141561060557634e487b7160e01b600052601160045260246000fd5b5060010190565b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfea2646970667358221220c61bab5f66becfe488f812d1343ac13051a8e2fc5a169289f4353b8cf35b8bdb64736f6c63430008070033';

type SanctionsOracleConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: SanctionsOracleConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class SanctionsOracle__factory extends ContractFactory {
  constructor(...args: SanctionsOracleConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'SanctionsOracle';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<SanctionsOracle> {
    return super.deploy(overrides || {}) as Promise<SanctionsOracle>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SanctionsOracle {
    return super.attach(address) as SanctionsOracle;
  }
  connect(signer: Signer): SanctionsOracle__factory {
    return super.connect(signer) as SanctionsOracle__factory;
  }
  static readonly contractName: 'SanctionsOracle';
  public readonly contractName: 'SanctionsOracle';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SanctionsOracleInterface {
    return new utils.Interface(_abi) as SanctionsOracleInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SanctionsOracle {
    return new Contract(address, _abi, signerOrProvider) as SanctionsOracle;
  }
}
