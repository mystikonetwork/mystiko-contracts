/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Rollup16Verifier, Rollup16VerifierInterface } from '../Rollup16Verifier';

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Rollup16Pairing.G1Point',
            name: 'a',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256[2]',
                name: 'X',
                type: 'uint256[2]',
              },
              {
                internalType: 'uint256[2]',
                name: 'Y',
                type: 'uint256[2]',
              },
            ],
            internalType: 'struct Rollup16Pairing.G2Point',
            name: 'b',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Rollup16Pairing.G1Point',
            name: 'c',
            type: 'tuple',
          },
        ],
        internalType: 'struct Rollup16Verifier.Proof',
        name: 'proof',
        type: 'tuple',
      },
      {
        internalType: 'uint256[]',
        name: 'input',
        type: 'uint256[]',
      },
    ],
    name: 'verifyTx',
    outputs: [
      {
        internalType: 'bool',
        name: 'r',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506114d9806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e366004611294565b610057565b604051901515815260200160405180910390f35b600081516004146100ae5760405162461bcd60e51b815260206004820152601460248201527f696e76616c696420696e707574206c656e677468000000000000000000000000604482015260640160405180910390fd5b6100b882846100ce565b6100c4575060016100c8565b5060005b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100fa610337565b90508060800151518551600161011091906113a0565b1461011a57600080fd5b835151821161012857600080fd5b835160200151821161013957600080fd5b60208401515151821161014b57600080fd5b602084810151015151821161015f57600080fd5b602084810151510151821161017357600080fd5b6020848101518101510151821161018957600080fd5b604084015151821161019a57600080fd5b81846040015160200151106101ae57600080fd5b83516101b990610837565b6101c257600080fd5b6101cf846020015161089e565b6101d857600080fd5b6101e58460400151610837565b6101ee57600080fd5b604080518082019091526000808252602082018190525b865181101561029c578387828151811061022157610221611457565b60200260200101511061023357600080fd5b61028882610283856080015184600161024c91906113a0565b8151811061025c5761025c611457565b60200260200101518a858151811061027657610276611457565b60200260200101516109d5565b610a39565b915080610294816113ee565b915050610205565b506102c58183608001516000815181106102b8576102b8611457565b6020026020010151610a39565b90506102d081610837565b6102d957600080fd5b61031b856000015186602001516102ef84610a93565b85604001516103018a60400151610a93565b6060880151885161031190610a93565b8960200151610b1c565b61032b57600193505050506100c8565b50600095945050505050565b61033f61105e565b6040805180820182527f2343cbd8d4983aec15bb189e2a96a598110a5255dce870ff1959d1352a084b8681527f1f53b04aad4d61e69bd5d622da4416b19572c1710a0b60a07091ff7109fbc5346020808301919091529083528151608080820184527f2c6250f036da057868cc78f7f24b9c92cb2acb2946d89bea5b418f52fb2c37a98285019081527f1220094901e1e81b377026a6ebdd6a4884e101a4947abd32bd32c76664654446606080850191909152908352845180860186527f25c0f7796cdf73170fa43b9387dfa1276ca1ec5cc294d12299a6d3fd1c49bb9881527f02d6d2fde0c1630a9e9e5e863f60f11243400ddd011aff1b53cc61665d9f0774818601528385015285840192909252835180820185527f17d5646de16a93d6df8388ad9f188a2b96375d2ed4feffb1a4159a39c283e8648186019081527f091469d885f51194364102c389935e34e98ee0c29a835682ff904c60bc21752f828501528152845180860186527f0f9c7e5cb043508ec62083eac58f95e6ef656928327368dfcee5c8fe8ffd96e381527f11533e23b0032385d7d4d94a8433a0e3d815dc68499964476cc9bc30adc5c421818601528185015285850152835190810184527f1363faa2d7cddd5d047683e8020426f95887778a89d6e2599cad8fe0d94ea8578185019081527f21659548f8816da819b8877764918b2298a5e1e7da3747eb6e86bc33b6493d5c828401528152835180850185527f0e4cef62818570a45ef27f3c153ce4d4a86b49a4a115231ebda3d7908cab6c7681527f22890d66731426165d3a4665d1cbc85f15128be4a8d1e03a48edca382dcdf6708185015281840152908401528151600580825260c08201909352919082015b60408051808201909152600080825260208201528152602001906001900390816105ba57505060808201908152604080518082019091527f28e78c2427a3f67f8e3e08021ed8ac9632cf68ca7ff20d0ed2778802254f62b381527f1f744cba3f38532fea8f7a8a4ce7fd69f07c4048b0fb7356ac2f080f180e43b060208201529051805160009061064d5761064d611457565b602002602001018190525060405180604001604052807f0e89a0475f1a7fac670ebdffc64a53235143c7610082125621e5295941d4c9b181526020017f22c481017f4cd712bb5216a91c191ee58d9a997158e2a387e9ffd39792e77eee81525081608001516001815181106106c4576106c4611457565b602002602001018190525060405180604001604052807f2b059ecc389296c8c018e6be1a9cedcda2cfef5d866d17ca847b1502384a826f81526020017f219873f2af5bbb693666a1a64385d1c7353f807ecdfa5a1e83e7731f33b36ef6815250816080015160028151811061073b5761073b611457565b602002602001018190525060405180604001604052807f2f721dd06675f438979ce46a24cf0cb4e6fbef374501b4f0c2e0e22b83dacf5c81526020017f0577de4b80f34d170276110b0e176d490635758ace11a9f24cba46c9e13a1dbf81525081608001516003815181106107b2576107b2611457565b602002602001018190525060405180604001604052807f2411ba5dbb28aa424849c905445d990a5acade2c2f1653bb4450156b5526ba4c81526020017f14fcd2d15f86949d189901d43a0bbe88360332be5e471807049ec545d6823c81815250816080015160048151811061082957610829611457565b602002602001018190525090565b60006108526000805160206114848339815191526003611409565b600080516020611484833981519152835160008051602061148483398151915285518009096000805160206114848339815191526020850151800961089791906113d7565b1492915050565b600080600080600061091e86602001516000600281106108c0576108c0611457565b602002015187602001516001600281106108dc576108dc611457565b602002015188602001516000600281106108f8576108f8611457565b6020020151896020015160016002811061091457610914611457565b6020020151610ca7565b875180516020820151939750919550610943929060005b602002015189516001610914565b8751919350915061095990839083906000610935565b909250905061096a84848484610d18565b90945092506109ba84847f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e57e9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d2610d18565b9094509250831580156109cb575082155b9695505050505050565b60408051808201909152600080825260208201526109f16110af565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa9050808015610a2457610a26565bfe5b5080610a3157600080fd5b505092915050565b6040805180820190915260008082526020820152610a556110cd565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa9050808015610a2457610a26565b60408051808201909152600080825260208201526020820151610ac9575060408051808201909152905181526000602082015290565b6040518060400160405280836000015181526020016000805160206114848339815191528460200151610afc9190611409565b610b14906000805160206114848339815191526113d7565b905292915050565b60408051600480825260a08201909252600091829190816020015b6040805180820190915260008082526020820152815260200190600190039081610b3757505060408051600480825260a0820190925291925060009190602082015b610b816110eb565b815260200190600190039081610b795790505090508a82600081518110610baa57610baa611457565b60200260200101819052508882600181518110610bc957610bc9611457565b60200260200101819052508682600281518110610be857610be8611457565b60200260200101819052508482600381518110610c0757610c07611457565b60200260200101819052508981600081518110610c2657610c26611457565b60200260200101819052508781600181518110610c4557610c45611457565b60200260200101819052508581600281518110610c6457610c64611457565b60200260200101819052508381600381518110610c8357610c83611457565b6020026020010181905250610c988282610d5a565b9b9a5050505050505050505050565b600080610ce560008051602061148483398151915285880960008051602061148483398151915285880960008051602061148483398151915261103a565b60008051602061148483398151915280868809600080516020611484833981519152868a09089150915094509492505050565b600080610d34868560008051602061148483398151915261103a565b610d4d868560008051602061148483398151915261103a565b9150915094509492505050565b60008151835114610d6a57600080fd5b82516000610d798260066113b8565b905060008167ffffffffffffffff811115610d9657610d9661146d565b604051908082528060200260200182016040528015610dbf578160200160208202803683370190505b50905060005b83811015610ffa57868181518110610ddf57610ddf611457565b60200260200101516000015182826006610df991906113b8565b610e049060006113a0565b81518110610e1457610e14611457565b602002602001018181525050868181518110610e3257610e32611457565b60200260200101516020015182826006610e4c91906113b8565b610e579060016113a0565b81518110610e6757610e67611457565b602002602001018181525050858181518110610e8557610e85611457565b60209081029190910181015151015182610ea08360066113b8565b610eab9060026113a0565b81518110610ebb57610ebb611457565b602002602001018181525050858181518110610ed957610ed9611457565b6020908102919091010151515182610ef28360066113b8565b610efd9060036113a0565b81518110610f0d57610f0d611457565b602002602001018181525050858181518110610f2b57610f2b611457565b602002602001015160200151600160028110610f4957610f49611457565b602002015182610f5a8360066113b8565b610f659060046113a0565b81518110610f7557610f75611457565b602002602001018181525050858181518110610f9357610f93611457565b602002602001015160200151600060028110610fb157610fb1611457565b602002015182610fc28360066113b8565b610fcd9060056113a0565b81518110610fdd57610fdd611457565b602090810291909101015280610ff2816113ee565b915050610dc5565b50611003611110565b6000602082602086026020860160086107d05a03fa9050808015610a2457508061102c57600080fd5b505115159695505050505050565b6000818061104a5761104a611441565b61105484846113d7565b8508949350505050565b6040805160e08101909152600060a0820181815260c08301919091528152602081016110886110eb565b81526020016110956110eb565b81526020016110a26110eb565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806110fe61112e565b815260200161110b61112e565b905290565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b600082601f83011261115d57600080fd5b611165611354565b80838560408601111561117757600080fd5b60005b600281101561119957813584526020938401939091019060010161117a565b509095945050505050565b600082601f8301126111b557600080fd5b8135602067ffffffffffffffff808311156111d2576111d261146d565b8260051b604051601f19603f830116810181811084821117156111f7576111f761146d565b6040528481528381019250868401828801850189101561121657600080fd5b600092505b8583101561123957803584529284019260019290920191840161121b565b50979650505050505050565b60006040828403121561125757600080fd5b6040516040810181811067ffffffffffffffff8211171561127a5761127a61146d565b604052823581526020928301359281019290925250919050565b6000808284036101208112156112a957600080fd5b610100808212156112b957600080fd5b6112c161137d565b6112cb8787611245565b81526080603f19840112156112df57600080fd5b6112e7611354565b92506112f6876040880161114c565b8352611305876080880161114c565b602084015282602082015261131d8760c08801611245565b60408201529350840135905067ffffffffffffffff81111561133e57600080fd5b61134a858286016111a4565b9150509250929050565b6040805190810167ffffffffffffffff811182821017156113775761137761146d565b60405290565b6040516060810167ffffffffffffffff811182821017156113775761137761146d565b600082198211156113b3576113b361142b565b500190565b60008160001904831182151516156113d2576113d261142b565b500290565b6000828210156113e9576113e961142b565b500390565b60006000198214156114025761140261142b565b5060010190565b60008261142657634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a264697066735822122022b7bf9a4ae6efdd4d3a3bef2a484a141d13300b3de4d7f7e4078e9f64f5809d64736f6c63430008070033';

type Rollup16VerifierConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Rollup16VerifierConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Rollup16Verifier__factory extends ContractFactory {
  constructor(...args: Rollup16VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Rollup16Verifier';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Rollup16Verifier> {
    return super.deploy(overrides || {}) as Promise<Rollup16Verifier>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Rollup16Verifier {
    return super.attach(address) as Rollup16Verifier;
  }
  connect(signer: Signer): Rollup16Verifier__factory {
    return super.connect(signer) as Rollup16Verifier__factory;
  }
  static readonly contractName: 'Rollup16Verifier';
  public readonly contractName: 'Rollup16Verifier';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Rollup16VerifierInterface {
    return new utils.Interface(_abi) as Rollup16VerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Rollup16Verifier {
    return new Contract(address, _abi, signerOrProvider) as Rollup16Verifier;
  }
}
