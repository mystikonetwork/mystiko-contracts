/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Rollup4Verifier, Rollup4VerifierInterface } from '../Rollup4Verifier';

const _abi = [
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Rollup4Pairing.G1Point',
            name: 'a',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256[2]',
                name: 'X',
                type: 'uint256[2]',
              },
              {
                internalType: 'uint256[2]',
                name: 'Y',
                type: 'uint256[2]',
              },
            ],
            internalType: 'struct Rollup4Pairing.G2Point',
            name: 'b',
            type: 'tuple',
          },
          {
            components: [
              {
                internalType: 'uint256',
                name: 'X',
                type: 'uint256',
              },
              {
                internalType: 'uint256',
                name: 'Y',
                type: 'uint256',
              },
            ],
            internalType: 'struct Rollup4Pairing.G1Point',
            name: 'c',
            type: 'tuple',
          },
        ],
        internalType: 'struct Rollup4Verifier.Proof',
        name: 'proof',
        type: 'tuple',
      },
      {
        internalType: 'uint256[]',
        name: 'input',
        type: 'uint256[]',
      },
    ],
    name: 'verifyTx',
    outputs: [
      {
        internalType: 'bool',
        name: 'r',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506114d8806100206000396000f3fe608060405234801561001057600080fd5b506004361061002b5760003560e01c8063c941764714610030575b600080fd5b61004361003e366004611293565b610057565b604051901515815260200160405180910390f35b600081516004146100ae5760405162461bcd60e51b815260206004820152601460248201527f696e76616c696420696e707574206c656e677468000000000000000000000000604482015260640160405180910390fd5b6100b882846100ce565b6100c4575060016100c8565b5060005b92915050565b60007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001816100fa610337565b905080608001515185516001610110919061139f565b1461011a57600080fd5b835151821161012857600080fd5b835160200151821161013957600080fd5b60208401515151821161014b57600080fd5b602084810151015151821161015f57600080fd5b602084810151510151821161017357600080fd5b6020848101518101510151821161018957600080fd5b604084015151821161019a57600080fd5b81846040015160200151106101ae57600080fd5b83516101b990610836565b6101c257600080fd5b6101cf846020015161089d565b6101d857600080fd5b6101e58460400151610836565b6101ee57600080fd5b604080518082019091526000808252602082018190525b865181101561029c578387828151811061022157610221611456565b60200260200101511061023357600080fd5b61028882610283856080015184600161024c919061139f565b8151811061025c5761025c611456565b60200260200101518a858151811061027657610276611456565b60200260200101516109d4565b610a38565b915080610294816113ed565b915050610205565b506102c58183608001516000815181106102b8576102b8611456565b6020026020010151610a38565b90506102d081610836565b6102d957600080fd5b61031b856000015186602001516102ef84610a92565b85604001516103018a60400151610a92565b6060880151885161031190610a92565b8960200151610b1b565b61032b57600193505050506100c8565b50600095945050505050565b61033f61105d565b6040805180820182527f1580bcd09fdfda69480d5389a6bda4791a4abba58a3786cdf43cf38c4aebd2f681527f276286a69866ae2802069a78fa1105780a95e03363af6fcdfd8090c72a4cc3396020808301919091529083528151608080820184527f2d4d1b4dde7a55a6a40970f2616cd9768e11002c497d28cacc747cb724a8ad5e8285019081527f2c751a31268c5281b10bd5f539bfe696e23f59618d523bd5c22edf3bdec29a3d606080850191909152908352845180860186527f033dae0485443b344275a226a92dd1266d5356fedd97ab342e03fe80fc82d3c081527f2729405948ff151ac7b6522f280417748bce3b8b6889d62e94ddbb169b4187b2818601528385015285840192909252835180820185527f0f68be9a281ab95764a4084a051dfc86db6312ee5eeeaa4a5e45183da8bbbfb58186019081527f02c152527562832f7892b17089f3af834be76a0693b0bb616fd6daff0cb6d327828501528152845180860186527f0a677b625ca403f3300198b450dc851b92729636d9cc20f444fd775e1576972081527f106df3c4ecd4d4f3c9f1968069ee2a960767c3eaed3e927164a427d5502e930f818601528185015285850152835190810184527f184353db032b5c89e718343b308471df862708461bbabdf06f8dbf30d0713b1e8185019081527e2853319478313f0d49a60b738e9903fb9d332ca0cad2844ffa8fda48564f18828401528152835180850185527f299ca633fd54d3c70af9f5ef99a94b959015de23fdfe2ed2d1233ae2d1249f2981527f12d5a9b81c64184cedf1f155fc1dc31445a9565f9da662454e49cd015066b29f8185015281840152908401528151600580825260c08201909352919082015b60408051808201909152600080825260208201528152602001906001900390816105b957505060808201908152604080518082019091527f2de9ce78fa530c4366b1209c0cf1b0f5ec40a01aa7ea05c08a6482c237a6dc2c81527f227cb0dc9c4558e89403f157b1e19a7cc696f6bbba6f7ddb22fcfbdeb4bca8a460208201529051805160009061064c5761064c611456565b602002602001018190525060405180604001604052807f29a9a9d3f057e4bc51fba306cf731651f80d98cc7d21183c8ebf248b0cdc80cd81526020017f126ea5f4f2e8170706bde6ce6a39dd09c528d015fed8400514739aa7c76d190f81525081608001516001815181106106c3576106c3611456565b602002602001018190525060405180604001604052807f169156adee136df7e05239577ea15f13038e2b23b57f7a72a0acc947c602f5de81526020017f08f724c6c21a77d6c5498ec4a8e616275d8907932a7a1ae76eb55f69fad50603815250816080015160028151811061073a5761073a611456565b602002602001018190525060405180604001604052807f0ddb47f9ea85238133cb90432746cfd5571de68df39c404d55652784a76b825181526020017f19ed8c55723a2306f1b944abd5f7e789e76125d8afcae603884e0e6890f2b64081525081608001516003815181106107b1576107b1611456565b602002602001018190525060405180604001604052807f05144bfd2254000f7b9e72b248de666eef789870e081ca50d05d86e139f52c5881526020017f1879b882bbe4680c0983b9ef4349706a5de35d0c054baf75ffb036d85b9b6964815250816080015160048151811061082857610828611456565b602002602001018190525090565b60006108516000805160206114838339815191526003611408565b600080516020611483833981519152835160008051602061148383398151915285518009096000805160206114838339815191526020850151800961089691906113d6565b1492915050565b600080600080600061091d86602001516000600281106108bf576108bf611456565b602002015187602001516001600281106108db576108db611456565b602002015188602001516000600281106108f7576108f7611456565b6020020151896020015160016002811061091357610913611456565b6020020151610ca6565b875180516020820151939750919550610942929060005b602002015189516001610913565b8751919350915061095890839083906000610934565b909250905061096984848484610d17565b90945092506109b984847f2b149d40ceb8aaae81be18991be06ac3b5b4c5e559dbefa33267e6dc24a138e57e9713b03af0fed4cd2cafadeed8fdf4a74fa084e52d1852e4a2bd0685c315d2610d17565b9094509250831580156109ca575082155b9695505050505050565b60408051808201909152600080825260208201526109f06110ae565b835181526020808501519082015260408101839052600060608360808460076107d05a03fa9050808015610a2357610a25565bfe5b5080610a3057600080fd5b505092915050565b6040805180820190915260008082526020820152610a546110cc565b8351815260208085015181830152835160408301528301516060808301919091526000908360c08460066107d05a03fa9050808015610a2357610a25565b60408051808201909152600080825260208201526020820151610ac8575060408051808201909152905181526000602082015290565b6040518060400160405280836000015181526020016000805160206114838339815191528460200151610afb9190611408565b610b13906000805160206114838339815191526113d6565b905292915050565b60408051600480825260a08201909252600091829190816020015b6040805180820190915260008082526020820152815260200190600190039081610b3657505060408051600480825260a0820190925291925060009190602082015b610b806110ea565b815260200190600190039081610b785790505090508a82600081518110610ba957610ba9611456565b60200260200101819052508882600181518110610bc857610bc8611456565b60200260200101819052508682600281518110610be757610be7611456565b60200260200101819052508482600381518110610c0657610c06611456565b60200260200101819052508981600081518110610c2557610c25611456565b60200260200101819052508781600181518110610c4457610c44611456565b60200260200101819052508581600281518110610c6357610c63611456565b60200260200101819052508381600381518110610c8257610c82611456565b6020026020010181905250610c978282610d59565b9b9a5050505050505050505050565b600080610ce4600080516020611483833981519152858809600080516020611483833981519152858809600080516020611483833981519152611039565b60008051602061148383398151915280868809600080516020611483833981519152868a09089150915094509492505050565b600080610d338685600080516020611483833981519152611039565b610d4c8685600080516020611483833981519152611039565b9150915094509492505050565b60008151835114610d6957600080fd5b82516000610d788260066113b7565b905060008167ffffffffffffffff811115610d9557610d9561146c565b604051908082528060200260200182016040528015610dbe578160200160208202803683370190505b50905060005b83811015610ff957868181518110610dde57610dde611456565b60200260200101516000015182826006610df891906113b7565b610e0390600061139f565b81518110610e1357610e13611456565b602002602001018181525050868181518110610e3157610e31611456565b60200260200101516020015182826006610e4b91906113b7565b610e5690600161139f565b81518110610e6657610e66611456565b602002602001018181525050858181518110610e8457610e84611456565b60209081029190910181015151015182610e9f8360066113b7565b610eaa90600261139f565b81518110610eba57610eba611456565b602002602001018181525050858181518110610ed857610ed8611456565b6020908102919091010151515182610ef18360066113b7565b610efc90600361139f565b81518110610f0c57610f0c611456565b602002602001018181525050858181518110610f2a57610f2a611456565b602002602001015160200151600160028110610f4857610f48611456565b602002015182610f598360066113b7565b610f6490600461139f565b81518110610f7457610f74611456565b602002602001018181525050858181518110610f9257610f92611456565b602002602001015160200151600060028110610fb057610fb0611456565b602002015182610fc18360066113b7565b610fcc90600561139f565b81518110610fdc57610fdc611456565b602090810291909101015280610ff1816113ed565b915050610dc4565b5061100261110f565b6000602082602086026020860160086107d05a03fa9050808015610a2357508061102b57600080fd5b505115159695505050505050565b6000818061104957611049611440565b61105384846113d6565b8508949350505050565b6040805160e08101909152600060a0820181815260c08301919091528152602081016110876110ea565b81526020016110946110ea565b81526020016110a16110ea565b8152602001606081525090565b60405180606001604052806003906020820280368337509192915050565b60405180608001604052806004906020820280368337509192915050565b60405180604001604052806110fd61112d565b815260200161110a61112d565b905290565b60405180602001604052806001906020820280368337509192915050565b60405180604001604052806002906020820280368337509192915050565b600082601f83011261115c57600080fd5b611164611353565b80838560408601111561117657600080fd5b60005b6002811015611198578135845260209384019390910190600101611179565b509095945050505050565b600082601f8301126111b457600080fd5b8135602067ffffffffffffffff808311156111d1576111d161146c565b8260051b604051601f19603f830116810181811084821117156111f6576111f661146c565b6040528481528381019250868401828801850189101561121557600080fd5b600092505b8583101561123857803584529284019260019290920191840161121a565b50979650505050505050565b60006040828403121561125657600080fd5b6040516040810181811067ffffffffffffffff821117156112795761127961146c565b604052823581526020928301359281019290925250919050565b6000808284036101208112156112a857600080fd5b610100808212156112b857600080fd5b6112c061137c565b6112ca8787611244565b81526080603f19840112156112de57600080fd5b6112e6611353565b92506112f5876040880161114b565b8352611304876080880161114b565b602084015282602082015261131c8760c08801611244565b60408201529350840135905067ffffffffffffffff81111561133d57600080fd5b611349858286016111a3565b9150509250929050565b6040805190810167ffffffffffffffff811182821017156113765761137661146c565b60405290565b6040516060810167ffffffffffffffff811182821017156113765761137661146c565b600082198211156113b2576113b261142a565b500190565b60008160001904831182151516156113d1576113d161142a565b500290565b6000828210156113e8576113e861142a565b500390565b60006000198214156114015761140161142a565b5060010190565b60008261142557634e487b7160e01b600052601260045260246000fd5b500690565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052601260045260246000fd5b634e487b7160e01b600052603260045260246000fd5b634e487b7160e01b600052604160045260246000fdfe30644e72e131a029b85045b68181585d97816a916871ca8d3c208c16d87cfd47a26469706673582212205ce099b2349e2c70184ea3c9c50b586a21f0eae4c0325a51278fe48aeb9d2fac64736f6c63430008070033';

type Rollup4VerifierConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: Rollup4VerifierConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class Rollup4Verifier__factory extends ContractFactory {
  constructor(...args: Rollup4VerifierConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Rollup4Verifier';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Rollup4Verifier> {
    return super.deploy(overrides || {}) as Promise<Rollup4Verifier>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Rollup4Verifier {
    return super.attach(address) as Rollup4Verifier;
  }
  connect(signer: Signer): Rollup4Verifier__factory {
    return super.connect(signer) as Rollup4Verifier__factory;
  }
  static readonly contractName: 'Rollup4Verifier';
  public readonly contractName: 'Rollup4Verifier';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): Rollup4VerifierInterface {
    return new utils.Interface(_abi) as Rollup4VerifierInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Rollup4Verifier {
    return new Contract(address, _abi, signerOrProvider) as Rollup4Verifier;
  }
}
