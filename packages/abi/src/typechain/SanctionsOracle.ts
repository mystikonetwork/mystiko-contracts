/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface SanctionsOracleInterface extends utils.Interface {
  contractName: 'SanctionsOracle';
  functions: {
    'addToSanctionsList(address[])': FunctionFragment;
    'changeOperator(address)': FunctionFragment;
    'isSanctioned(address)': FunctionFragment;
    'isSanctionedVerbose(address)': FunctionFragment;
    'name()': FunctionFragment;
    'removeFromSanctionsList(address[])': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'addToSanctionsList', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'changeOperator', values: [string]): string;
  encodeFunctionData(functionFragment: 'isSanctioned', values: [string]): string;
  encodeFunctionData(functionFragment: 'isSanctionedVerbose', values: [string]): string;
  encodeFunctionData(functionFragment: 'name', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeFromSanctionsList', values: [string[]]): string;

  decodeFunctionResult(functionFragment: 'addToSanctionsList', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeOperator', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSanctioned', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSanctionedVerbose', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'name', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeFromSanctionsList', data: BytesLike): Result;

  events: {
    'NonSanctionedAddress(address)': EventFragment;
    'OperatorChanged(address)': EventFragment;
    'SanctionedAddress(address)': EventFragment;
    'SanctionedAddressesAdded(address[])': EventFragment;
    'SanctionedAddressesRemoved(address[])': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'NonSanctionedAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OperatorChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SanctionedAddress'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SanctionedAddressesAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SanctionedAddressesRemoved'): EventFragment;
}

export type NonSanctionedAddressEvent = TypedEvent<[string], { addr: string }>;

export type NonSanctionedAddressEventFilter = TypedEventFilter<NonSanctionedAddressEvent>;

export type OperatorChangedEvent = TypedEvent<[string], { operator: string }>;

export type OperatorChangedEventFilter = TypedEventFilter<OperatorChangedEvent>;

export type SanctionedAddressEvent = TypedEvent<[string], { addr: string }>;

export type SanctionedAddressEventFilter = TypedEventFilter<SanctionedAddressEvent>;

export type SanctionedAddressesAddedEvent = TypedEvent<[string[]], { addrs: string[] }>;

export type SanctionedAddressesAddedEventFilter = TypedEventFilter<SanctionedAddressesAddedEvent>;

export type SanctionedAddressesRemovedEvent = TypedEvent<[string[]], { addrs: string[] }>;

export type SanctionedAddressesRemovedEventFilter = TypedEventFilter<SanctionedAddressesRemovedEvent>;

export interface SanctionsOracle extends BaseContract {
  contractName: 'SanctionsOracle';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: SanctionsOracleInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addToSanctionsList(
      newSanctions: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    changeOperator(
      _newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    isSanctioned(addr: string, overrides?: CallOverrides): Promise<[boolean]>;

    isSanctionedVerbose(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    name(overrides?: CallOverrides): Promise<[string]>;

    removeFromSanctionsList(
      removeSanctions: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  addToSanctionsList(
    newSanctions: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  changeOperator(
    _newOperator: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  isSanctioned(addr: string, overrides?: CallOverrides): Promise<boolean>;

  isSanctionedVerbose(
    addr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  name(overrides?: CallOverrides): Promise<string>;

  removeFromSanctionsList(
    removeSanctions: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    addToSanctionsList(newSanctions: string[], overrides?: CallOverrides): Promise<void>;

    changeOperator(_newOperator: string, overrides?: CallOverrides): Promise<void>;

    isSanctioned(addr: string, overrides?: CallOverrides): Promise<boolean>;

    isSanctionedVerbose(addr: string, overrides?: CallOverrides): Promise<boolean>;

    name(overrides?: CallOverrides): Promise<string>;

    removeFromSanctionsList(removeSanctions: string[], overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'NonSanctionedAddress(address)'(addr?: string | null): NonSanctionedAddressEventFilter;
    NonSanctionedAddress(addr?: string | null): NonSanctionedAddressEventFilter;

    'OperatorChanged(address)'(operator?: string | null): OperatorChangedEventFilter;
    OperatorChanged(operator?: string | null): OperatorChangedEventFilter;

    'SanctionedAddress(address)'(addr?: string | null): SanctionedAddressEventFilter;
    SanctionedAddress(addr?: string | null): SanctionedAddressEventFilter;

    'SanctionedAddressesAdded(address[])'(addrs?: null): SanctionedAddressesAddedEventFilter;
    SanctionedAddressesAdded(addrs?: null): SanctionedAddressesAddedEventFilter;

    'SanctionedAddressesRemoved(address[])'(addrs?: null): SanctionedAddressesRemovedEventFilter;
    SanctionedAddressesRemoved(addrs?: null): SanctionedAddressesRemovedEventFilter;
  };

  estimateGas: {
    addToSanctionsList(
      newSanctions: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    changeOperator(
      _newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    isSanctioned(addr: string, overrides?: CallOverrides): Promise<BigNumber>;

    isSanctionedVerbose(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    name(overrides?: CallOverrides): Promise<BigNumber>;

    removeFromSanctionsList(
      removeSanctions: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    addToSanctionsList(
      newSanctions: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    changeOperator(
      _newOperator: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    isSanctioned(addr: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSanctionedVerbose(
      addr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    name(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeFromSanctionsList(
      removeSanctions: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
