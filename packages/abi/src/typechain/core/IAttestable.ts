/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface IAttestableInterface extends utils.Interface {
  contractName: 'IAttestable';
  functions: {
    'attesterManager()': FunctionFragment;
    'disableAttester(address)': FunctionFragment;
    'enableAttester(address)': FunctionFragment;
    'getEnabledAttester(uint256)': FunctionFragment;
    'getNumEnabledAttesters()': FunctionFragment;
    'isEnabledAttester(address)': FunctionFragment;
    'setSignatureThreshold(uint256)': FunctionFragment;
    'updateAttesterManager(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'attesterManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'disableAttester', values: [string]): string;
  encodeFunctionData(functionFragment: 'enableAttester', values: [string]): string;
  encodeFunctionData(functionFragment: 'getEnabledAttester', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getNumEnabledAttesters', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isEnabledAttester', values: [string]): string;
  encodeFunctionData(functionFragment: 'setSignatureThreshold', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'updateAttesterManager', values: [string]): string;

  decodeFunctionResult(functionFragment: 'attesterManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableAttester', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableAttester', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEnabledAttester', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNumEnabledAttesters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isEnabledAttester', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSignatureThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAttesterManager', data: BytesLike): Result;

  events: {
    'AttesterDisabled(address)': EventFragment;
    'AttesterEnabled(address)': EventFragment;
    'AttesterManagerUpdated(address,address)': EventFragment;
    'SignatureThresholdUpdated(uint256,uint256)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AttesterDisabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AttesterEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AttesterManagerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SignatureThresholdUpdated'): EventFragment;
}

export type AttesterDisabledEvent = TypedEvent<[string], { attester: string }>;

export type AttesterDisabledEventFilter = TypedEventFilter<AttesterDisabledEvent>;

export type AttesterEnabledEvent = TypedEvent<[string], { attester: string }>;

export type AttesterEnabledEventFilter = TypedEventFilter<AttesterEnabledEvent>;

export type AttesterManagerUpdatedEvent = TypedEvent<
  [string, string],
  { previousAttesterManager: string; newAttesterManager: string }
>;

export type AttesterManagerUpdatedEventFilter = TypedEventFilter<AttesterManagerUpdatedEvent>;

export type SignatureThresholdUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldSignatureThreshold: BigNumber; newSignatureThreshold: BigNumber }
>;

export type SignatureThresholdUpdatedEventFilter = TypedEventFilter<SignatureThresholdUpdatedEvent>;

export interface IAttestable extends BaseContract {
  contractName: 'IAttestable';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IAttestableInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    attesterManager(overrides?: CallOverrides): Promise<[string]>;

    disableAttester(
      attester: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enableAttester(
      attester: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getEnabledAttester(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getNumEnabledAttesters(overrides?: CallOverrides): Promise<[BigNumber]>;

    isEnabledAttester(attester: string, overrides?: CallOverrides): Promise<[boolean]>;

    setSignatureThreshold(
      newSignatureThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updateAttesterManager(
      newAttesterManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  attesterManager(overrides?: CallOverrides): Promise<string>;

  disableAttester(
    attester: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enableAttester(
    attester: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getEnabledAttester(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getNumEnabledAttesters(overrides?: CallOverrides): Promise<BigNumber>;

  isEnabledAttester(attester: string, overrides?: CallOverrides): Promise<boolean>;

  setSignatureThreshold(
    newSignatureThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updateAttesterManager(
    newAttesterManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    attesterManager(overrides?: CallOverrides): Promise<string>;

    disableAttester(attester: string, overrides?: CallOverrides): Promise<void>;

    enableAttester(attester: string, overrides?: CallOverrides): Promise<void>;

    getEnabledAttester(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getNumEnabledAttesters(overrides?: CallOverrides): Promise<BigNumber>;

    isEnabledAttester(attester: string, overrides?: CallOverrides): Promise<boolean>;

    setSignatureThreshold(newSignatureThreshold: BigNumberish, overrides?: CallOverrides): Promise<void>;

    updateAttesterManager(newAttesterManager: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'AttesterDisabled(address)'(attester?: string | null): AttesterDisabledEventFilter;
    AttesterDisabled(attester?: string | null): AttesterDisabledEventFilter;

    'AttesterEnabled(address)'(attester?: string | null): AttesterEnabledEventFilter;
    AttesterEnabled(attester?: string | null): AttesterEnabledEventFilter;

    'AttesterManagerUpdated(address,address)'(
      previousAttesterManager?: string | null,
      newAttesterManager?: string | null,
    ): AttesterManagerUpdatedEventFilter;
    AttesterManagerUpdated(
      previousAttesterManager?: string | null,
      newAttesterManager?: string | null,
    ): AttesterManagerUpdatedEventFilter;

    'SignatureThresholdUpdated(uint256,uint256)'(
      oldSignatureThreshold?: null,
      newSignatureThreshold?: null,
    ): SignatureThresholdUpdatedEventFilter;
    SignatureThresholdUpdated(
      oldSignatureThreshold?: null,
      newSignatureThreshold?: null,
    ): SignatureThresholdUpdatedEventFilter;
  };

  estimateGas: {
    attesterManager(overrides?: CallOverrides): Promise<BigNumber>;

    disableAttester(
      attester: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    enableAttester(
      attester: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getEnabledAttester(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getNumEnabledAttesters(overrides?: CallOverrides): Promise<BigNumber>;

    isEnabledAttester(attester: string, overrides?: CallOverrides): Promise<BigNumber>;

    setSignatureThreshold(
      newSignatureThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updateAttesterManager(
      newAttesterManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    attesterManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableAttester(
      attester: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enableAttester(
      attester: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getEnabledAttester(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumEnabledAttesters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEnabledAttester(attester: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    setSignatureThreshold(
      newSignatureThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updateAttesterManager(
      newAttesterManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
