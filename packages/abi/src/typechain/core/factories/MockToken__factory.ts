/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides, BigNumberish } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { MockToken, MockTokenInterface } from '../MockToken';

const _abi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: '_name',
        type: 'string',
      },
      {
        internalType: 'string',
        name: '_symbol',
        type: 'string',
      },
      {
        internalType: 'uint8',
        name: '_decimals',
        type: 'uint8',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'subtractedValue',
        type: 'uint256',
      },
    ],
    name: 'decreaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'addedValue',
        type: 'uint256',
      },
    ],
    name: 'increaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x60806040523480156200001157600080fd5b5060405162000e7a38038062000e7a83398101604081905262000034916200022b565b828260036200004483826200033e565b5060046200005382826200033e565b50506005805460ff191660ff841690811790915562000092915033906200007c90600a6200051f565b6200008c90633b9aca0062000534565b6200009b565b50505062000564565b6001600160a01b038216620000f65760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80600260008282546200010a91906200054e565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b505050565b634e487b7160e01b600052604160045260246000fd5b600082601f8301126200018e57600080fd5b81516001600160401b0380821115620001ab57620001ab62000166565b604051601f8301601f19908116603f01168101908282118183101715620001d657620001d662000166565b81604052838152602092508683858801011115620001f357600080fd5b600091505b83821015620002175785820183015181830184015290820190620001f8565b600093810190920192909252949350505050565b6000806000606084860312156200024157600080fd5b83516001600160401b03808211156200025957600080fd5b62000267878388016200017c565b945060208601519150808211156200027e57600080fd5b506200028d868287016200017c565b925050604084015160ff81168114620002a557600080fd5b809150509250925092565b600181811c90821680620002c557607f821691505b602082108103620002e657634e487b7160e01b600052602260045260246000fd5b50919050565b601f8211156200016157600081815260208120601f850160051c81016020861015620003155750805b601f850160051c820191505b81811015620003365782815560010162000321565b505050505050565b81516001600160401b038111156200035a576200035a62000166565b62000372816200036b8454620002b0565b84620002ec565b602080601f831160018114620003aa5760008415620003915750858301515b600019600386901b1c1916600185901b17855562000336565b600085815260208120601f198616915b82811015620003db57888601518255948401946001909101908401620003ba565b5085821015620003fa5787850151600019600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b600181815b80851115620004615781600019048211156200044557620004456200040a565b808516156200045357918102915b93841c939080029062000425565b509250929050565b6000826200047a5750600162000519565b81620004895750600062000519565b8160018114620004a25760028114620004ad57620004cd565b600191505062000519565b60ff841115620004c157620004c16200040a565b50506001821b62000519565b5060208310610133831016604e8410600b8410161715620004f2575081810a62000519565b620004fe838362000420565b80600019048211156200051557620005156200040a565b0290505b92915050565b60006200052d838362000469565b9392505050565b80820281158282048414176200051957620005196200040a565b808201808211156200051957620005196200040a565b61090680620005746000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d71461018d578063a9059cbb146101a0578063dd62ed3e146101b357600080fd5b8063395093511461014957806370a082311461015c57806395d89b411461018557600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d66101ec565b6040516100e39190610750565b60405180910390f35b6100ff6100fa3660046107ba565b61027e565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f3660046107e4565b610298565b60055460405160ff90911681526020016100e3565b6100ff6101573660046107ba565b6102bc565b61011361016a366004610820565b6001600160a01b031660009081526020819052604090205490565b6100d66102fb565b6100ff61019b3660046107ba565b61030a565b6100ff6101ae3660046107ba565b6103b9565b6101136101c1366004610842565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101fb90610875565b80601f016020809104026020016040519081016040528092919081815260200182805461022790610875565b80156102745780601f1061024957610100808354040283529160200191610274565b820191906000526020600020905b81548152906001019060200180831161025757829003601f168201915b5050505050905090565b60003361028c8185856103c7565b60019150505b92915050565b6000336102a68582856104eb565b6102b185858561057d565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061028c90829086906102f69087906108af565b6103c7565b6060600480546101fb90610875565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103ac5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102b182868684036103c7565b60003361028c81858561057d565b6001600160a01b0383166104295760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103a3565b6001600160a01b03821661048a5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103a3565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610577578181101561056a5760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103a3565b61057784848484036103c7565b50505050565b6001600160a01b0383166105f95760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103a3565b6001600160a01b03821661065b5760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103a3565b6001600160a01b038316600090815260208190526040902054818110156106ea5760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103a3565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610577565b600060208083528351808285015260005b8181101561077d57858101830151858201604001528201610761565b506000604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146107b557600080fd5b919050565b600080604083850312156107cd57600080fd5b6107d68361079e565b946020939093013593505050565b6000806000606084860312156107f957600080fd5b6108028461079e565b92506108106020850161079e565b9150604084013590509250925092565b60006020828403121561083257600080fd5b61083b8261079e565b9392505050565b6000806040838503121561085557600080fd5b61085e8361079e565b915061086c6020840161079e565b90509250929050565b600181811c9082168061088957607f821691505b6020821081036108a957634e487b7160e01b600052602260045260246000fd5b50919050565b8082018082111561029257634e487b7160e01b600052601160045260246000fdfea2646970667358221220410ed11da0a354bdc050d7b8f7159c831662620228b9a04a0063524930f5422364736f6c63430008140033';

type MockTokenConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: MockTokenConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class MockToken__factory extends ContractFactory {
  constructor(...args: MockTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'MockToken';
  }

  deploy(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<MockToken> {
    return super.deploy(_name, _symbol, _decimals, overrides || {}) as Promise<MockToken>;
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _symbol, _decimals, overrides || {});
  }
  attach(address: string): MockToken {
    return super.attach(address) as MockToken;
  }
  connect(signer: Signer): MockToken__factory {
    return super.connect(signer) as MockToken__factory;
  }
  static readonly contractName: 'MockToken';
  public readonly contractName: 'MockToken';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTokenInterface {
    return new utils.Interface(_abi) as MockTokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockToken {
    return new Contract(address, _abi, signerOrProvider) as MockToken;
  }
}
