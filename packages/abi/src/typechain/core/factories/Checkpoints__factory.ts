/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { Checkpoints, CheckpointsInterface } from '../Checkpoints';

const _abi = [
  {
    inputs: [],
    name: 'CheckpointUnorderedInsertion',
    type: 'error',
  },
];

const _bytecode =
  '0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212204e83e6a5379f283351964e04867581d2c0c54cba6bdb0cd4dd14d6e87abbab8564736f6c634300081a0033';

type CheckpointsConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: CheckpointsConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class Checkpoints__factory extends ContractFactory {
  constructor(...args: CheckpointsConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'Checkpoints';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<Checkpoints> {
    return super.deploy(overrides || {}) as Promise<Checkpoints>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): Checkpoints {
    return super.attach(address) as Checkpoints;
  }
  connect(signer: Signer): Checkpoints__factory {
    return super.connect(signer) as Checkpoints__factory;
  }
  static readonly contractName: 'Checkpoints';
  public readonly contractName: 'Checkpoints';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CheckpointsInterface {
    return new utils.Interface(_abi) as CheckpointsInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): Checkpoints {
    return new Contract(address, _abi, signerOrProvider) as Checkpoints;
  }
}
