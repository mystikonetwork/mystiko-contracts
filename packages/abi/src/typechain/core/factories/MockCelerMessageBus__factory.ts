/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { MockCelerMessageBus, MockCelerMessageBusInterface } from '../MockCelerMessageBus';

const _abi = [
  {
    inputs: [],
    name: 'chainIdA',
    outputs: [
      {
        internalType: 'uint64',
        name: '',
        type: 'uint64',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'chainIdB',
    outputs: [
      {
        internalType: 'uint64',
        name: '',
        type: 'uint64',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'contractAddressA',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'contractAddressB',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_receiver',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: '_dstChainId',
        type: 'uint256',
      },
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'sendMessage',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: '_chainIdA',
        type: 'uint64',
      },
      {
        internalType: 'address',
        name: '_contractAddressA',
        type: 'address',
      },
      {
        internalType: 'uint64',
        name: '_chainIdB',
        type: 'uint64',
      },
      {
        internalType: 'address',
        name: '_contractAddressB',
        type: 'address',
      },
    ],
    name: 'setChainPair',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608080604052346015576104b8908161001b8239f35b600080fdfe608080604052600436101561001357600080fd5b60003560e01c908163063e71281461043b5750806310ef7795146104115780632e60121f146103e957806372b53dfa146103195780639f3ce55a146100905763bbfb52fb1461006157600080fd5b3461008b57600036600319011261008b5760206001600160a01b0360015460401c16604051908152f35b600080fd5b606036600319011261008b576004356001600160a01b03811680910361008b576044359060243567ffffffffffffffff831161008b573660238401121561008b57826004013567ffffffffffffffff811161030357604051936100fd601f8301601f191660200186610460565b818552366024838301011161008b578160009260246020930183880137850101526000549067ffffffffffffffff82169081810361028a575050506001549167ffffffffffffffff6001600160a01b038185169460401c1691906001600160a01b03945b604051958694639c649fdf60e01b86521660048501521660248301526080604483015280519081608484015260005b8281106102725750509181600060a48286838360209984010152326064830152601f801991011681010301925af190811561026657600091610224575b50156101d557005b60405162461bcd60e51b815260206004820152602160248201527f63616c6c20657865637574654d6573736167652072657475726e73206572726f6044820152603960f91b6064820152608490fd5b6020813d60201161025e575b8161023d60209383610460565b8101031261025a57519081151582036102575750816101cd565b80fd5b5080fd5b3d9150610230565b6040513d6000823e3d90fd5b602082820181015160a4888401015286945001610190565b60015492949267ffffffffffffffff16036102be576001600160a01b039360401c8416919067ffffffffffffffff90610161565b60405162461bcd60e51b815260206004820152601560248201527f6e6f7420737570706f72742074686973207065657200000000000000000000006044820152606490fd5b634e487b7160e01b600052604160045260246000fd5b3461008b57608036600319011261008b5760043567ffffffffffffffff811680910361008b576024356001600160a01b038116810361008b576044359067ffffffffffffffff821680920361008b57606435926001600160a01b038416840361008b577bffffffffffffffffffffffffffffffffffffffff00000000000000006000549260401b169163ffffffff60e01b1617176000557bffffffffffffffffffffffffffffffffffffffff00000000000000006001549260401b169163ffffffff60e01b161717600155600080f35b3461008b57600036600319011261008b57602067ffffffffffffffff60015416604051908152f35b3461008b57600036600319011261008b5760206001600160a01b0360005460401c16604051908152f35b3461008b57600036600319011261008b5760209067ffffffffffffffff600054168152f35b90601f8019910116810190811067ffffffffffffffff8211176103035760405256fea2646970667358221220b8459006cdddc13e563e81b488ac3bc982f1c65138295ff587f88c8880d8fb6f64736f6c634300081a0033';

type MockCelerMessageBusConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockCelerMessageBusConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockCelerMessageBus__factory extends ContractFactory {
  constructor(...args: MockCelerMessageBusConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'MockCelerMessageBus';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<MockCelerMessageBus> {
    return super.deploy(overrides || {}) as Promise<MockCelerMessageBus>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockCelerMessageBus {
    return super.attach(address) as MockCelerMessageBus;
  }
  connect(signer: Signer): MockCelerMessageBus__factory {
    return super.connect(signer) as MockCelerMessageBus__factory;
  }
  static readonly contractName: 'MockCelerMessageBus';
  public readonly contractName: 'MockCelerMessageBus';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockCelerMessageBusInterface {
    return new utils.Interface(_abi) as MockCelerMessageBusInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockCelerMessageBus {
    return new Contract(address, _abi, signerOrProvider) as MockCelerMessageBus;
  }
}
