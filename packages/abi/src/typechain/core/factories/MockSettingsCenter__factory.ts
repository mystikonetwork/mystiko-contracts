/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { MockSettingsCenter, MockSettingsCenterInterface } from '../MockSettingsCenter';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
];

const _bytecode =
  '0x6080604052348015600f57600080fd5b50603f80601d6000396000f3fe6080604052600080fdfea2646970667358221220163651cb8b9c98c6234ef0bef7be3f349a39955a9c860934f068bfc6b29336da64736f6c63430008140033';

type MockSettingsCenterConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockSettingsCenterConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSettingsCenter__factory extends ContractFactory {
  constructor(...args: MockSettingsCenterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'MockSettingsCenter';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<MockSettingsCenter> {
    return super.deploy(overrides || {}) as Promise<MockSettingsCenter>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockSettingsCenter {
    return super.attach(address) as MockSettingsCenter;
  }
  connect(signer: Signer): MockSettingsCenter__factory {
    return super.connect(signer) as MockSettingsCenter__factory;
  }
  static readonly contractName: 'MockSettingsCenter';
  public readonly contractName: 'MockSettingsCenter';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSettingsCenterInterface {
    return new utils.Interface(_abi) as MockSettingsCenterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockSettingsCenter {
    return new Contract(address, _abi, signerOrProvider) as MockSettingsCenter;
  }
}
