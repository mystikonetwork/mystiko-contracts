/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides, BigNumberish } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { MystikoSettingsCenter, MystikoSettingsCenterInterface } from '../MystikoSettingsCenter';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_daoCenter',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_rollerRegistry',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_relayerRegistry',
        type: 'address',
      },
      {
        internalType: 'address[5]',
        name: '_rollupVerifiers',
        type: 'address[5]',
      },
      {
        internalType: 'address[6]',
        name: '_transactVerifiers',
        type: 'address[6]',
      },
      {
        internalType: 'uint256[5]',
        name: '_auditors',
        type: 'uint256[5]',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'AuditorIndexError',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidRollupSize',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NotChanged',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NumInputsGreaterThanZero',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OnlyMystikoDAO',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RollupSizeNotPowerOfTwo',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'index',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'publicKey',
        type: 'uint256',
      },
    ],
    name: 'AuditorPublicKeyUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'registry',
        type: 'address',
      },
    ],
    name: 'RelayerRegistryChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'registry',
        type: 'address',
      },
    ],
    name: 'RollerRegistryChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint32',
        name: 'rollupSize',
        type: 'uint32',
      },
    ],
    name: 'RollupVerifierDisabled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint32',
        name: 'rollupSize',
        type: 'uint32',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'verifier',
        type: 'address',
      },
    ],
    name: 'RollupVerifierEnabled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint32',
        name: 'inputNumber',
        type: 'uint32',
      },
      {
        indexed: false,
        internalType: 'uint32',
        name: 'outputNumber',
        type: 'uint32',
      },
    ],
    name: 'TransactVerifierDisabled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint32',
        name: 'inputNumber',
        type: 'uint32',
      },
      {
        indexed: false,
        internalType: 'uint32',
        name: 'outputNumber',
        type: 'uint32',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'verifier',
        type: 'address',
      },
    ],
    name: 'TransactVerifierEnabled',
    type: 'event',
  },
  {
    inputs: [],
    name: 'AUDITOR_COUNT',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'pool',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'relayer',
            type: 'address',
          },
        ],
        internalType: 'struct CanDoRelayParams',
        name: '_params',
        type: 'tuple',
      },
    ],
    name: 'canDoRelay',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'pool',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'roller',
            type: 'address',
          },
          {
            internalType: 'uint256',
            name: 'rollupSize',
            type: 'uint256',
          },
        ],
        internalType: 'struct CanDoRollupParams',
        name: '_params',
        type: 'tuple',
      },
    ],
    name: 'canDoRollup',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'center',
    outputs: [
      {
        internalType: 'contract IMystikoGovernorCenter',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_newRelayerRegistry',
        type: 'address',
      },
    ],
    name: 'changeRelayerRegistry',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_newRollerRegistry',
        type: 'address',
      },
    ],
    name: 'changeRollerRegistry',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_rollupSize',
        type: 'uint32',
      },
    ],
    name: 'disableRollupVerifier',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_numInputs',
        type: 'uint32',
      },
      {
        internalType: 'uint32',
        name: '_numOutputs',
        type: 'uint32',
      },
    ],
    name: 'disableTransactVerifier',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_rollupSize',
        type: 'uint32',
      },
      {
        internalType: 'address',
        name: '_rollupVerifier',
        type: 'address',
      },
    ],
    name: 'enableRollupVerifier',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_numInputs',
        type: 'uint32',
      },
      {
        internalType: 'uint32',
        name: '_numOutputs',
        type: 'uint32',
      },
      {
        internalType: 'address',
        name: '_transactVerifier',
        type: 'address',
      },
    ],
    name: 'enableTransactVerifier',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'queryAllAuditorPublicKeys',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_index',
        type: 'uint256',
      },
    ],
    name: 'queryAuditorPublicKey',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_rollupSize',
        type: 'uint32',
      },
    ],
    name: 'queryRollupVerifier',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'verifier',
            type: 'address',
          },
          {
            internalType: 'bool',
            name: 'enabled',
            type: 'bool',
          },
        ],
        internalType: 'struct WrappedVerifier',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: '_numInputs',
        type: 'uint32',
      },
      {
        internalType: 'uint32',
        name: '_numOutputs',
        type: 'uint32',
      },
    ],
    name: 'queryTransactVerifier',
    outputs: [
      {
        components: [
          {
            internalType: 'address',
            name: 'verifier',
            type: 'address',
          },
          {
            internalType: 'bool',
            name: 'enabled',
            type: 'bool',
          },
        ],
        internalType: 'struct WrappedVerifier',
        name: '',
        type: 'tuple',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'relayerRegistry',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'rollerRegistry',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_index',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: '_publicKey',
        type: 'uint256',
      },
    ],
    name: 'updateAuditorPublicKey',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801562000010575f80fd5b506040516200179d3803806200179d8339810160408190526200003391620005e5565b5f80546001600160a01b038881166001600160a01b031990921691909117825560408051808201825286518316815260016020808301828152828752600280835293517fe90b7bceb6e7df5418fb78d8ee546e97c83a08bbccc01a0644d599ccd2a7c2e0805492519188166001600160a81b031993841617600160a01b921515830217905585518087018752838c015188168152808401858152868a5286855290517f679795a0195a1b76cdebb7c51d74e058aee92919b8c3389af86ef24535e8a28c80549251918a16928516929092179015158302179055855180870187528b8701518816815280840185815260048a5286855290517fee60d0579bcffd98e668647d59fec1ff86a7fb340ce572e844f234ae73a6918f80549251918a16928516929092179015158302179055855180870187526060808d01518916825281850186815260088b5287865291517f3a5ea591190eeb3f8fcdced843c78df04ec0dfd42f5510375207515664fa0a7580549351918b1693861693909317901515840217909155865180880188526080808e01518a16825281860187815260108c5288875291517f328b8e687a0a963892a735f0237cb763bbbbf8ba0c1dfe2c221debb32c4bbd8980549351918c1693871693909317901515850217909155875180890189528c518a1681528086018781528b80527fcc69885fda6bcc1a4ace058b4a62bf5e179ea78fd58a1ccd71c22cc9b688792f80885291517f09d41a60c7eb9e1f3f38bbee2eea2761087cd398a4df0eb22dbaa4eaa274957c80549251918d169288169290921790151586021790558851808a018a52868e01518b168152808701888152888d5282885290517fedb38a93e6e2e82dbb40826a878df1d817a37ef13fcaa25248649a90fa47497b80549251918d169288169290921790151586021790558851808a018a528d8a01518b168152808701888152898d52918752517f58e76cff22dd72278c8f84685a17f449f02ff85d2e9a03f82022b6f39564086080549251918c1692871692909217901515850217905587518089018952918c0151891682528185018681528a80527fd9d16d34ffb15ba3a3d852f0d403e2ce1d691fb54de27ac87cd2f993f3ec330f80875292517fdbf00e7ae1b41a7f88200c81b3488ab68158ddd50fc472b3c3e2284a7349346d80549251918c1692871692909217901515850217905587518089018952908c015189168152808501868152868b5282865290517fe28818af7bb947aef01108c00a0155d810d5eea20893e766795b298bc4db781980549251918b16928616929092179015158402179055865180880190975260a08b0151881687528684019485529488529390915292517f42f44160cc2e77bbab1a45023ad285dcfafdd00b6fed6e77933c71a0ddb5df3f805492519190951691909316179115150217905581905b60058110156200049d578181600581106200046b576200046b620006ca565b602002015160038260058110620004865762000486620006ca565b0155806200049481620006de565b9150506200044c565b5050600880546001600160a01b039687166001600160a01b0319918216179091556009805495909616941693909317909355506200070392505050565b80516001600160a01b0381168114620004f1575f80fd5b919050565b634e487b7160e01b5f52604160045260245ffd5b60405160a081016001600160401b03811182821017156200052f576200052f620004f6565b60405290565b5f620005406200050a565b90508060a083018481111562000554575f80fd5b835b8181101562000579576200056a81620004da565b83526020928301920162000556565b50505092915050565b6040515f9060c081016001600160401b0381118282101715620005a957620005a9620004f6565b60405290508060c0830184811115620005c0575f80fd5b835b818110156200057957620005d681620004da565b835260209283019201620005c2565b5f805f805f8061026080888a031215620005fd575f80fd5b6200060888620004da565b9650602062000619818a01620004da565b96506200062960408a01620004da565b955089607f8a01126200063a575f80fd5b620006498a60608b0162000535565b94508961011f8a01126200065b575f80fd5b6200066b8a6101008b0162000582565b9350896101df8a01126200067d575f80fd5b620006876200050a565b91890191808b84111562000699575f80fd5b6101c08b015b84811015620006b857805183529183019183016200069f565b50809450505050509295509295509295565b634e487b7160e01b5f52603260045260245ffd5b5f60018201620006fc57634e487b7160e01b5f52601160045260245ffd5b5060010190565b61108c80620007115f395ff3fe608060405234801561000f575f80fd5b5060043610610115575f3560e01c8063a592bd69116100ad578063c112de6c1161007d578063dbda082911610063578063dbda082914610320578063dd53f8a114610333578063deeff7cd14610346575f80fd5b8063c112de6c146102f8578063c259e2e61461030d575f80fd5b8063a592bd6914610299578063a7d73abb146102af578063b474c10c146102c2578063bf420c56146102d5575f80fd5b806347ff589d116100e857806347ff589d146101f75780637fa4b09c1461020a57806385e861eb1461021d5780639b0a6fea14610286575f80fd5b80630c0d0786146101195780630c8867e61461012e5780631f02d715146101415780632d7ea99814610170575b5f80fd5b61012c610127366004610da4565b610359565b005b61012c61013c366004610dc6565b61046e565b5f54610153906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6101d161017e366004610dfe565b604080518082019091525f80825260208201525063ffffffff165f908152600260209081526040918290208251808401909352546001600160a01b0381168352600160a01b900460ff1615159082015290565b6040805182516001600160a01b0316815260209283015115159281019290925201610167565b600954610153906001600160a01b031681565b61012c610218366004610e17565b6105a3565b6101d161022b366004610e5b565b6040805180820182525f808252602091820181905263ffffffff948516815260018252828120939094168452918252918290208251808401909352546001600160a01b0381168352600160a01b900460ff1615159082015290565b61012c610294366004610dfe565b610711565b6102a1600581565b604051908152602001610167565b600854610153906001600160a01b031681565b61012c6102d0366004610da4565b610862565b6102e86102e3366004610e8c565b610977565b6040519015158152602001610167565b6103006109ec565b6040516101679190610e9c565b61012c61031b366004610e5b565b610a67565b6102a161032e366004610edf565b610b89565b6102e8610341366004610ef6565b610bc6565b61012c610354366004610f06565b610bf6565b5f54604080516361070aa960e01b8152905133926001600160a01b0316916361070aa99160048083019260209291908290030181865afa15801561039f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906103c39190610f3b565b6001600160a01b0316146103ea5760405163177bc95160e11b815260040160405180910390fd5b6009546001600160a01b03808316911603610418576040516336a1c33f60e01b815260040160405180910390fd5b6009805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f5fb1f555c248f03010c7d4689477528a48fa36768f01584e23bb2b7748096e3c905f90a250565b5f54604080516361070aa960e01b8152905133926001600160a01b0316916361070aa99160048083019260209291908290030181865afa1580156104b4573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104d89190610f3b565b6001600160a01b0316146104ff5760405163177bc95160e11b815260040160405180910390fd5b600582106105205760405163318c434560e21b815260040160405180910390fd5b806003836005811061053457610534610f56565b015403610554576040516336a1c33f60e01b815260040160405180910390fd5b806003836005811061056857610568610f56565b015560405181815282907f90c1be9f7438bda0c157901e648d96325a6e063a310ed2d94995305b36032def9060200160405180910390a25050565b5f54604080516361070aa960e01b8152905133926001600160a01b0316916361070aa99160048083019260209291908290030181865afa1580156105e9573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061060d9190610f3b565b6001600160a01b0316146106345760405163177bc95160e11b815260040160405180910390fd5b8263ffffffff165f0361065a57604051639f7bd94b60e01b815260040160405180910390fd5b6040805180820182526001600160a01b038381168083526001602080850182815263ffffffff8a81165f818152948452888520918b16808652918452938890209651875492511515600160a01b0274ffffffffffffffffffffffffffffffffffffffffff1990931696169590951717909455845190815292830191909152918101919091527f62572f755900ce67d07f23ea841c214cf43511a22d2ea2c19649387fa511cf269060600160405180910390a1505050565b5f54604080516361070aa960e01b8152905133926001600160a01b0316916361070aa99160048083019260209291908290030181865afa158015610757573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061077b9190610f3b565b6001600160a01b0316146107a25760405163177bc95160e11b815260040160405180910390fd5b63ffffffff811615806107bc57506104008163ffffffff16115b156107da576040516309ad7f4b60e21b815260040160405180910390fd5b6107e5600182610f7e565b811663ffffffff165f1461080c576040516322717ff960e01b815260040160405180910390fd5b63ffffffff81165f81815260026020908152604091829020805460ff60a01b1916905590519182527f4690516d72338b0199392ee28062eb371a5370b0df29e5818b46a5386c48b69d910160405180910390a150565b5f54604080516361070aa960e01b8152905133926001600160a01b0316916361070aa99160048083019260209291908290030181865afa1580156108a8573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906108cc9190610f3b565b6001600160a01b0316146108f35760405163177bc95160e11b815260040160405180910390fd5b6008546001600160a01b03808316911603610921576040516336a1c33f60e01b815260040160405180910390fd5b6008805473ffffffffffffffffffffffffffffffffffffffff19166001600160a01b0383169081179091556040517f92e50816b03798f7049608b42acd59748185fa0c0844c2e29fe3e722454033b5905f90a250565b600954604051635fa1062b60e11b81525f916001600160a01b03169063bf420c56906109a7908590600401610fa2565b602060405180830381865afa1580156109c2573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906109e69190610fdd565b92915050565b60408051600580825260c082019092526060915f91906020820160a0803683370190505090505f5b6005811015610a615760038160058110610a3057610a30610f56565b0154828281518110610a4457610a44610f56565b602090810291909101015280610a5981610ffc565b915050610a14565b50919050565b5f54604080516361070aa960e01b8152905133926001600160a01b0316916361070aa99160048083019260209291908290030181865afa158015610aad573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610ad19190610f3b565b6001600160a01b031614610af85760405163177bc95160e11b815260040160405180910390fd5b8163ffffffff165f03610b1e57604051639f7bd94b60e01b815260040160405180910390fd5b63ffffffff8281165f81815260016020908152604080832094861680845294825291829020805460ff60a01b1916905581519283528201929092527f68975a479ff4df5932418b38e44f50afeedc4dbd4705e245862b81f0f9d2658691015b60405180910390a15050565b5f60058210610bab5760405163318c434560e21b815260040160405180910390fd5b60038260058110610bbe57610bbe610f56565b015492915050565b60085460405163dd53f8a160e01b81525f916001600160a01b03169063dd53f8a1906109a7908590600401611014565b5f54604080516361070aa960e01b8152905133926001600160a01b0316916361070aa99160048083019260209291908290030181865afa158015610c3c573d5f803e3d5ffd5b505050506040513d601f19601f82011682018060405250810190610c609190610f3b565b6001600160a01b031614610c875760405163177bc95160e11b815260040160405180910390fd5b63ffffffff82161580610ca157506104008263ffffffff16115b15610cbf576040516309ad7f4b60e21b815260040160405180910390fd5b610cca600183610f7e565b821663ffffffff165f14610cf1576040516322717ff960e01b815260040160405180910390fd5b6040805180820182526001600160a01b038381168083526001602080850191825263ffffffff88165f818152600283528790209551865493511515600160a01b0274ffffffffffffffffffffffffffffffffffffffffff19909416951694909417919091179093558351918252918101919091527fb4fe9f79bc0939e84a9865a56e359050e9a122528a7e9e2943bfaad8ef634b729101610b7d565b6001600160a01b0381168114610da1575f80fd5b50565b5f60208284031215610db4575f80fd5b8135610dbf81610d8d565b9392505050565b5f8060408385031215610dd7575f80fd5b50508035926020909101359150565b803563ffffffff81168114610df9575f80fd5b919050565b5f60208284031215610e0e575f80fd5b610dbf82610de6565b5f805f60608486031215610e29575f80fd5b610e3284610de6565b9250610e4060208501610de6565b91506040840135610e5081610d8d565b809150509250925092565b5f8060408385031215610e6c575f80fd5b610e7583610de6565b9150610e8360208401610de6565b90509250929050565b5f60408284031215610a61575f80fd5b602080825282518282018190525f9190848201906040850190845b81811015610ed357835183529284019291840191600101610eb7565b50909695505050505050565b5f60208284031215610eef575f80fd5b5035919050565b5f60608284031215610a61575f80fd5b5f8060408385031215610f17575f80fd5b610f2083610de6565b91506020830135610f3081610d8d565b809150509250929050565b5f60208284031215610f4b575f80fd5b8151610dbf81610d8d565b634e487b7160e01b5f52603260045260245ffd5b634e487b7160e01b5f52601160045260245ffd5b63ffffffff828116828216039080821115610f9b57610f9b610f6a565b5092915050565b604081018235610fb181610d8d565b6001600160a01b039081168352602084013590610fcd82610d8d565b8082166020850152505092915050565b5f60208284031215610fed575f80fd5b81518015158114610dbf575f80fd5b5f6001820161100d5761100d610f6a565b5060010190565b60608101823561102381610d8d565b6001600160a01b03908116835260208401359061103f82610d8d565b16602083015260409283013592909101919091529056fea2646970667358221220d5262a41f646a901d5220727039ea93db3effb2769b8523789234921f7ffcd1964736f6c63430008140033';

type MystikoSettingsCenterConstructorParams =
  | [signer?: Signer]
  | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MystikoSettingsCenterConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MystikoSettingsCenter__factory extends ContractFactory {
  constructor(...args: MystikoSettingsCenterConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'MystikoSettingsCenter';
  }

  deploy(
    _daoCenter: string,
    _rollerRegistry: string,
    _relayerRegistry: string,
    _rollupVerifiers: [string, string, string, string, string],
    _transactVerifiers: string[],
    _auditors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<MystikoSettingsCenter> {
    return super.deploy(
      _daoCenter,
      _rollerRegistry,
      _relayerRegistry,
      _rollupVerifiers,
      _transactVerifiers,
      _auditors,
      overrides || {},
    ) as Promise<MystikoSettingsCenter>;
  }
  getDeployTransaction(
    _daoCenter: string,
    _rollerRegistry: string,
    _relayerRegistry: string,
    _rollupVerifiers: [string, string, string, string, string],
    _transactVerifiers: string[],
    _auditors: [BigNumberish, BigNumberish, BigNumberish, BigNumberish, BigNumberish],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(
      _daoCenter,
      _rollerRegistry,
      _relayerRegistry,
      _rollupVerifiers,
      _transactVerifiers,
      _auditors,
      overrides || {},
    );
  }
  attach(address: string): MystikoSettingsCenter {
    return super.attach(address) as MystikoSettingsCenter;
  }
  connect(signer: Signer): MystikoSettingsCenter__factory {
    return super.connect(signer) as MystikoSettingsCenter__factory;
  }
  static readonly contractName: 'MystikoSettingsCenter';
  public readonly contractName: 'MystikoSettingsCenter';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MystikoSettingsCenterInterface {
    return new utils.Interface(_abi) as MystikoSettingsCenterInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MystikoSettingsCenter {
    return new Contract(address, _abi, signerOrProvider) as MystikoSettingsCenter;
  }
}
