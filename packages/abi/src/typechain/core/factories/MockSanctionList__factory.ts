/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { MockSanctionList, MockSanctionListInterface } from '../MockSanctionList';

const _abi = [
  {
    stateMutability: 'payable',
    type: 'fallback',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'addr',
        type: 'address',
      },
    ],
    name: 'addToSanctionsList',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'addr',
        type: 'address',
      },
    ],
    name: 'isSanctioned',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'addr',
        type: 'address',
      },
    ],
    name: 'removeFromSanctionsList',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561001057600080fd5b506101bb806100206000396000f3fe6080604052600436106100345760003560e01c806325186bd01461008b578063933e2c93146100cc578063df592f7d14610108575b60405162461bcd60e51b815260206004820152602260248201527f46616c6c6261636b2066756e6374696f6e204d6f636b53616e6374696f6e4c696044820152611cdd60f21b606482015260840160405180910390fd5b34801561009757600080fd5b506100ca6100a6366004610155565b6001600160a01b03166000908152602081905260409020805460ff19166001179055565b005b3480156100d857600080fd5b506100ca6100e7366004610155565b6001600160a01b03166000908152602081905260409020805460ff19169055565b34801561011457600080fd5b50610141610123366004610155565b6001600160a01b031660009081526020819052604090205460ff1690565b604051901515815260200160405180910390f35b60006020828403121561016757600080fd5b81356001600160a01b038116811461017e57600080fd5b939250505056fea2646970667358221220a048c685a38139da82a84fc514c3f74e369a99ca695449be252bdcef8c4ee25c64736f6c63430008140033';

type MockSanctionListConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockSanctionListConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockSanctionList__factory extends ContractFactory {
  constructor(...args: MockSanctionListConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'MockSanctionList';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<MockSanctionList> {
    return super.deploy(overrides || {}) as Promise<MockSanctionList>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockSanctionList {
    return super.attach(address) as MockSanctionList;
  }
  connect(signer: Signer): MockSanctionList__factory {
    return super.connect(signer) as MockSanctionList__factory;
  }
  static readonly contractName: 'MockSanctionList';
  public readonly contractName: 'MockSanctionList';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockSanctionListInterface {
    return new utils.Interface(_abi) as MockSanctionListInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockSanctionList {
    return new Contract(address, _abi, signerOrProvider) as MockSanctionList;
  }
}
