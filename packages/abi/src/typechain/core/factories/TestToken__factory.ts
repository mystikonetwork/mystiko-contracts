/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides, BigNumberish } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { TestToken, TestTokenInterface } from '../TestToken';

const _abi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: '_name',
        type: 'string',
      },
      {
        internalType: 'string',
        name: '_symbol',
        type: 'string',
      },
      {
        internalType: 'uint8',
        name: '_decimals',
        type: 'uint8',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'subtractedValue',
        type: 'uint256',
      },
    ],
    name: 'decreaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'addedValue',
        type: 'uint256',
      },
    ],
    name: 'increaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x60806040523480156200001157600080fd5b5060405162000e2e38038062000e2e8339810160408190526200003491620002ce565b8251839083906200004d90600390602085019062000171565b5080516200006390600490602084019062000171565b50506005805460ff191660ff8416908117909155620000a2915033906200008c90600a620003b7565b6200009c90633b9aca0062000482565b620000ab565b5050506200050d565b6001600160a01b038216620001065760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b80600260008282546200011a919062000353565b90915550506001600160a01b038216600081815260208181526040808320805486019055518481527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a35050565b8280546200017f90620004a4565b90600052602060002090601f016020900481019282620001a35760008555620001ee565b82601f10620001be57805160ff1916838001178555620001ee565b82800160010185558215620001ee579182015b82811115620001ee578251825591602001919060010190620001d1565b50620001fc92915062000200565b5090565b5b80821115620001fc576000815560010162000201565b600082601f8301126200022957600080fd5b81516001600160401b0380821115620002465762000246620004f7565b604051601f8301601f19908116603f01168101908282118183101715620002715762000271620004f7565b816040528381526020925086838588010111156200028e57600080fd5b600091505b83821015620002b2578582018301518183018401529082019062000293565b83821115620002c45760008385830101525b9695505050505050565b600080600060608486031215620002e457600080fd5b83516001600160401b0380821115620002fc57600080fd5b6200030a8783880162000217565b945060208601519150808211156200032157600080fd5b50620003308682870162000217565b925050604084015160ff811681146200034857600080fd5b809150509250925092565b60008219821115620003695762000369620004e1565b500190565b600181815b80851115620003af578160001904821115620003935762000393620004e1565b80851615620003a157918102915b93841c939080029062000373565b509250929050565b6000620003c58383620003cc565b9392505050565b600082620003dd575060016200047c565b81620003ec575060006200047c565b8160018114620004055760028114620004105762000430565b60019150506200047c565b60ff841115620004245762000424620004e1565b50506001821b6200047c565b5060208310610133831016604e8410600b841016171562000455575081810a6200047c565b6200046183836200036e565b8060001904821115620004785762000478620004e1565b0290505b92915050565b60008160001904831182151516156200049f576200049f620004e1565b500290565b600181811c90821680620004b957607f821691505b60208210811415620004db57634e487b7160e01b600052602260045260246000fd5b50919050565b634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052604160045260246000fd5b610911806200051d6000396000f3fe608060405234801561001057600080fd5b50600436106100c95760003560e01c80633950935111610081578063a457c2d71161005b578063a457c2d71461018d578063a9059cbb146101a0578063dd62ed3e146101b357600080fd5b8063395093511461014957806370a082311461015c57806395d89b411461018557600080fd5b806318160ddd116100b257806318160ddd1461010f57806323b872dd14610121578063313ce5671461013457600080fd5b806306fdde03146100ce578063095ea7b3146100ec575b600080fd5b6100d66101ec565b6040516100e39190610825565b60405180910390f35b6100ff6100fa3660046107fb565b61027e565b60405190151581526020016100e3565b6002545b6040519081526020016100e3565b6100ff61012f3660046107bf565b610296565b60055460405160ff90911681526020016100e3565b6100ff6101573660046107fb565b6102ba565b61011361016a36600461076a565b6001600160a01b031660009081526020819052604090205490565b6100d66102f9565b6100ff61019b3660046107fb565b610308565b6100ff6101ae3660046107fb565b6103b7565b6101136101c136600461078c565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b6060600380546101fb906108a0565b80601f0160208091040260200160405190810160405280929190818152602001828054610227906108a0565b80156102745780601f1061024957610100808354040283529160200191610274565b820191906000526020600020905b81548152906001019060200180831161025757829003601f168201915b5050505050905090565b60003361028c8185856103c5565b5060019392505050565b6000336102a48582856104e9565b6102af85858561057b565b506001949350505050565b3360008181526001602090815260408083206001600160a01b038716845290915281205490919061028c90829086906102f490879061087a565b6103c5565b6060600480546101fb906108a0565b3360008181526001602090815260408083206001600160a01b0387168452909152812054909190838110156103aa5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102af82868684036103c5565b60003361028c81858561057b565b6001600160a01b0383166104275760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b60648201526084016103a1565b6001600160a01b0382166104885760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b60648201526084016103a1565b6001600160a01b0383811660008181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b03838116600090815260016020908152604080832093861683529290522054600019811461057557818110156105685760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e636500000060448201526064016103a1565b61057584848484036103c5565b50505050565b6001600160a01b0383166105f75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f647265737300000000000000000000000000000000000000000000000000000060648201526084016103a1565b6001600160a01b0382166106595760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b60648201526084016103a1565b6001600160a01b038316600090815260208190526040902054818110156106e85760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e6365000000000000000000000000000000000000000000000000000060648201526084016103a1565b6001600160a01b03848116600081815260208181526040808320878703905593871680835291849020805487019055925185815290927fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef910160405180910390a3610575565b80356001600160a01b038116811461076557600080fd5b919050565b60006020828403121561077c57600080fd5b6107858261074e565b9392505050565b6000806040838503121561079f57600080fd5b6107a88361074e565b91506107b66020840161074e565b90509250929050565b6000806000606084860312156107d457600080fd5b6107dd8461074e565b92506107eb6020850161074e565b9150604084013590509250925092565b6000806040838503121561080e57600080fd5b6108178361074e565b946020939093013593505050565b600060208083528351808285015260005b8181101561085257858101830151858201604001528201610836565b81811115610864576000604083870101525b50601f01601f1916929092016040019392505050565b6000821982111561089b57634e487b7160e01b600052601160045260246000fd5b500190565b600181811c908216806108b457607f821691505b602082108114156108d557634e487b7160e01b600052602260045260246000fd5b5091905056fea2646970667358221220b4a91deeb15fb72bb95580f32cfc4773b8f5e3e32e6a2d1fea566522127d28b464736f6c63430008070033';

type TestTokenConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: TestTokenConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class TestToken__factory extends ContractFactory {
  constructor(...args: TestTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'TestToken';
  }

  deploy(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<TestToken> {
    return super.deploy(_name, _symbol, _decimals, overrides || {}) as Promise<TestToken>;
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _symbol, _decimals, overrides || {});
  }
  attach(address: string): TestToken {
    return super.attach(address) as TestToken;
  }
  connect(signer: Signer): TestToken__factory {
    return super.connect(signer) as TestToken__factory;
  }
  static readonly contractName: 'TestToken';
  public readonly contractName: 'TestToken';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenInterface {
    return new utils.Interface(_abi) as TestTokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): TestToken {
    return new Contract(address, _abi, signerOrProvider) as TestToken;
  }
}
