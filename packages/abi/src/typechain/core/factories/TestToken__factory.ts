/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides, BigNumberish } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { TestToken, TestTokenInterface } from '../TestToken';

const _abi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: '_name',
        type: 'string',
      },
      {
        internalType: 'string',
        name: '_symbol',
        type: 'string',
      },
      {
        internalType: 'uint8',
        name: '_decimals',
        type: 'uint8',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'subtractedValue',
        type: 'uint256',
      },
    ],
    name: 'decreaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'addedValue',
        type: 'uint256',
      },
    ],
    name: 'increaseAllowance',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'amount',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801562000010575f80fd5b5060405162000e8038038062000e80833981016040819052620000339162000242565b828260036200004383826200034c565b5060046200005282826200034c565b50506005805460ff191660ff841690811790915562000091915033906200007b90600a62000523565b6200008b90633b9aca0062000537565b6200009a565b50505062000567565b6001600160a01b038216620000f55760405162461bcd60e51b815260206004820152601f60248201527f45524332303a206d696e7420746f20746865207a65726f206164647265737300604482015260640160405180910390fd5b8060025f82825462000108919062000551565b90915550506001600160a01b0382165f90815260208190526040812080548392906200013690849062000551565b90915550506040518181526001600160a01b038316905f907fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef9060200160405180910390a35050565b505050565b634e487b7160e01b5f52604160045260245ffd5b5f82601f830112620001a8575f80fd5b81516001600160401b0380821115620001c557620001c562000184565b604051601f8301601f19908116603f01168101908282118183101715620001f057620001f062000184565b816040528381526020925086838588010111156200020c575f80fd5b5f91505b838210156200022f578582018301518183018401529082019062000210565b5f93810190920192909252949350505050565b5f805f6060848603121562000255575f80fd5b83516001600160401b03808211156200026c575f80fd5b6200027a8783880162000198565b9450602086015191508082111562000290575f80fd5b506200029f8682870162000198565b925050604084015160ff81168114620002b6575f80fd5b809150509250925092565b600181811c90821680620002d657607f821691505b602082108103620002f557634e487b7160e01b5f52602260045260245ffd5b50919050565b601f8211156200017f575f81815260208120601f850160051c81016020861015620003235750805b601f850160051c820191505b8181101562000344578281556001016200032f565b505050505050565b81516001600160401b0381111562000368576200036862000184565b6200038081620003798454620002c1565b84620002fb565b602080601f831160018114620003b6575f84156200039e5750858301515b5f19600386901b1c1916600185901b17855562000344565b5f85815260208120601f198616915b82811015620003e657888601518255948401946001909101908401620003c5565b50858210156200040457878501515f19600388901b60f8161c191681555b5050505050600190811b01905550565b634e487b7160e01b5f52601160045260245ffd5b600181815b808511156200046857815f19048211156200044c576200044c62000414565b808516156200045a57918102915b93841c93908002906200042d565b509250929050565b5f8262000480575060016200051d565b816200048e57505f6200051d565b8160018114620004a75760028114620004b257620004d2565b60019150506200051d565b60ff841115620004c657620004c662000414565b50506001821b6200051d565b5060208310610133831016604e8410600b8410161715620004f7575081810a6200051d565b62000503838362000428565b805f190482111562000519576200051962000414565b0290505b92915050565b5f62000530838362000470565b9392505050565b80820281158282048414176200051d576200051d62000414565b808201808211156200051d576200051d62000414565b61090b80620005755f395ff3fe608060405234801561000f575f80fd5b50600436106100c4575f3560e01c8063395093511161007d578063a457c2d711610058578063a457c2d714610186578063a9059cbb14610199578063dd62ed3e146101ac575f80fd5b8063395093511461014357806370a082311461015657806395d89b411461017e575f80fd5b806318160ddd116100ad57806318160ddd1461010957806323b872dd1461011b578063313ce5671461012e575f80fd5b806306fdde03146100c8578063095ea7b3146100e6575b5f80fd5b6100d06101e4565b6040516100dd9190610766565b60405180910390f35b6100f96100f43660046107cc565b610274565b60405190151581526020016100dd565b6002545b6040519081526020016100dd565b6100f96101293660046107f4565b61028d565b60055460405160ff90911681526020016100dd565b6100f96101513660046107cc565b6102b0565b61010d61016436600461082d565b6001600160a01b03165f9081526020819052604090205490565b6100d06102ee565b6100f96101943660046107cc565b6102fd565b6100f96101a73660046107cc565b6103ab565b61010d6101ba36600461084d565b6001600160a01b039182165f90815260016020908152604080832093909416825291909152205490565b6060600380546101f39061087e565b80601f016020809104026020016040519081016040528092919081815260200182805461021f9061087e565b801561026a5780601f106102415761010080835404028352916020019161026a565b820191905f5260205f20905b81548152906001019060200180831161024d57829003601f168201915b5050505050905090565b5f336102818185856103b8565b60019150505b92915050565b5f3361029a8582856104db565b6102a585858561056b565b506001949350505050565b335f8181526001602090815260408083206001600160a01b038716845290915281205490919061028190829086906102e99087906108b6565b6103b8565b6060600480546101f39061087e565b335f8181526001602090815260408083206001600160a01b03871684529091528120549091908381101561039e5760405162461bcd60e51b815260206004820152602560248201527f45524332303a2064656372656173656420616c6c6f77616e63652062656c6f7760448201527f207a65726f00000000000000000000000000000000000000000000000000000060648201526084015b60405180910390fd5b6102a582868684036103b8565b5f3361028181858561056b565b6001600160a01b03831661041a5760405162461bcd60e51b8152602060048201526024808201527f45524332303a20617070726f76652066726f6d20746865207a65726f206164646044820152637265737360e01b6064820152608401610395565b6001600160a01b03821661047b5760405162461bcd60e51b815260206004820152602260248201527f45524332303a20617070726f766520746f20746865207a65726f206164647265604482015261737360f01b6064820152608401610395565b6001600160a01b038381165f8181526001602090815260408083209487168084529482529182902085905590518481527f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925910160405180910390a3505050565b6001600160a01b038381165f908152600160209081526040808320938616835292905220545f19811461056557818110156105585760405162461bcd60e51b815260206004820152601d60248201527f45524332303a20696e73756666696369656e7420616c6c6f77616e63650000006044820152606401610395565b61056584848484036103b8565b50505050565b6001600160a01b0383166105e75760405162461bcd60e51b815260206004820152602560248201527f45524332303a207472616e736665722066726f6d20746865207a65726f20616460448201527f64726573730000000000000000000000000000000000000000000000000000006064820152608401610395565b6001600160a01b0382166106495760405162461bcd60e51b815260206004820152602360248201527f45524332303a207472616e7366657220746f20746865207a65726f206164647260448201526265737360e81b6064820152608401610395565b6001600160a01b0383165f90815260208190526040902054818110156106d75760405162461bcd60e51b815260206004820152602660248201527f45524332303a207472616e7366657220616d6f756e742065786365656473206260448201527f616c616e636500000000000000000000000000000000000000000000000000006064820152608401610395565b6001600160a01b038085165f9081526020819052604080822085850390559185168152908120805484929061070d9084906108b6565b92505081905550826001600160a01b0316846001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8460405161075991815260200190565b60405180910390a3610565565b5f6020808352835180828501525f5b8181101561079157858101830151858201604001528201610775565b505f604082860101526040601f19601f8301168501019250505092915050565b80356001600160a01b03811681146107c7575f80fd5b919050565b5f80604083850312156107dd575f80fd5b6107e6836107b1565b946020939093013593505050565b5f805f60608486031215610806575f80fd5b61080f846107b1565b925061081d602085016107b1565b9150604084013590509250925092565b5f6020828403121561083d575f80fd5b610846826107b1565b9392505050565b5f806040838503121561085e575f80fd5b610867836107b1565b9150610875602084016107b1565b90509250929050565b600181811c9082168061089257607f821691505b6020821081036108b057634e487b7160e01b5f52602260045260245ffd5b50919050565b8082018082111561028757634e487b7160e01b5f52601160045260245ffdfea2646970667358221220739131f1f2568e1d0af6611d968c9c7fd4cb68db972852d76e19f560985429ba64736f6c63430008140033';

type TestTokenConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: TestTokenConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class TestToken__factory extends ContractFactory {
  constructor(...args: TestTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'TestToken';
  }

  deploy(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<TestToken> {
    return super.deploy(_name, _symbol, _decimals, overrides || {}) as Promise<TestToken>;
  }
  getDeployTransaction(
    _name: string,
    _symbol: string,
    _decimals: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_name, _symbol, _decimals, overrides || {});
  }
  attach(address: string): TestToken {
    return super.attach(address) as TestToken;
  }
  connect(signer: Signer): TestToken__factory {
    return super.connect(signer) as TestToken__factory;
  }
  static readonly contractName: 'TestToken';
  public readonly contractName: 'TestToken';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): TestTokenInterface {
    return new utils.Interface(_abi) as TestTokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): TestToken {
    return new Contract(address, _abi, signerOrProvider) as TestToken;
  }
}
