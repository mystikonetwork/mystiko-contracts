/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */

import { Contract, Signer, utils } from 'ethers';
import { Provider } from '@ethersproject/providers';
import type { IAttestable, IAttestableInterface } from '../IAttestable';

const _abi = [
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'attester',
        type: 'address',
      },
    ],
    name: 'AttesterDisabled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'attester',
        type: 'address',
      },
    ],
    name: 'AttesterEnabled',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'previousAttesterManager',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'newAttesterManager',
        type: 'address',
      },
    ],
    name: 'AttesterManagerUpdated',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint256',
        name: 'oldSignatureThreshold',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'newSignatureThreshold',
        type: 'uint256',
      },
    ],
    name: 'SignatureThresholdUpdated',
    type: 'event',
  },
  {
    inputs: [],
    name: 'attesterManager',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'attester',
        type: 'address',
      },
    ],
    name: 'disableAttester',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'attester',
        type: 'address',
      },
    ],
    name: 'enableAttester',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'index',
        type: 'uint256',
      },
    ],
    name: 'getEnabledAttester',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getNumEnabledAttesters',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'attester',
        type: 'address',
      },
    ],
    name: 'isEnabledAttester',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'newSignatureThreshold',
        type: 'uint256',
      },
    ],
    name: 'setSignatureThreshold',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'newAttesterManager',
        type: 'address',
      },
    ],
    name: 'updateAttesterManager',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

export class IAttestable__factory {
  static readonly abi = _abi;
  static createInterface(): IAttestableInterface {
    return new utils.Interface(_abi) as IAttestableInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): IAttestable {
    return new Contract(address, _abi, signerOrProvider) as IAttestable;
  }
}
