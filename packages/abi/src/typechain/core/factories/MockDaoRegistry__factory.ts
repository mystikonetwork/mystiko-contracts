/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { MockDaoRegistry, MockDaoRegistryInterface } from '../MockDaoRegistry';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'dao',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
];

const _bytecode =
  '0x60808060405234602557600080546001600160a01b0319163317905560909081602b8239f35b600080fdfe6080806040526004361015601257600080fd5b60003560e01c634162169f14602657600080fd5b34605557600036600319011260555760209073ffffffffffffffffffffffffffffffffffffffff600054168152f35b600080fdfea2646970667358221220c593836d66fd6441df89b41373709e0d442b28382c289c87f59a4847bec31ca764736f6c634300081a0033';

type MockDaoRegistryConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockDaoRegistryConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockDaoRegistry__factory extends ContractFactory {
  constructor(...args: MockDaoRegistryConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'MockDaoRegistry';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<MockDaoRegistry> {
    return super.deploy(overrides || {}) as Promise<MockDaoRegistry>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MockDaoRegistry {
    return super.attach(address) as MockDaoRegistry;
  }
  connect(signer: Signer): MockDaoRegistry__factory {
    return super.connect(signer) as MockDaoRegistry__factory;
  }
  static readonly contractName: 'MockDaoRegistry';
  public readonly contractName: 'MockDaoRegistry';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockDaoRegistryInterface {
    return new utils.Interface(_abi) as MockDaoRegistryInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockDaoRegistry {
    return new Contract(address, _abi, signerOrProvider) as MockDaoRegistry;
  }
}
