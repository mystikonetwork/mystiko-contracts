/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { MystikoTBridgeProxy, MystikoTBridgeProxyInterface } from '../MystikoTBridgeProxy';

const _abi = [
  {
    inputs: [],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'CallCrossChainSyncTxError',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OnlyOperator',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OnlyRegister',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OnlyWhitelistedExecutor',
    type: 'error',
  },
  {
    inputs: [],
    name: 'WithdrawFailed',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'toContract',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'toChainId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'fromContract',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'message',
        type: 'bytes',
      },
    ],
    name: 'TBridgeCrossChainMessage',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_executor',
        type: 'address',
      },
    ],
    name: 'addExecutorWhitelist',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_register',
        type: 'address',
      },
    ],
    name: 'addRegisterWhitelist',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_newOperator',
        type: 'address',
      },
    ],
    name: 'changeOperator',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: '_fromChainId',
        type: 'uint64',
      },
      {
        internalType: 'address',
        name: '_fromContract',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_toContract',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_executor',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'crossChainSyncTx',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_executor',
        type: 'address',
      },
    ],
    name: 'removeExecutorWhitelist',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_register',
        type: 'address',
      },
    ],
    name: 'removeRegisterWhitelist',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_toContract',
        type: 'address',
      },
      {
        internalType: 'uint64',
        name: '_toChainId',
        type: 'uint64',
      },
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'sendMessage',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_recipient',
        type: 'address',
      },
    ],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
];

const _bytecode =
  '0x60808060405234602757600080546001600160a01b0319163317905561060d908161002d8239f35b600080fdfe6080604052600436101561001257600080fd5b60003560e01c806306394c9b1461050a57806351cff8d914610494578063919c1df5146102f5578063a071e9b1146102a4578063bfdfd56314610255578063c81739cd14610122578063d1520948146100d65763f919d4691461007457600080fd5b346100d15760203660031901126100d15761008d61056d565b6001600160a01b036000541633036100c0576001600160a01b03166000908152600260205260409020805460ff19169055005b6327e1f1e560e01b60005260046000fd5b600080fd5b346100d15760203660031901126100d1576100ef61056d565b6001600160a01b036000541633036100c0576001600160a01b03166000908152600160205260409020805460ff19169055005b60603660031901126100d15761013661056d565b6024359067ffffffffffffffff82168092036100d1576044359167ffffffffffffffff83116100d157366023840112156100d1578260040135610178816105bb565b936101866040519586610583565b81855236602483830101116100d15781600092602460209301838801378501015233600052600260205260ff6040600020541615610244576001600160a01b0360405192168252602082015233604082015260806060820152815180608083015260005b81811061022e577fd80857a183b2092f9e8ac431b7677da383dab7002c167fd82e6b3172ab86e8d88360a081856000838284010152601f80199101168101030190a1005b80602080928601015160a08286010152016101ea565b632d7858e160e11b60005260046000fd5b346100d15760203660031901126100d15761026e61056d565b6001600160a01b036000541633036100c0576001600160a01b03166000908152600260205260409020805460ff19166001179055005b346100d15760203660031901126100d1576102bd61056d565b6001600160a01b036000541633036100c0576001600160a01b031660005260016020526040600020600160ff19825416179055600080f35b346100d15760a03660031901126100d15760043567ffffffffffffffff81168091036100d157602435906001600160a01b0382168092036100d157604435916001600160a01b0383168093036100d157606435926001600160a01b0384168094036100d1576084359167ffffffffffffffff83116100d157366023840112156100d157826004013567ffffffffffffffff81116100d15736602482860101116100d15733600052600160205260ff60406000205416156104845760a4602095826024986000946040519a8b998a98899663105a439b60e31b885260048801528287015260806044870152826084870152018585013782820184018590526064830152601f01601f191681010301925af190811561047857600091610436575b501561042557602060405160018152f35b635eb9870360e11b60005260046000fd5b6020813d602011610470575b8161044f60209383610583565b8101031261046c5751908115158203610469575081610414565b80fd5b5080fd5b3d9150610442565b6040513d6000823e3d90fd5b62111e9960e21b60005260046000fd5b60203660031901126100d1576104a861056d565b6001600160a01b036000541633036100c05760008080809347905af13d15610505573d6104d4816105bb565b906104e26040519283610583565b8152600060203d92013e5b156104f457005b631d42c86760e21b60005260046000fd5b6104ed565b346100d15760203660031901126100d15761052361056d565b600054906001600160a01b03821633036100c0576001600160a01b037fffffffffffffffffffffffff00000000000000000000000000000000000000009116911617600055600080f35b600435906001600160a01b03821682036100d157565b90601f8019910116810190811067ffffffffffffffff8211176105a557604052565b634e487b7160e01b600052604160045260246000fd5b67ffffffffffffffff81116105a557601f01601f19166020019056fea2646970667358221220047f3b96c643e9f6d3790dd7aac85effc01309201705e42ac4ee3d36818a91ae64736f6c634300081a0033';

type MystikoTBridgeProxyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MystikoTBridgeProxyConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MystikoTBridgeProxy__factory extends ContractFactory {
  constructor(...args: MystikoTBridgeProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'MystikoTBridgeProxy';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<MystikoTBridgeProxy> {
    return super.deploy(overrides || {}) as Promise<MystikoTBridgeProxy>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): MystikoTBridgeProxy {
    return super.attach(address) as MystikoTBridgeProxy;
  }
  connect(signer: Signer): MystikoTBridgeProxy__factory {
    return super.connect(signer) as MystikoTBridgeProxy__factory;
  }
  static readonly contractName: 'MystikoTBridgeProxy';
  public readonly contractName: 'MystikoTBridgeProxy';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MystikoTBridgeProxyInterface {
    return new utils.Interface(_abi) as MystikoTBridgeProxyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MystikoTBridgeProxy {
    return new Contract(address, _abi, signerOrProvider) as MystikoTBridgeProxy;
  }
}
