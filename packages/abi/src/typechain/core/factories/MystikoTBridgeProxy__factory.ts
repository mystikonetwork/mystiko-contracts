/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { MystikoTBridgeProxy, MystikoTBridgeProxyInterface } from '../MystikoTBridgeProxy';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: '_daoCenter',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'CallCrossChainSyncTxError',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OnlyMystikoDAO',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OnlyRegister',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OnlyWhitelistedExecutor',
    type: 'error',
  },
  {
    inputs: [],
    name: 'WithdrawFailed',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'address',
        name: 'toContract',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'toChainId',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'address',
        name: 'fromContract',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'message',
        type: 'bytes',
      },
    ],
    name: 'TBridgeCrossChainMessage',
    type: 'event',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_executor',
        type: 'address',
      },
    ],
    name: 'addExecutorWhitelist',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_register',
        type: 'address',
      },
    ],
    name: 'addRegisterWhitelist',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'center',
    outputs: [
      {
        internalType: 'contract IMystikoGovernorCenter',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_newOperator',
        type: 'address',
      },
    ],
    name: 'changeOperator',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint64',
        name: '_fromChainId',
        type: 'uint64',
      },
      {
        internalType: 'address',
        name: '_fromContract',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_toContract',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_executor',
        type: 'address',
      },
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'crossChainSyncTx',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_executor',
        type: 'address',
      },
    ],
    name: 'removeExecutorWhitelist',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_register',
        type: 'address',
      },
    ],
    name: 'removeRegisterWhitelist',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_toContract',
        type: 'address',
      },
      {
        internalType: 'uint64',
        name: '_toChainId',
        type: 'uint64',
      },
      {
        internalType: 'bytes',
        name: '_message',
        type: 'bytes',
      },
    ],
    name: 'sendMessage',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: '_recipient',
        type: 'address',
      },
    ],
    name: 'withdraw',
    outputs: [],
    stateMutability: 'payable',
    type: 'function',
  },
];

const _bytecode =
  '0x608060405234801561000f575f80fd5b50604051610b5c380380610b5c83398101604081905261002e9161005b565b5f80546001600160a01b039092166001600160a01b03199283161790556001805490911633179055610088565b5f6020828403121561006b575f80fd5b81516001600160a01b0381168114610081575f80fd5b9392505050565b610ac7806100955f395ff3fe608060405260043610610093575f3560e01c8063a071e9b111610066578063c81739cd1161004c578063c81739cd14610173578063d152094814610186578063f919d469146101a5575f80fd5b8063a071e9b114610135578063bfdfd56314610154575f80fd5b806306394c9b146100975780631f02d715146100b857806351cff8d9146100f3578063919c1df514610106575b5f80fd5b3480156100a2575f80fd5b506100b66100b13660046107b2565b6101c4565b005b3480156100c3575f80fd5b505f546100d6906001600160a01b031681565b6040516001600160a01b0390911681526020015b60405180910390f35b6100b66101013660046107b2565b61028f565b348015610111575f80fd5b506101256101203660046107f0565b610394565b60405190151581526020016100ea565b348015610140575f80fd5b506100b661014f3660046107b2565b610460565b34801561015f575f80fd5b506100b661016e3660046107b2565b610514565b6100b66101813660046108b6565b6105c8565b348015610191575f80fd5b506100b66101a03660046107b2565b610639565b3480156101b0575f80fd5b506100b66101bf3660046107b2565b6106ea565b5f54604080516361070aa960e01b8152905133926001600160a01b0316916361070aa99160048083019260209291908290030181865afa15801561020a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061022e9190610983565b6001600160a01b0316146102555760405163177bc95160e11b815260040160405180910390fd5b600180547fffffffffffffffffffffffff0000000000000000000000000000000000000000166001600160a01b0392909216919091179055565b5f54604080516361070aa960e01b8152905133926001600160a01b0316916361070aa99160048083019260209291908290030181865afa1580156102d5573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906102f99190610983565b6001600160a01b0316146103205760405163177bc95160e11b815260040160405180910390fd5b5f816001600160a01b0316476040515f6040518083038185875af1925050503d805f8114610369576040519150601f19603f3d011682016040523d82523d5f602084013e61036e565b606091505b505090508061039057604051631d42c86760e21b815260040160405180910390fd5b5050565b335f9081526002602052604081205460ff166103c25760405162111e9960e21b815260040160405180910390fd5b60405163105a439b60e31b81526001600160a01b038616906382d21cd8906103f6908a908a90889088908b9060040161099e565b6020604051808303815f875af1158015610412573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061043691906109f9565b61045357604051635eb9870360e11b815260040160405180910390fd5b5060019695505050505050565b5f54604080516361070aa960e01b8152905133926001600160a01b0316916361070aa99160048083019260209291908290030181865afa1580156104a6573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906104ca9190610983565b6001600160a01b0316146104f15760405163177bc95160e11b815260040160405180910390fd5b6001600160a01b03165f908152600260205260409020805460ff19166001179055565b5f54604080516361070aa960e01b8152905133926001600160a01b0316916361070aa99160048083019260209291908290030181865afa15801561055a573d5f803e3d5ffd5b505050506040513d601f19601f8201168201806040525081019061057e9190610983565b6001600160a01b0316146105a55760405163177bc95160e11b815260040160405180910390fd5b6001600160a01b03165f908152600360205260409020805460ff19166001179055565b335f9081526003602052604090205460ff166105f757604051632d7858e160e11b815260040160405180910390fd5b7fd80857a183b2092f9e8ac431b7677da383dab7002c167fd82e6b3172ab86e8d88383338460405161062c9493929190610a18565b60405180910390a1505050565b5f54604080516361070aa960e01b8152905133926001600160a01b0316916361070aa99160048083019260209291908290030181865afa15801561067f573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906106a39190610983565b6001600160a01b0316146106ca5760405163177bc95160e11b815260040160405180910390fd5b6001600160a01b03165f908152600260205260409020805460ff19169055565b5f54604080516361070aa960e01b8152905133926001600160a01b0316916361070aa99160048083019260209291908290030181865afa158015610730573d5f803e3d5ffd5b505050506040513d601f19601f820116820180604052508101906107549190610983565b6001600160a01b03161461077b5760405163177bc95160e11b815260040160405180910390fd5b6001600160a01b03165f908152600360205260409020805460ff19169055565b6001600160a01b03811681146107af575f80fd5b50565b5f602082840312156107c2575f80fd5b81356107cd8161079b565b9392505050565b803567ffffffffffffffff811681146107eb575f80fd5b919050565b5f805f805f8060a08789031215610805575f80fd5b61080e876107d4565b9550602087013561081e8161079b565b9450604087013561082e8161079b565b9350606087013561083e8161079b565b9250608087013567ffffffffffffffff8082111561085a575f80fd5b818901915089601f83011261086d575f80fd5b81358181111561087b575f80fd5b8a602082850101111561088c575f80fd5b6020830194508093505050509295509295509295565b634e487b7160e01b5f52604160045260245ffd5b5f805f606084860312156108c8575f80fd5b83356108d38161079b565b92506108e1602085016107d4565b9150604084013567ffffffffffffffff808211156108fd575f80fd5b818601915086601f830112610910575f80fd5b813581811115610922576109226108a2565b604051601f8201601f19908116603f0116810190838211818310171561094a5761094a6108a2565b81604052828152896020848701011115610962575f80fd5b826020860160208301375f6020848301015280955050505050509250925092565b5f60208284031215610993575f80fd5b81516107cd8161079b565b67ffffffffffffffff861681525f6001600160a01b03808716602084015260806040840152846080840152848660a08501375f83860160a0908101919091529316606083015250601f909201601f1916909101019392505050565b5f60208284031215610a09575f80fd5b815180151581146107cd575f80fd5b5f6001600160a01b038087168352602067ffffffffffffffff871681850152818616604085015260806060850152845191508160808501525f5b82811015610a6e5785810182015185820160a001528101610a52565b50505f60a0828501015260a0601f19601f8301168401019150509594505050505056fea2646970667358221220bb4ed1323e2521182ace5609b19c5b1371a72c4ddfed41e8b8bead0b753f762464736f6c63430008140033';

type MystikoTBridgeProxyConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MystikoTBridgeProxyConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MystikoTBridgeProxy__factory extends ContractFactory {
  constructor(...args: MystikoTBridgeProxyConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'MystikoTBridgeProxy';
  }

  deploy(
    _daoCenter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<MystikoTBridgeProxy> {
    return super.deploy(_daoCenter, overrides || {}) as Promise<MystikoTBridgeProxy>;
  }
  getDeployTransaction(
    _daoCenter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_daoCenter, overrides || {});
  }
  attach(address: string): MystikoTBridgeProxy {
    return super.attach(address) as MystikoTBridgeProxy;
  }
  connect(signer: Signer): MystikoTBridgeProxy__factory {
    return super.connect(signer) as MystikoTBridgeProxy__factory;
  }
  static readonly contractName: 'MystikoTBridgeProxy';
  public readonly contractName: 'MystikoTBridgeProxy';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MystikoTBridgeProxyInterface {
    return new utils.Interface(_abi) as MystikoTBridgeProxyInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MystikoTBridgeProxy {
    return new Contract(address, _abi, signerOrProvider) as MystikoTBridgeProxy;
  }
}
