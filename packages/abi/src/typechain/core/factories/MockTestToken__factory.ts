/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides, BigNumberish } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { MockTestToken, MockTestTokenInterface } from '../MockTestToken';

const _abi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: 'symbol',
        type: 'string',
      },
      {
        internalType: 'uint8',
        name: 'decimal',
        type: 'uint8',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'ECDSAInvalidSignature',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'length',
        type: 'uint256',
      },
    ],
    name: 'ECDSAInvalidSignatureLength',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 's',
        type: 'bytes32',
      },
    ],
    name: 'ECDSAInvalidSignatureS',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'allowance',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'needed',
        type: 'uint256',
      },
    ],
    name: 'ERC20InsufficientAllowance',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'balance',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'needed',
        type: 'uint256',
      },
    ],
    name: 'ERC20InsufficientBalance',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'approver',
        type: 'address',
      },
    ],
    name: 'ERC20InvalidApprover',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'receiver',
        type: 'address',
      },
    ],
    name: 'ERC20InvalidReceiver',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
    ],
    name: 'ERC20InvalidSender',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'ERC20InvalidSpender',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'deadline',
        type: 'uint256',
      },
    ],
    name: 'ERC2612ExpiredSignature',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'signer',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
    ],
    name: 'ERC2612InvalidSigner',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'currentNonce',
        type: 'uint256',
      },
    ],
    name: 'InvalidAccountNonce',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidShortString',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'str',
        type: 'string',
      },
    ],
    name: 'StringTooLong',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [],
    name: 'EIP712DomainChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      {
        internalType: 'bytes1',
        name: 'fields',
        type: 'bytes1',
      },
      {
        internalType: 'string',
        name: 'name',
        type: 'string',
      },
      {
        internalType: 'string',
        name: 'version',
        type: 'string',
      },
      {
        internalType: 'uint256',
        name: 'chainId',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'verifyingContract',
        type: 'address',
      },
      {
        internalType: 'bytes32',
        name: 'salt',
        type: 'bytes32',
      },
      {
        internalType: 'uint256[]',
        name: 'extensions',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
    ],
    name: 'nonces',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'deadline',
        type: 'uint256',
      },
      {
        internalType: 'uint8',
        name: 'v',
        type: 'uint8',
      },
      {
        internalType: 'bytes32',
        name: 'r',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: 's',
        type: 'bytes32',
      },
    ],
    name: 'permit',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x610160806040523461052457611502803803809161001d8285610529565b83398101906040818303126105245780516001600160401b0381116105245781019082601f83011215610524578151916001600160401b0383116104215760405193610073601f8501601f191660200186610529565b83855260208483010111610524576020926100939184808701910161054c565b015160ff8116809103610524576100a861056f565b916100b161056f565b6040938451926100c18685610529565b60018452603160f81b60208501908152835190936001600160401b0382116104215760035490600182811c9216801561051a575b60208310146104015781601f8493116104aa575b50602090601f831160011461044257600092610437575b50508160011b916000199060031b1c1916176003555b8051906001600160401b0382116104215760045490600182811c92168015610417575b60208310146104015781601f849311610391575b50602090601f83116001146103295760009261031e575b50508160011b916000199060031b1c1916176004555b6101a38161059f565b610120526101b083610730565b6101405260208151910120918260e05251902080610100524660a05283519060208201927f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f84528583015260608201524660808201523060a082015260a0815261021b60c082610529565b5190206080523060c0528060ff196008541617600855604d81116102f257600a0a80633b9aca000290633b9aca008204036102f2573315610308576002548181018091116102f25760025560003381528060205282812082815401905582519182527fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef60203393a351610c8f9081610873823960805181610954015260a05181610a11015260c05181610925015260e051816109a3015261010051816109c901526101205181610379015261014051816103a20152f35b634e487b7160e01b600052601160045260246000fd5b63ec442f0560e01b600052600060045260246000fd5b015190503880610184565b600460009081528281209350601f198516905b8181106103795750908460019594939210610360575b505050811b0160045561019a565b015160001960f88460031b161c19169055388080610352565b9293602060018192878601518155019501930161033c565b60046000529091507f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b601f840160051c810191602085106103f7575b90601f859493920160051c01905b8181106103e8575061016d565b600081558493506001016103db565b90915081906103cd565b634e487b7160e01b600052602260045260246000fd5b91607f1691610159565b634e487b7160e01b600052604160045260246000fd5b015190503880610120565b600360009081528281209350601f198516905b8181106104925750908460019594939210610479575b505050811b01600355610136565b015160001960f88460031b161c1916905538808061046b565b92936020600181928786015181550195019301610455565b60036000529091507fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b601f840160051c81019160208510610510575b90601f859493920160051c01905b8181106105015750610109565b600081558493506001016104f4565b90915081906104e6565b91607f16916100f5565b600080fd5b601f909101601f19168101906001600160401b0382119082101761042157604052565b60005b83811061055f5750506000910152565b818101518382015260200161054f565b6040519061057e604083610529565b601282527126bcb9ba34b5b7902a32b9ba102a37b5b2b760711b6020830152565b9081516020811060001461061a575090601f8151116105db5760208151910151602082106105cb571790565b6000198260200360031b1b161790565b6044604051809263305a27a960e01b82526020600483015261060c815180928160248601526020868601910161054c565b601f01601f19168101030190fd5b6001600160401b03811161042157600554600181811c91168015610726575b602082101461040157601f81116106f0575b50602092601f821160011461068b5792819293600092610680575b50508160011b916000199060031b1c19161760055560ff90565b015190503880610666565b601f198216936005600052806000209160005b8681106106d857508360019596106106bf575b505050811b0160055560ff90565b015160001960f88460031b161c191690553880806106b1565b9192602060018192868501518155019401920161069e565b6005600052601f6020600020910160051c810190601f830160051c015b81811061071a575061064b565b6000815560010161070d565b90607f1690610639565b9081516020811060001461075c575090601f8151116105db5760208151910151602082106105cb571790565b6001600160401b03811161042157600654600181811c91168015610868575b602082101461040157601f8111610832575b50602092601f82116001146107cd57928192936000926107c2575b50508160011b916000199060031b1c19161760065560ff90565b0151905038806107a8565b601f198216936006600052806000209160005b86811061081a5750836001959610610801575b505050811b0160065560ff90565b015160001960f88460031b161c191690553880806107f3565b919260206001819286850151815501940192016107e0565b6006600052601f6020600020910160051c810190601f830160051c015b81811061085c575061078d565b6000815560010161084f565b90607f169061077b56fe608080604052600436101561001357600080fd5b60003560e01c90816306fdde031461064f57508063095ea7b31461062957806318160ddd1461060b57806323b872dd14610515578063313ce567146104f45780633644e515146104d157806370a08231146104975780637ecebe001461045d57806384b0196e1461036057806395d89b411461027b578063a9059cbb1461024a578063d505accf1461010b5763dd62ed3e146100ae57600080fd5b34610106576040366003190112610106576100c7610735565b6001600160a01b036100d761074b565b911660005260016020526001600160a01b03604060002091166000526020526020604060002054604051908152f35b600080fd5b346101065760e036600319011261010657610124610735565b61012c61074b565b604435906064359260843560ff8116810361010657844211610235576102076101fe6001600160a01b0392838516978860005260076020526040600020908154916001830190556040519060208201927f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c984528b6040840152878a1660608401528a608084015260a083015260c082015260c081526101cc60e08261081e565b5190206101d761091b565b906040519161190160f01b83526002830152602282015260c43591604260a4359220610b3c565b90929192610bd1565b1684810361021c575061021a9350610a37565b005b84906325c0072360e11b60005260045260245260446000fd5b8463313c898160e11b60005260045260246000fd5b3461010657604036600319011261010657610270610266610735565b6024359033610856565b602060405160018152f35b3461010657600036600319011261010657604051600060045461029d81610761565b808452906001811690811561033c57506001146102dd575b6102d9836102c58185038261081e565b6040519182916020835260208301906106f4565b0390f35b600460009081527f8a35acfbc15ff81a39ae7d344fd709f28e8600b4aa8c65c6b64bfe7fe36bd19b939250905b808210610322575090915081016020016102c56102b5565b91926001816020925483858801015201910190929161030a565b60ff191660208086019190915291151560051b840190910191506102c590506102b5565b34610106576000366003190112610106576103ff61039d7f0000000000000000000000000000000000000000000000000000000000000000610a9e565b6103c67f0000000000000000000000000000000000000000000000000000000000000000610b05565b602061040d604051926103d9838561081e565b600084526000368137604051958695600f60f81b875260e08588015260e08701906106f4565b9085820360408701526106f4565b466060850152306080850152600060a085015283810360c085015281808451928381520193019160005b82811061044657505050500390f35b835185528695509381019392810192600101610437565b34610106576020366003190112610106576001600160a01b0361047e610735565b1660005260076020526020604060002054604051908152f35b34610106576020366003190112610106576001600160a01b036104b8610735565b1660005260006020526020604060002054604051908152f35b346101065760003660031901126101065760206104ec61091b565b604051908152f35b3461010657600036600319011261010657602060ff60085416604051908152f35b346101065760603660031901126101065761052e610735565b61053661074b565b604435906001600160a01b0383169283600052600160205260406000206001600160a01b033316600052602052604060002054600019810361057e575b506102709350610856565b8381106105ee5784156105d85733156105c25761027094600052600160205260406000206001600160a01b0333166000526020528360406000209103905584610573565b634a1406b160e11b600052600060045260246000fd5b63e602df0560e01b600052600060045260246000fd5b8390637dc7a0d960e11b6000523360045260245260445260646000fd5b34610106576000366003190112610106576020600254604051908152f35b3461010657604036600319011261010657610270610645610735565b6024359033610a37565b3461010657600036600319011261010657600060035461066e81610761565b808452906001811690811561033c5750600114610695576102d9836102c58185038261081e565b600360009081527fc2575a0e9e593c00f959f8c92f12db2869c3395a3b0502d05e2516446f71f85b939250905b8082106106da575090915081016020016102c56102b5565b9192600181602092548385880101520191019092916106c2565b919082519283825260005b848110610720575050826000602080949584010152601f8019910116010190565b806020809284010151828286010152016106ff565b600435906001600160a01b038216820361010657565b602435906001600160a01b038216820361010657565b90600182811c92168015610791575b602083101461077b57565b634e487b7160e01b600052602260045260246000fd5b91607f1691610770565b600092918154916107ab83610761565b808352926001811690811561080157506001146107c757505050565b60009081526020812093945091925b8383106107e7575060209250010190565b6001816020929493945483858701015201910191906107d6565b915050602093945060ff929192191683830152151560051b010190565b90601f8019910116810190811067ffffffffffffffff82111761084057604052565b634e487b7160e01b600052604160045260246000fd5b6001600160a01b0316908115610905576001600160a01b03169182156108ef5760008281528060205260408120548281106108d55791604082827fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef958760209652828652038282205586815280845220818154019055604051908152a3565b916064928463391434e360e21b8452600452602452604452fd5b63ec442f0560e01b600052600060045260246000fd5b634b637e8f60e11b600052600060045260246000fd5b6001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016301480610a0e575b15610976577f000000000000000000000000000000000000000000000000000000000000000090565b60405160208101907f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f82527f000000000000000000000000000000000000000000000000000000000000000060408201527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260a08152610a0860c08261081e565b51902090565b507f0000000000000000000000000000000000000000000000000000000000000000461461094d565b6001600160a01b03169081156105d8576001600160a01b03169182156105c25760207f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b925918360005260018252604060002085600052825280604060002055604051908152a3565b60ff8114610ae85760ff811690601f8211610ad7576040805192610ac2828561081e565b6020808552840191601f190136833783525290565b632cd44ac360e21b60005260046000fd5b50604051610b0281610afb81600561079b565b038261081e565b90565b60ff8114610b295760ff811690601f8211610ad7576040805192610ac2828561081e565b50604051610b0281610afb81600661079b565b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411610bc5579160209360809260ff60009560405194855216868401526040830152606082015282805260015afa15610bb9576000516001600160a01b03811615610bad5790600090600090565b50600090600190600090565b6040513d6000823e3d90fd5b50505060009160039190565b9190916004811015610c435780610be757509050565b600060018203610c025763f645eedf60e01b60005260046000fd5b5060028103610c20578263fce698f760e01b60005260045260246000fd5b9091600360009214610c30575050565b6335e2f38360e21b825260045260249150fd5b634e487b7160e01b600052602160045260246000fdfea26469706673582212206546b06738a0166ce956cd21b7ceb8797a7dbd1e5e2a88b00ee1888b04b829c764736f6c634300081a0033';

type MockTestTokenConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTestTokenConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockTestToken__factory extends ContractFactory {
  constructor(...args: MockTestTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'MockTestToken';
  }

  deploy(
    symbol: string,
    decimal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<MockTestToken> {
    return super.deploy(symbol, decimal, overrides || {}) as Promise<MockTestToken>;
  }
  getDeployTransaction(
    symbol: string,
    decimal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(symbol, decimal, overrides || {});
  }
  attach(address: string): MockTestToken {
    return super.attach(address) as MockTestToken;
  }
  connect(signer: Signer): MockTestToken__factory {
    return super.connect(signer) as MockTestToken__factory;
  }
  static readonly contractName: 'MockTestToken';
  public readonly contractName: 'MockTestToken';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTestTokenInterface {
    return new utils.Interface(_abi) as MockTestTokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockTestToken {
    return new Contract(address, _abi, signerOrProvider) as MockTestToken;
  }
}
