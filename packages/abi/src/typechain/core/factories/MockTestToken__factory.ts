/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides, BigNumberish } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { MockTestToken, MockTestTokenInterface } from '../MockTestToken';

const _abi = [
  {
    inputs: [
      {
        internalType: 'string',
        name: 'symbol',
        type: 'string',
      },
      {
        internalType: 'uint8',
        name: 'decimal',
        type: 'uint8',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'ECDSAInvalidSignature',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'length',
        type: 'uint256',
      },
    ],
    name: 'ECDSAInvalidSignatureLength',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 's',
        type: 'bytes32',
      },
    ],
    name: 'ECDSAInvalidSignatureS',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'allowance',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'needed',
        type: 'uint256',
      },
    ],
    name: 'ERC20InsufficientAllowance',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'balance',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'needed',
        type: 'uint256',
      },
    ],
    name: 'ERC20InsufficientBalance',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'approver',
        type: 'address',
      },
    ],
    name: 'ERC20InvalidApprover',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'receiver',
        type: 'address',
      },
    ],
    name: 'ERC20InvalidReceiver',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'sender',
        type: 'address',
      },
    ],
    name: 'ERC20InvalidSender',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'ERC20InvalidSpender',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'deadline',
        type: 'uint256',
      },
    ],
    name: 'ERC2612ExpiredSignature',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'signer',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
    ],
    name: 'ERC2612InvalidSigner',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'currentNonce',
        type: 'uint256',
      },
    ],
    name: 'InvalidAccountNonce',
    type: 'error',
  },
  {
    inputs: [],
    name: 'InvalidShortString',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'str',
        type: 'string',
      },
    ],
    name: 'StringTooLong',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Approval',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [],
    name: 'EIP712DomainChanged',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        indexed: true,
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'Transfer',
    type: 'event',
  },
  {
    inputs: [],
    name: 'DOMAIN_SEPARATOR',
    outputs: [
      {
        internalType: 'bytes32',
        name: '',
        type: 'bytes32',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
    ],
    name: 'allowance',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'approve',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'balanceOf',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'decimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'eip712Domain',
    outputs: [
      {
        internalType: 'bytes1',
        name: 'fields',
        type: 'bytes1',
      },
      {
        internalType: 'string',
        name: 'name',
        type: 'string',
      },
      {
        internalType: 'string',
        name: 'version',
        type: 'string',
      },
      {
        internalType: 'uint256',
        name: 'chainId',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: 'verifyingContract',
        type: 'address',
      },
      {
        internalType: 'bytes32',
        name: 'salt',
        type: 'bytes32',
      },
      {
        internalType: 'uint256[]',
        name: 'extensions',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'name',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
    ],
    name: 'nonces',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'owner',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'deadline',
        type: 'uint256',
      },
      {
        internalType: 'uint8',
        name: 'v',
        type: 'uint8',
      },
      {
        internalType: 'bytes32',
        name: 'r',
        type: 'bytes32',
      },
      {
        internalType: 'bytes32',
        name: 's',
        type: 'bytes32',
      },
    ],
    name: 'permit',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'symbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'totalSupply',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'transfer',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'from',
        type: 'address',
      },
      {
        internalType: 'address',
        name: 'to',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'transferFrom',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x6101606040526008805460ff1916601217905534801561001e57600080fd5b506040516116d53803806116d583398101604081905261003d916103c7565b60408051808201825260128082527126bcb9ba34b5b7902a32b9ba102a37b5b2b760711b60208084018290528451808601865260018152603160f81b818301528551808701909652928552840152909182919085600361009d8382610514565b5060046100aa8282610514565b506100ba9150839050600561019d565b610120526100c981600661019d565b61014052815160208084019190912060e052815190820120610100524660a05261015660e05161010051604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201529081019290925260608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60805250503060c052506008805460ff191660ff831690811790915561019690339061018390600a6106cf565b61019190633b9aca006106e5565b6101d0565b5050610766565b60006020835110156101b9576101b28361020f565b90506101ca565b816101c48482610514565b5060ff90505b92915050565b6001600160a01b0382166101ff5760405163ec442f0560e01b8152600060048201526024015b60405180910390fd5b61020b6000838361024d565b5050565b600080829050601f8151111561023a578260405163305a27a960e01b81526004016101f691906106fc565b80516102458261072f565b179392505050565b6001600160a01b03831661027857806002600082825461026d9190610753565b909155506102ea9050565b6001600160a01b038316600090815260208190526040902054818110156102cb5760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016101f6565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661030657600280548290039055610325565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161036a91815260200190565b60405180910390a3505050565b634e487b7160e01b600052604160045260246000fd5b60005b838110156103a8578181015183820152602001610390565b50506000910152565b805160ff811681146103c257600080fd5b919050565b600080604083850312156103da57600080fd5b82516001600160401b038111156103f057600080fd5b8301601f8101851361040157600080fd5b80516001600160401b0381111561041a5761041a610377565b604051601f8201601f19908116603f011681016001600160401b038111828210171561044857610448610377565b60405281815282820160200187101561046057600080fd5b61047182602083016020860161038d565b9350610482915050602084016103b1565b90509250929050565b600181811c9082168061049f57607f821691505b6020821081036104bf57634e487b7160e01b600052602260045260246000fd5b50919050565b601f82111561050f57806000526020600020601f840160051c810160208510156104ec5750805b601f840160051c820191505b8181101561050c57600081556001016104f8565b50505b505050565b81516001600160401b0381111561052d5761052d610377565b6105418161053b845461048b565b846104c5565b6020601f821160018114610575576000831561055d5750848201515b600019600385901b1c1916600184901b17845561050c565b600084815260208120601f198516915b828110156105a55787850151825560209485019460019092019101610585565b50848210156105c35786840151600019600387901b60f8161c191681555b50505050600190811b01905550565b634e487b7160e01b600052601160045260246000fd5b6001815b600184111561062357808504811115610607576106076105d2565b600184161561061557908102905b60019390931c9280026105ec565b935093915050565b60008261063a575060016101ca565b81610647575060006101ca565b816001811461065d576002811461066757610683565b60019150506101ca565b60ff841115610678576106786105d2565b50506001821b6101ca565b5060208310610133831016604e8410600b84101617156106a6575081810a6101ca565b6106b360001984846105e8565b80600019048211156106c7576106c76105d2565b029392505050565b60006106de60ff84168361062b565b9392505050565b80820281158282048414176101ca576101ca6105d2565b602081526000825180602084015261071b81604085016020870161038d565b601f01601f19169190910160400192915050565b805160208083015191908110156104bf5760001960209190910360031b1b16919050565b808201808211156101ca576101ca6105d2565b60805160a05160c05160e051610100516101205161014051610f156107c06000396000610714015260006106e70152600061068f01526000610667015260006105c2015260006105ec015260006106160152610f156000f3fe608060405234801561001057600080fd5b50600436106100df5760003560e01c806370a082311161008c57806395d89b411161006657806395d89b41146101be578063a9059cbb146101c6578063d505accf146101d9578063dd62ed3e146101ee57600080fd5b806370a08231146101675780637ecebe001461019057806384b0196e146101a357600080fd5b806323b872dd116100bd57806323b872dd14610137578063313ce5671461014a5780633644e5151461015f57600080fd5b806306fdde03146100e4578063095ea7b31461010257806318160ddd14610125575b600080fd5b6100ec610227565b6040516100f99190610c78565b60405180910390f35b610115610110366004610cae565b6102b9565b60405190151581526020016100f9565b6002545b6040519081526020016100f9565b610115610145366004610cd8565b6102d3565b60085460405160ff90911681526020016100f9565b6101296102f7565b610129610175366004610d15565b6001600160a01b031660009081526020819052604090205490565b61012961019e366004610d15565b610306565b6101ab610324565b6040516100f99796959493929190610d30565b6100ec61036a565b6101156101d4366004610cae565b610379565b6101ec6101e7366004610dc8565b610387565b005b6101296101fc366004610e3b565b6001600160a01b03918216600090815260016020908152604080832093909416825291909152205490565b60606003805461023690610e6e565b80601f016020809104026020016040519081016040528092919081815260200182805461026290610e6e565b80156102af5780601f10610284576101008083540402835291602001916102af565b820191906000526020600020905b81548152906001019060200180831161029257829003601f168201915b5050505050905090565b6000336102c78185856104c6565b60019150505b92915050565b6000336102e18582856104d8565b6102ec858585610556565b506001949350505050565b60006103016105b5565b905090565b6001600160a01b0381166000908152600760205260408120546102cd565b6000606080600080600060606103386106e0565b61034061070d565b60408051600080825260208201909252600f60f81b9b939a50919850469750309650945092509050565b60606004805461023690610e6e565b6000336102c7818585610556565b834211156103b05760405163313c898160e11b8152600481018590526024015b60405180910390fd5b60007f6e71edae12b1b97f4d1f60370fef10105fa2faae0126114a169c64845d6126c98888886103fd8c6001600160a01b0316600090815260076020526040902080546001810190915590565b6040805160208101969096526001600160a01b0394851690860152929091166060840152608083015260a082015260c0810186905260e00160405160208183030381529060405280519060200120905060006104588261073a565b9050600061046882878787610767565b9050896001600160a01b0316816001600160a01b0316146104af576040516325c0072360e11b81526001600160a01b0380831660048301528b1660248201526044016103a7565b6104ba8a8a8a6104c6565b50505050505050505050565b6104d38383836001610795565b505050565b6001600160a01b038381166000908152600160209081526040808320938616835292905220546000198114610550578181101561054157604051637dc7a0d960e11b81526001600160a01b038416600482015260248101829052604481018390526064016103a7565b61055084848484036000610795565b50505050565b6001600160a01b03831661058057604051634b637e8f60e11b8152600060048201526024016103a7565b6001600160a01b0382166105aa5760405163ec442f0560e01b8152600060048201526024016103a7565b6104d383838361086a565b6000306001600160a01b037f00000000000000000000000000000000000000000000000000000000000000001614801561060e57507f000000000000000000000000000000000000000000000000000000000000000046145b1561063857507f000000000000000000000000000000000000000000000000000000000000000090565b610301604080517f8b73c3c69bb8fe3d512ecc4cf759cc79239f7b179b0ffacaa9a75d522b39400f60208201527f0000000000000000000000000000000000000000000000000000000000000000918101919091527f000000000000000000000000000000000000000000000000000000000000000060608201524660808201523060a082015260009060c00160405160208183030381529060405280519060200120905090565b60606103017f00000000000000000000000000000000000000000000000000000000000000006005610994565b60606103017f00000000000000000000000000000000000000000000000000000000000000006006610994565b60006102cd6107476105b5565b8360405161190160f01b8152600281019290925260228201526042902090565b60008060008061077988888888610a3f565b9250925092506107898282610b0e565b50909695505050505050565b6001600160a01b0384166107bf5760405163e602df0560e01b8152600060048201526024016103a7565b6001600160a01b0383166107e957604051634a1406b160e11b8152600060048201526024016103a7565b6001600160a01b038085166000908152600160209081526040808320938716835292905220829055801561055057826001600160a01b0316846001600160a01b03167f8c5be1e5ebec7d5bd14f71427d1e84f3dd0314c0f7b2291e5b200ac8c7c3b9258460405161085c91815260200190565b60405180910390a350505050565b6001600160a01b03831661089557806002600082825461088a9190610ea8565b909155506109079050565b6001600160a01b038316600090815260208190526040902054818110156108e85760405163391434e360e21b81526001600160a01b038516600482015260248101829052604481018390526064016103a7565b6001600160a01b03841660009081526020819052604090209082900390555b6001600160a01b03821661092357600280548290039055610942565b6001600160a01b03821660009081526020819052604090208054820190555b816001600160a01b0316836001600160a01b03167fddf252ad1be2c89b69c2b068fc378daa952ba7f163c4a11628f55a4df523b3ef8360405161098791815260200190565b60405180910390a3505050565b606060ff83146109ae576109a783610bcb565b90506102cd565b8180546109ba90610e6e565b80601f01602080910402602001604051908101604052809291908181526020018280546109e690610e6e565b8015610a335780601f10610a0857610100808354040283529160200191610a33565b820191906000526020600020905b815481529060010190602001808311610a1657829003601f168201915b505050505090506102cd565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a0841115610a7a5750600091506003905082610b04565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015610ace573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b038116610afa57506000925060019150829050610b04565b9250600091508190505b9450945094915050565b6000826003811115610b2257610b22610ec9565b03610b2b575050565b6001826003811115610b3f57610b3f610ec9565b03610b5d5760405163f645eedf60e01b815260040160405180910390fd5b6002826003811115610b7157610b71610ec9565b03610b925760405163fce698f760e01b8152600481018290526024016103a7565b6003826003811115610ba657610ba6610ec9565b03610bc7576040516335e2f38360e21b8152600481018290526024016103a7565b5050565b60606000610bd883610c0a565b604080516020808252818301909252919250600091906020820181803683375050509182525060208101929092525090565b600060ff8216601f8111156102cd57604051632cd44ac360e21b815260040160405180910390fd5b6000815180845260005b81811015610c5857602081850181015186830182015201610c3c565b506000602082860101526020601f19601f83011685010191505092915050565b602081526000610c8b6020830184610c32565b9392505050565b80356001600160a01b0381168114610ca957600080fd5b919050565b60008060408385031215610cc157600080fd5b610cca83610c92565b946020939093013593505050565b600080600060608486031215610ced57600080fd5b610cf684610c92565b9250610d0460208501610c92565b929592945050506040919091013590565b600060208284031215610d2757600080fd5b610c8b82610c92565b60ff60f81b8816815260e060208201526000610d4f60e0830189610c32565b8281036040840152610d618189610c32565b606084018890526001600160a01b038716608085015260a0840186905283810360c08501528451808252602080870193509091019060005b81811015610db7578351835260209384019390920191600101610d99565b50909b9a5050505050505050505050565b600080600080600080600060e0888a031215610de357600080fd5b610dec88610c92565b9650610dfa60208901610c92565b95506040880135945060608801359350608088013560ff81168114610e1e57600080fd5b9699959850939692959460a0840135945060c09093013592915050565b60008060408385031215610e4e57600080fd5b610e5783610c92565b9150610e6560208401610c92565b90509250929050565b600181811c90821680610e8257607f821691505b602082108103610ea257634e487b7160e01b600052602260045260246000fd5b50919050565b808201808211156102cd57634e487b7160e01b600052601160045260246000fd5b634e487b7160e01b600052602160045260246000fdfea2646970667358221220980df933090250ed6d8b370461c1fb4792c77ef078918e85b4739189346f305e64736f6c634300081a0033';

type MockTestTokenConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: MockTestTokenConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class MockTestToken__factory extends ContractFactory {
  constructor(...args: MockTestTokenConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'MockTestToken';
  }

  deploy(
    symbol: string,
    decimal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<MockTestToken> {
    return super.deploy(symbol, decimal, overrides || {}) as Promise<MockTestToken>;
  }
  getDeployTransaction(
    symbol: string,
    decimal: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(symbol, decimal, overrides || {});
  }
  attach(address: string): MockTestToken {
    return super.attach(address) as MockTestToken;
  }
  connect(signer: Signer): MockTestToken__factory {
    return super.connect(signer) as MockTestToken__factory;
  }
  static readonly contractName: 'MockTestToken';
  public readonly contractName: 'MockTestToken';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): MockTestTokenInterface {
    return new utils.Interface(_abi) as MockTestTokenInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): MockTestToken {
    return new Contract(address, _abi, signerOrProvider) as MockTestToken;
  }
}
