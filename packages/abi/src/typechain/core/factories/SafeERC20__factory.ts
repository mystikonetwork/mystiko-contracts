/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { SafeERC20, SafeERC20Interface } from '../SafeERC20';

const _abi = [
  {
    inputs: [
      {
        internalType: 'address',
        name: 'spender',
        type: 'address',
      },
      {
        internalType: 'uint256',
        name: 'currentAllowance',
        type: 'uint256',
      },
      {
        internalType: 'uint256',
        name: 'requestedDecrease',
        type: 'uint256',
      },
    ],
    name: 'SafeERC20FailedDecreaseAllowance',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'token',
        type: 'address',
      },
    ],
    name: 'SafeERC20FailedOperation',
    type: 'error',
  },
];

const _bytecode =
  '0x60808060405234601757603a9081601d823930815050f35b600080fdfe600080fdfea26469706673582212208d7cb6dfe2bdfd1a77ec86c0c59fade85ac9fd0cdf7675509b195fb7c81ca10e64736f6c634300081a0033';

type SafeERC20ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (xs: SafeERC20ConstructorParams): xs is ConstructorParameters<typeof ContractFactory> =>
  xs.length > 1;

export class SafeERC20__factory extends ContractFactory {
  constructor(...args: SafeERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'SafeERC20';
  }

  deploy(overrides?: Overrides & { from?: string | Promise<string> }): Promise<SafeERC20> {
    return super.deploy(overrides || {}) as Promise<SafeERC20>;
  }
  getDeployTransaction(overrides?: Overrides & { from?: string | Promise<string> }): TransactionRequest {
    return super.getDeployTransaction(overrides || {});
  }
  attach(address: string): SafeERC20 {
    return super.attach(address) as SafeERC20;
  }
  connect(signer: Signer): SafeERC20__factory {
    return super.connect(signer) as SafeERC20__factory;
  }
  static readonly contractName: 'SafeERC20';
  public readonly contractName: 'SafeERC20';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): SafeERC20Interface {
    return new utils.Interface(_abi) as SafeERC20Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): SafeERC20 {
    return new Contract(address, _abi, signerOrProvider) as SafeERC20;
  }
}
