/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides, BigNumberish } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { CommitmentPoolMain, CommitmentPoolMainInterface } from '../CommitmentPoolMain';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint8',
        name: '_treeHeight',
        type: 'uint8',
      },
      {
        internalType: 'uint256',
        name: '_minRollupFee',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: '_settingsCenter',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'AssociatedPoolNotMatched',
    type: 'error',
  },
  {
    inputs: [],
    name: 'AuditorNotesLengthError',
    type: 'error',
  },
  {
    inputs: [],
    name: 'CommitmentHasBeenSubmitted',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'param',
        type: 'string',
      },
    ],
    name: 'Duplicated',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ECDSAInvalidSignature',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'length',
        type: 'uint256',
      },
    ],
    name: 'ECDSAInvalidSignatureLength',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 's',
        type: 'bytes32',
      },
    ],
    name: 'ECDSAInvalidSignatureS',
    type: 'error',
  },
  {
    inputs: [],
    name: 'IndexOutOfBound',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'param',
        type: 'string',
      },
    ],
    name: 'Invalid',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NewRootIsDuplicated',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NoteHasBeenSpent',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OutputNotesLessThanThree',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ReentrancyGuardReentrantCall',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RejectRelay',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RejectRollup',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RollupFeeToFew',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'rollupSize',
        type: 'uint256',
      },
    ],
    name: 'RollupVerifierDisabled',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint8',
        name: 'bits',
        type: 'uint8',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'SafeCastOverflowedUintDowncast',
    type: 'error',
  },
  {
    inputs: [],
    name: 'SanctionedAddress',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'inputNumber',
        type: 'uint32',
      },
      {
        internalType: 'uint32',
        name: 'outputNumber',
        type: 'uint32',
      },
    ],
    name: 'TransactVerifierDisabled',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TreeHeightLessThanZero',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TreeHeightOutOfBounds',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TreeIsFull',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'commitment',
        type: 'uint256',
      },
    ],
    name: 'CommitmentIncluded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'commitment',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'rollupFee',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'leafIndex',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'encryptedNote',
        type: 'bytes',
      },
    ],
    name: 'CommitmentQueued',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'rootHash',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'serialNumber',
        type: 'uint256',
      },
    ],
    name: 'CommitmentSpent',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint64',
        name: 'id',
        type: 'uint64',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'auditorPublicKey',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'encryptedAuditorNote',
        type: 'uint256',
      },
    ],
    name: 'EncryptedAuditorNote',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'uint64',
            name: 'id',
            type: 'uint64',
          },
          {
            internalType: 'uint256',
            name: 'publicKey',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'note',
            type: 'uint256',
          },
        ],
        indexed: false,
        internalType: 'struct CommitmentPool.AuditorNote[]',
        name: 'notes',
        type: 'tuple[]',
      },
    ],
    name: 'EncryptedAuditorNotes',
    type: 'event',
  },
  {
    inputs: [],
    name: 'AUDITOR_COUNT',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_fullPath',
        type: 'uint256',
      },
      {
        internalType: 'uint32',
        name: '_rollupSize',
        type: 'uint32',
      },
    ],
    name: '_pathIndices',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetAddress',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetType',
    outputs: [
      {
        internalType: 'enum AssetPool.AssetType',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'defaultMinRollupFee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'commitment',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'executorFee',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'rollupFee',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'encryptedNote',
            type: 'bytes',
          },
        ],
        internalType: 'struct ICommitmentPool.CommitmentRequest',
        name: '_request',
        type: 'tuple',
      },
      {
        internalType: 'address',
        name: '_executor',
        type: 'address',
      },
    ],
    name: 'enqueue',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAllAuditorPublicKeys',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_index',
        type: 'uint256',
      },
    ],
    name: 'getAuditorPublicKey',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCommitmentCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCommitmentIncludedCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCommitmentQueuedCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getMinRollupFee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getNullifierCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getQueuedCommitments',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getTreeCapacity',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_commitment',
        type: 'uint256',
      },
    ],
    name: 'isHistoricCommitment',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'root',
        type: 'uint256',
      },
    ],
    name: 'isKnownRoot',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_serialNumber',
        type: 'uint256',
      },
    ],
    name: 'isSpentSerialNumber',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'a',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256[2]',
                    name: 'X',
                    type: 'uint256[2]',
                  },
                  {
                    internalType: 'uint256[2]',
                    name: 'Y',
                    type: 'uint256[2]',
                  },
                ],
                internalType: 'struct IVerifier.G2Point',
                name: 'b',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'c',
                type: 'tuple',
              },
            ],
            internalType: 'struct IVerifier.Proof',
            name: 'proof',
            type: 'tuple',
          },
          {
            internalType: 'uint32',
            name: 'rollupSize',
            type: 'uint32',
          },
          {
            internalType: 'uint256',
            name: 'newRoot',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'leafHash',
            type: 'uint256',
          },
        ],
        internalType: 'struct ICommitmentPool.RollupRequest',
        name: '_request',
        type: 'tuple',
      },
    ],
    name: 'rollup',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'settings',
    outputs: [
      {
        internalType: 'contract MystikoSettings',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'a',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256[2]',
                    name: 'X',
                    type: 'uint256[2]',
                  },
                  {
                    internalType: 'uint256[2]',
                    name: 'Y',
                    type: 'uint256[2]',
                  },
                ],
                internalType: 'struct IVerifier.G2Point',
                name: 'b',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'c',
                type: 'tuple',
              },
            ],
            internalType: 'struct IVerifier.Proof',
            name: 'proof',
            type: 'tuple',
          },
          {
            internalType: 'uint256',
            name: 'rootHash',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'serialNumbers',
            type: 'uint256[]',
          },
          {
            internalType: 'uint256[]',
            name: 'sigHashes',
            type: 'uint256[]',
          },
          {
            internalType: 'bytes32',
            name: 'sigPk',
            type: 'bytes32',
          },
          {
            internalType: 'uint256',
            name: 'publicAmount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'relayerFeeAmount',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'outCommitments',
            type: 'uint256[]',
          },
          {
            internalType: 'uint256[]',
            name: 'outRollupFees',
            type: 'uint256[]',
          },
          {
            internalType: 'address',
            name: 'publicRecipient',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'relayerAddress',
            type: 'address',
          },
          {
            internalType: 'bytes[]',
            name: 'outEncryptedNotes',
            type: 'bytes[]',
          },
          {
            internalType: 'uint256',
            name: 'randomAuditingPublicKey',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'encryptedAuditorNotes',
            type: 'uint256[]',
          },
        ],
        internalType: 'struct ICommitmentPool.TransactRequest',
        name: '_request',
        type: 'tuple',
      },
      {
        internalType: 'bytes',
        name: '_signature',
        type: 'bytes',
      },
    ],
    name: 'transact',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    stateMutability: 'payable',
    type: 'receive',
  },
];

const _bytecode =
  '0x60a0346100f957601f612ffe38819003918201601f19168301916001600160401b038311848410176100fe578084926060946040528339810103126100f95780519060ff82168083036100f95760208201516040909201516001600160a01b03811693908490036100f957600160005560006004556000600555600060065581156100e8576001610093921b608052610114565b8060085560005260076020526040600020600160ff1982541617905560095560018060a01b0319600a541617600a5560405161290f90816106ef823960805181818161044c0152818161093a015261197f0152f35b632c4f29b160e21b60005260046000fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b60ff168061014157507f09f658457775074ff4c842032a5ec2f1134c32784cca59d594caac8c503b792390565b6001810361016e57507f1a77569b79cb7c2eaf9368de9e3b1efc0a606561e5ab299c2337340f3cdd576a90565b6002810361019b57507f111bd0002b1e3b8f1978c932b5ccb2fab87fdb0acab2ddb266f9a346dcb11ee190565b600381036101c857507f040868ea2a363e05d7ae44280f69b49e429ab096ca2844efe91f8d6b3dad57dd90565b600481036101f457507ef8f605c92c8502c8fe83be1b83b24e3f67312a388f30cbadb5dee8974137c390565b6005810361022157507f1adc043c99adbc0c86a60a36db0f661e2dd96f36ede322f954386d8935a0c5d990565b6006810361024e57507f2a1fedfa71da723ac3e9b35cef752fa1b647b2b737a23e91241cb7bdc419e3f490565b6007810361027b57507f17fe1974543c4c4b228e1292f7e3200d31435fc910ee5a8c5cafd329cc4b256b90565b600881036102a857507f0e84a586eb63a0eec0f1fe5785022441f0e29e4ae859c7ce1f5fc88a42ad2e6b90565b600981036102d557507f193deb901f6eeb032e02e093280db17e373d4ff52bafda9215b46bb9b0a86f3e90565b600a810361030257507f1d10ca7b985697cb519565a5006c3f44b020b2edab9b7422ed15dc34532f940690565b600b810361032f57507f1dc200763555467a4e583e00badfdc1fb4d3d3f8f1cc81f31fd2f8b38777608190565b600c810361035c57507f203dd11fdba0ed13b20ca2d6952f3feb7461836a03512e0cccce8467b320b2f690565b600d810361038957507f0591af64e64a3e69caf23eee2bdea90885343a49f547ee9464e95d8d6267e4f790565b600e81036103b657507f2af572f1077a32f46dc8e307d43c0fa6753b400b2107325976b8df7380545ff690565b600f81036103e357507f043227ae4b70b1aacd04e35e6aaed7b56d91220c31e97aaf52e12a6a56984e5290565b6010810361041057507f2976f1f6a91d83d4c528dad69ece6d3d91934b0e5657e915b360c8c4c2fb54e690565b6011810361043c57507ee5c251c9e093658be0cd1b0df55b6f70f3d09146c1c8b4212a4ddcde700dbc90565b6012810361046957507f0267cbbc1bc2f1c3e3073d2ee60df8cc0bfef39fe3cee735c9ad5c8ad30064d290565b6013810361049657507f2f356057bc56f67dbf159a0e8935022acd5e982dce9f4071adc43e4d57ce27e690565b601481036104c357507f273db68f52f12a9d8022ae524050064e42d4d1661c9bcce958acf89b5e8b127b90565b601581036104f057507f0496a18ad4cca81b7c98ceb197439ad925e0f7f62d69dfa42cf9574be77fe30f90565b6016810361051d57507f24f89a3f943d421b2f3a554b65459f42b820ac09d6fd9d693df5f8ba732ab59690565b6017810361054a57507f1b55bfd751c6807df36876cdce68034ab43210be2bc8afa8043c7f428604e7a790565b6018810361057757507f16d6595a398cf20f2489b90e958166f1e19c537c0c46e9b8ea5462391ee8f14390565b601981036105a457507f0f01447ef8f621592474b678ed2fc404ebaf22a6fce15364bb4152a88c11361390565b601a81036105d157507f026c2dffee48bacbc9d21cf90aa7c6e525ab01db6966a9e7e53b3d3f4d1f5a4d90565b601b81036105fe57507f234fe90732795745b2c504c791242a2bb193baa1cbeab57db9324b6bb913481790565b601c810361062b57507f23a8e0a7e60981c52ebb498c260d5bef4d7c65145d17128996a77c33a3262a7e90565b601d810361065857507f24ee69d2565210c7027ff6fc2657ed029278bc79f41077fe3281ea5d5d8e80f990565b601e810361068557507f1de402fa32463bb2917b733aeef0197a49cacacd1fe860c3acc8cd3b65a30a6890565b601f81036106b257507f1d3015a0f6a7b3f754171d0540628107e50e25debceb16e0e33ae4205501896d90565b6020036106dd577f264a260539342647256819046bae05bed903a8d19b3c90439d67317d5d88132290565b639780f42960e01b60005260046000fdfe608080604052600436101561001d575b50361561001b57600080fd5b005b60003560e01c90816314a7737d14611a0b575080631ba46cfd146119ef5780633bb8d1b4146119be5780633fe3347a146119a2578063484eb65214611967578063555d75f0146119495780635688881f1461192757806357060016146118f657806363bc7d3214611880578063720829711461059657806378d60cd71461033c5780637a5537441461031e578063866ac658146102ac57806387780df914610218578063a592bd69146101fc578063a6232a93146101cb578063b08892d0146101b0578063b2316c3314610192578063e06174e41461016b578063e500f5041461014d5763f2da1d4114610111573861000f565b346101485760403660031901126101485760243563ffffffff8116810361014857610140602091600435612512565b604051908152f35b600080fd5b34610148576000366003190112610148576020600554604051908152f35b346101485760003660031901126101485760206001600160a01b03600a5416604051908152f35b34610148576000366003190112610148576020600954604051908152f35b34610148576000366003190112610148576020610140612498565b34610148576020366003190112610148576004356000526007602052602060ff604060002054166040519015158152f35b3461014857600036600319011261014857602060405160058152f35b3461014857602036600319011261014857602460206001600160a01b03600a54166040519283809263dbda082960e01b825260043560048301525afa80156102a05760009061026d575b602090604051908152f35b506020813d602011610298575b81610287602093836120f3565b810103126101485760209051610262565b3d915061027a565b6040513d6000823e3d90fd5b34610148576000366003190112610148576004546102c9816122f9565b906000600554905b8281106102f257604051602080825281906102ee90820187612182565b0390f35b806102ff6001928461232b565b6000526003602052604060002054610317828761236b565b52016102d1565b34610148576000366003190112610148576020600654604051908152f35b346101485760403660031901126101485760043567ffffffffffffffff81116101485760a06003198236030112610148576040519061037a8261209f565b806004013582526020820160248201358152604083019160448101358352606084019060648101358252608481013567ffffffffffffffff81116101485760809160046103ca923692010161225b565b9401938452602435936001600160a01b038516850361014857602460206001600160a01b03600a5416604051928380926341fb697960e01b82523360048301525afa9081156102a05760009161055c575b506001600160a01b033091160361054b57610434612498565b82511061053a5761044a6005546004549061232b565b7f00000000000000000000000000000000000000000000000000000000000000001115610529578251600052600160205260ff6040600020541661051857826104b1935160005260016020526040600020600160ff19825416179055519151905191612604565b5190816104ba57005b600080809381935af16104cb612584565b50156104d357005b60405162461bcd60e51b815260206004820152601c60248201527f6578656375746f7220666565207472616e73666572206661696c6564000000006044820152606490fd5b63e38cd14d60e01b60005260046000fd5b633b5ccb4360e21b60005260046000fd5b63784f02bd60e11b60005260046000fd5b635335a04560e01b60005260046000fd5b90506020813d60201161058e575b81610577602093836120f3565b8101031261014857610588906122af565b8661041b565b3d915061056a565b346101485760403660031901126101485760043567ffffffffffffffff811161014857803603906003198201916102a0831261014857604051926101c084019084821067ffffffffffffffff83111761186a57610100916040521261014857608060405191610604836120d7565b6106113685600401612115565b8352604319011261014857604051610628816120bb565b610635366044850161213d565b8152610644366084850161213d565b6020820152602082015261065b3660c48401612115565b60408201528252610104810135602083015261012481013567ffffffffffffffff81116101485761069290600436918401016121ce565b604083015261014481013567ffffffffffffffff8111610148576106bc90600436918401016121ce565b6060830152610164810135608083015261018481013560a08301526101a481013560c08301526101c481013567ffffffffffffffff81116101485761070790600436918401016121ce565b60e08301526101e481013567ffffffffffffffff81116101485761073190600436918401016121ce565b610100830152610744610204820161222b565b610120830152610757610224820161222b565b61014083015261024481013567ffffffffffffffff81116101485781013660238201121561014857600481013561078d816121b6565b9161079b60405193846120f3565b818352602060048185019360051b83010101903682116101485760248101925b82841061183857505050506101608301526102648101356101808301526102848101359067ffffffffffffffff82116101485760046107fd92369201016121ce565b6101a082015260243567ffffffffffffffff81116101485761082390369060040161225b565b6002600054146118275760026000556108406040830151516125b4565b9061084f60e0840151516125b4565b906001600160a01b03600a5416604051631dcdf73160e31b8152306004820152602081602481855afa9081156102a0576000916117ed575b50806117de575b6117bd5760c085015161171a575b604080516385e861eb60e01b815263ffffffff868116600483015285166024820152929083604481855afa9283156102a0576000936116e9575b506020830151156116c85763ffffffff8516606087015151036116825763ffffffff8416610100870151510361163c5763ffffffff841661016087015151036115f65761093860055461093363ffffffff8716916004549061232b565b61232b565b7f0000000000000000000000000000000000000000000000000000000000000000106105295760405163df592f7d60e01b8152326004820152602081602481865afa9081156102a0576000916115bc575b50611571576001600160a01b03610120870151166040519063df592f7d60e01b82526004820152602081602481865afa9081156102a057600091611582575b50611571576101a086015151600563ffffffff8716029063ffffffff8716820460051463ffffffff881615171561125d57036115605761016086015151600381101561154f576060908061142b575050610120860151610140870151604051916bffffffffffffffffffffffff199060601b1660208301526bffffffffffffffffffffffff199060601b16603482015260288152610a676048826120f3565b602081519101207f19457468657265756d205369676e6564204d6573736167653a0a333200000000600052601c526001600160a01b03610abd610ab4603c6000209360808a01519461278c565b909291926127c8565b16036113e55763ffffffff610ad18561247d565b1694600463ffffffff610ae38761247d565b16019363ffffffff851161125d57610b0f63ffffffff610b028361247d565b1663ffffffff871661232b565b9460028601861161125d5763ffffffff871660020163ffffffff811161125d5763ffffffff1660058102908082046005149015171561125d57610b58610b5d916002890161232b565b6122f9565b976020840151600052600760205260ff60406000205416156113b9576020840151610b878a612338565b52600163ffffffff89160163ffffffff811161125d5760005b63ffffffff8a16811061133f57505060808401516001820180831161125d57610bc9908b61236b565b5260a08401516002820180831161125d57610be4908b61236b565b5260c08401519060038101811161125d576003610c0291018a61236b565b52610c1963ffffffff831663ffffffff831661232b565b610c21612498565b9160005b63ffffffff8516811061127357505050506020610c46610180840151612745565b8051610c52888b61236b565b52015160018601861161125d57600493600091610c72600189018b61236b565b52604051633044b79b60e21b815294859182905afa9283156102a057600093611240575b5060009260078601600287011161122c57600c86019586600282011161121857845b600581106111cd57505050825b6101a08301518051821015610cfc5790610ce18160019361236b565b51610cf5610cef838a61232b565b8b61236b565b5201610cc5565b505085610d2f6020896001600160a01b0388511686518860405180968195829463c941764760e01b8452600484016123a7565b03925af19081156111c2578591611184575b501561113e57835b63ffffffff821681106110aa575050825b63ffffffff8216811061103f576004838560a082015180611021575b5060c082015180611003575b50806001600160a01b03600a541660405194858092633044b79b60e21b82525afa928315610ff6578193610fd2575b50604082015151600581029080820460051490151715610fbe57610dd7819493946121b6565b90610de560405192836120f3565b808252610df4601f19916121b6565b01825b818110610f8f57505081825b60408601515163ffffffff821690811015610f0357849667ffffffff000000008360201b1696600583029280840460051490151715945b63ffffffff8a166005811015610ee9578690610e56838a61236b565b51818c179052610e66818561236b565b516020610e73858c61236b565b5101526101a085015191610ed55790610e8f610e95928761232b565b9061236b565b516040610ea2838a61236b565b5101526000198114610ec1576001610ebb910199612715565b98610e3a565b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b8a52601160045260248afd5b5098509350955050610efa90612715565b94909394610e03565b5050506040519060208201602083528151809152602060408401920190845b818110610f5757857f6af07ebcb33931abd348e785f70c6d259390cf799191f8c99124245b96e1a61386860387a16001815580f35b909192602060606001926040875167ffffffffffffffff81511683528481015185840152015160408201520194019101919091610f22565b602090604096959651610fa1816120d7565b858152858382015285604082015282828601015201949394610df7565b634e487b7160e01b82526011600452602482fd5b610fef9193503d8085833e610fe781836120f3565b810190612403565b9183610db1565b50604051903d90823e3d90fd5b61101b906001600160a01b03610140850151166126b7565b83610d82565b611039906001600160a01b03610120850151166126b7565b83610d76565b60018161105563ffffffff9360e087015161236b565b51865281602052604086208260ff198254161790556110a261107b8260e088015161236b565b5161108b8361010089015161236b565b5161109b846101608a015161236b565b5191612604565b019050610d5a565b6110b881604086015161236b565b518552600260205260408520600160ff198254161790556006546001810180911161112a5763ffffffff9160019160065560208601516110fc82604089015161236b565b51907f3c2372ab6130817bd6b8fc6dbaecae947e84201b49535d358debaa6c34c23ecf8980a3019050610d49565b634e487b7160e01b86526011600452602486fd5b6040516314e8955b60e21b815260206004820152600e60248201527f7472616e736163742070726f6f660000000000000000000000000000000000006044820152606490fd5b90506020813d6020116111ba575b8161119f602093836120f3565b810103126111b6576111b0906122a2565b85610d41565b8480fd5b3d9150611192565b6040513d87823e3d90fd5b8060206111e56111df6001948761236b565b51612745565b80516111f88e610e8f8660028a0161232b565b52015161121161120b836007870161232b565b8d61236b565b5201610cb8565b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b84526011600452602484fd5b6112569193503d806000833e610fe781836120f3565b9187610c96565b634e487b7160e01b600052601160045260246000fd5b6112818160e088015161236b565b51600052600160205260ff604060002054166112f957836112a78261010089015161236b565b511061053a57806112be60019260e089015161236b565b516112d38d610e8f63ffffffff87168561232b565b526112e38161010089015161236b565b516112f28d610e8f878561232b565b5201610c25565b60405163bee3611160e01b815260206004820152600a60248201527f636f6d6d69746d656e74000000000000000000000000000000000000000000006044820152606490fd5b61134d81604088015161236b565b519081600052600260205260ff604060002054166113a857600181019182821161125d5761137d6001938e61236b565b5261138c81606089015161236b565b516113a18d610e8f63ffffffff87168561232b565b5201610ba0565b6307faab7160e51b60005260046000fd5b60646040516314e8955b60e21b81526020600482015260046024820152631c9bdbdd60e21b6044820152fd5b6040516314e8955b60e21b815260206004820152600960248201527f7369676e617475726500000000000000000000000000000000000000000000006044820152606490fd5b6001036114b357506101208601516114ae6048610140890151926114536101608b0151612338565b516040519485926bffffffffffffffffffffffff199060601b1660208401526bffffffffffffffffffffffff199060601b16603483015261149d81518092602086860191016125e1565b81010301601f1981018352826120f3565b610a67565b6114ae61012088015160486101408a0151936114d36101608c0151612338565b516114e26101608d015161235b565b51916040519687956bffffffffffffffffffffffff1990831b1660208701526bffffffffffffffffffffffff19911b16603485015261152a81518092602086880191016125e1565b830161153f82518093602086850191016125e1565b010103601f1981018352826120f3565b633fb1945d60e11b60005260046000fd5b633acf48bb60e21b60005260046000fd5b632e70c0b160e01b60005260046000fd5b90506020813d6020116115b4575b8161159d602093836120f3565b81010312610148576115ae906122a2565b876109c8565b3d9150611590565b90506020813d6020116115ee575b816115d7602093836120f3565b81010312610148576115e8906122a2565b87610989565b3d91506115ca565b6040516314e8955b60e21b815260206004820152601860248201527f6f7574456e637279707465644e6f746573206c656e67746800000000000000006044820152606490fd5b6040516314e8955b60e21b815260206004820152601460248201527f6f7574526f6c6c757046656573206c656e6774680000000000000000000000006044820152606490fd5b6040516314e8955b60e21b815260206004820152601060248201527f736967486173686573206c656e677468000000000000000000000000000000006044820152606490fd5b63ffffffff8481876368975a4760e01b600052166004521660245260446000fd5b61170c91935060403d604011611713575b61170481836120f3565b8101906122c3565b91866108d6565b503d6116fa565b604051611726816120bb565b3081526001600160a01b03602082013381528160405193635ee36ce960e01b85525116600484015251166024820152602081604481855afa9081156102a057600091611783575b5061089c5763324af8d960e11b60005260046000fd5b90506020813d6020116117b5575b8161179e602093836120f3565b81010312610148576117af906122a2565b8661176d565b3d9150611791565b63ffffffff8381866368975a4760e01b600052166004521660245260446000fd5b5063ffffffff8316151561088e565b90506020813d60201161181f575b81611808602093836120f3565b8101031261014857611819906122a2565b86610887565b3d91506117fb565b633ee5aeb560e01b60005260046000fd5b833567ffffffffffffffff81116101485760209161185f839283600436928801010161225b565b8152019301926107bb565b634e487b7160e01b600052604160045260246000fd5b3461014857600036600319011261014857600460006001600160a01b03600a541660405192838092633044b79b60e21b82525afa80156102a0576102ee916000916118db575b50604051918291602083526020830190612182565b6118f091503d806000833e610fe781836120f3565b826118c6565b34610148576020366003190112610148576004356000526001602052602060ff604060002054166040519015158152f35b346101485760003660031901126101485760206101406005546004549061232b565b34610148576000366003190112610148576020600454604051908152f35b346101485760003660031901126101485760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461014857600036600319011261014857602060405160018152f35b34610148576020366003190112610148576004356000526002602052602060ff604060002054166040519015158152f35b3461014857600036600319011261014857602060405160008152f35b34610148573660031901906101608212610148576000916080820182811067ffffffffffffffff82111761208b576040526101001361208757604051611a50816120d7565b611a5b366004612115565b8152608036604319011261208357604051611a75816120bb565b611a8036604461213d565b8152611a8d36608461213d565b60208201526020820152611aa23660c4612115565b60408201528152610104359063ffffffff821680830361207f57602082019283526040820161012435815260608301936101443585526004549160055492604051611aec8161209f565b3081526020810195338752604082019081526060820183815260808301918783526001600160a01b0380600a541699816040519662039b1360e11b8852511660048701525116602485015251604484015251606483015251608482015260208160a481895afa908115612074578991612036575b501561200e5781518852600760205260ff604089205416611fff5763ffffffff83511611611fa55763ffffffff8251168015611feb578306611fa557604063ffffffff83511660248251809781936305afd53360e31b835260048301525afa938415611f9a578794611f79575b50602084015115611f5f5763ffffffff82511695611bf4611bee8886612512565b976122f9565b958895895b63ffffffff865116811015611caf57611c12818861232b565b97888c52600360205260408c209060405191611c2d836120bb565b60018154918285520154906020840191825215611ca0578291611c62918d611c5a8760019897519261236b565b52519061232b565b998d5260036020528c83604082208281550155517ffe6b097b46a78e08506a3143b6337c2505ba77df76fe05c3663a987395d634138d80a201611bf9565b63d3482f7b60e01b8e5260048efd5b508996949550888863ffffffff885116600454908103908111610ed55760045560405160208101918260208251919201908c5b818110611f495750505090611d22817f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001949303601f1981018352826120f3565b5190200680945103611f035760405193611d3d60a0866120f3565b600485526080366020870137600854611d5586612338565b528551611d618661235b565b52845160021015611eef576060850152835160031015611edb57916001600160a01b0384926020946080611db2970152511690518860405180968195829463c941764760e01b8452600484016123a7565b03925af19081156111c2578591611ea1575b5015611e5b5783808080948194611de463ffffffff89511660055461232b565b60055551806008558252600760205260408220600160ff19825416179055335af1611e0d612584565b5015611e165780f35b60405162461bcd60e51b815260206004820152601a60248201527f726f6c6c757020666565207472616e73666572206661696c65640000000000006044820152606490fd5b6040516314e8955b60e21b815260206004820152600560248201527f70726f6f660000000000000000000000000000000000000000000000000000006044820152606490fd5b90506020813d602011611ed3575b81611ebc602093836120f3565b810103126111b657611ecd906122a2565b85611dc4565b3d9150611eaf565b634e487b7160e01b88526032600452602488fd5b634e487b7160e01b89526032600452602489fd5b6040516314e8955b60e21b815260206004820152600860248201527f6c656166486173680000000000000000000000000000000000000000000000006044820152606490fd5b8251845260209384019390920191600101611ce2565b815163f5735a5f60e01b885263ffffffff16600452602487fd5b611f9391945060403d6040116117135761170481836120f3565b9287611bcd565b6040513d89823e3d90fd5b6040516314e8955b60e21b815260206004820152600a60248201527f726f6c6c757053697a65000000000000000000000000000000000000000000006044820152606490fd5b634e487b7160e01b88526012600452602488fd5b63e2e1210360e01b8852600488fd5b7fff4e3423000000000000000000000000000000000000000000000000000000008852600488fd5b90506020813d60201161206c575b81612051602093836120f3565b8101031261206857612062906122a2565b89611b60565b8880fd5b3d9150612044565b6040513d8b823e3d90fd5b8380fd5b8280fd5b5080fd5b634e487b7160e01b84526041600452602484fd5b60a0810190811067ffffffffffffffff82111761186a57604052565b6040810190811067ffffffffffffffff82111761186a57604052565b6060810190811067ffffffffffffffff82111761186a57604052565b90601f8019910116810190811067ffffffffffffffff82111761186a57604052565b91908260409103126101485760405161212d816120bb565b6020808294803584520135910152565b9080601f830112156101485760405191612156836120bb565b82906040810192831161014857905b8282106121725750505090565b8135815260209182019101612165565b906020808351928381520192019060005b8181106121a05750505090565b8251845260209384019390920191600101612193565b67ffffffffffffffff811161186a5760051b60200190565b9080601f830112156101485781356121e5816121b6565b926121f360405194856120f3565b81845260208085019260051b82010192831161014857602001905b82821061221b5750505090565b813581526020918201910161220e565b35906001600160a01b038216820361014857565b67ffffffffffffffff811161186a57601f01601f191660200190565b81601f82011215610148578035906122728261223f565b9261228060405194856120f3565b8284526020838301011161014857816000926020809301838601378301015290565b5190811515820361014857565b51906001600160a01b038216820361014857565b90816040910312610148576122f16020604051926122e0846120bb565b6122e9816122af565b8452016122a2565b602082015290565b90612303826121b6565b61231060405191826120f3565b8281528092612321601f19916121b6565b0190602036910137565b9190820180921161125d57565b8051156123455760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156123455760400190565b80518210156123455760209160051b010190565b906000905b6002821061239157505050565b6020806001928551815201930191019091612384565b61012090602060406124009594828151805186520151838501526123e283808301516123d6858801825161237f565b0151608086019061237f565b0151805160c0840152015160e0820152816101008201520190612182565b90565b6020818303126101485780519067ffffffffffffffff821161014857019080601f83011215610148578151612437816121b6565b9261244560405194856120f3565b81845260208085019260051b82010192831161014857602001905b82821061246d5750505090565b8151815260209182019101612460565b60011b906401fffffffe63fffffffe83169216820361125d57565b602460206001600160a01b03600a54166040519283809263c3c4bd0b60e01b82523060048301525afa9081156102a0576000916124dd575b5080612400575060095490565b906020823d60201161250a575b816124f7602093836120f3565b81010312612507575051386124d0565b80fd5b3d91506124ea565b9063ffffffff6002916101008282161015612573575b60108282161015612561575b60048282161015612550575b16101561254a5790565b60011c90565b92821c92821c633fffffff16612540565b600493841c931c630fffffff16612534565b600893841c931c62ffffff16612528565b3d156125af573d906125958261223f565b916125a360405193846120f3565b82523d6000602084013e565b606090565b63ffffffff81116125c85763ffffffff1690565b6306dfcc6560e41b600052602060045260245260446000fd5b60005b8381106125f45750506000910152565b81810151838201526020016125e4565b91906126156004546005549061232b565b90604051612622816120bb565b84815260016020820183815284600052600360205260406000209251835551910155600454906001820180921161125d577ff533f9705aac5020e21695ea3553ac7b6881070d2b6900ab2b1e3050304b5bf99360809260045560405193849283526020830152606060408301526126a881518092816060860152602086860191016125e1565b601f01601f19168101030190a2565b600080809381935af16126c8612584565b50156126d057565b60405162461bcd60e51b815260206004820152600f60248201527f7769746864726177206661696c656400000000000000000000000000000000006044820152606490fd5b63ffffffff1663ffffffff811461125d5760010190565b60405190612739826120bb565b60006020838281520152565b61274d61272c565b507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff6040519161277c836120bb565b60ff81901c835216602082015290565b81519190604183036127bd576127b692506020820151906060604084015193015160001a90612850565b9192909190565b505060009160029190565b919091600481101561283a57806127de57509050565b6000600182036127f95763f645eedf60e01b60005260046000fd5b5060028103612817578263fce698f760e01b60005260045260246000fd5b9091600360009214612827575050565b6335e2f38360e21b825260045260249150fd5b634e487b7160e01b600052602160045260246000fd5b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084116128cd579160209360809260ff60009560405194855216868401526040830152606082015282805260015afa156102a0576000516001600160a01b038116156128c15790600090600090565b50600090600190600090565b5050506000916003919056fea264697066735822122094b12f74b1b31e64d6377d6de4524eb82df3e0b657cc461e4116549d41fd034a64736f6c634300081a0033';

type CommitmentPoolMainConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CommitmentPoolMainConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CommitmentPoolMain__factory extends ContractFactory {
  constructor(...args: CommitmentPoolMainConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'CommitmentPoolMain';
  }

  deploy(
    _treeHeight: BigNumberish,
    _minRollupFee: BigNumberish,
    _settingsCenter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<CommitmentPoolMain> {
    return super.deploy(
      _treeHeight,
      _minRollupFee,
      _settingsCenter,
      overrides || {},
    ) as Promise<CommitmentPoolMain>;
  }
  getDeployTransaction(
    _treeHeight: BigNumberish,
    _minRollupFee: BigNumberish,
    _settingsCenter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_treeHeight, _minRollupFee, _settingsCenter, overrides || {});
  }
  attach(address: string): CommitmentPoolMain {
    return super.attach(address) as CommitmentPoolMain;
  }
  connect(signer: Signer): CommitmentPoolMain__factory {
    return super.connect(signer) as CommitmentPoolMain__factory;
  }
  static readonly contractName: 'CommitmentPoolMain';
  public readonly contractName: 'CommitmentPoolMain';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommitmentPoolMainInterface {
    return new utils.Interface(_abi) as CommitmentPoolMainInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): CommitmentPoolMain {
    return new Contract(address, _abi, signerOrProvider) as CommitmentPoolMain;
  }
}
