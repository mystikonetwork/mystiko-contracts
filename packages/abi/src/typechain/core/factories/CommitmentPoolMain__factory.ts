/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides, BigNumberish } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { CommitmentPoolMain, CommitmentPoolMainInterface } from '../CommitmentPoolMain';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint8',
        name: '_treeHeight',
        type: 'uint8',
      },
      {
        internalType: 'uint256',
        name: '_minRollupFee',
        type: 'uint256',
      },
      {
        internalType: 'address',
        name: '_settingsCenter',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [],
    name: 'AssociatedPoolNotMatched',
    type: 'error',
  },
  {
    inputs: [],
    name: 'AuditorNotesLengthError',
    type: 'error',
  },
  {
    inputs: [],
    name: 'CommitmentHasBeenSubmitted',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'param',
        type: 'string',
      },
    ],
    name: 'Duplicated',
    type: 'error',
  },
  {
    inputs: [],
    name: 'IndexOutOfBound',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'param',
        type: 'string',
      },
    ],
    name: 'Invalid',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NewRootIsDuplicated',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NoteHasBeenSpent',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OutputNotesLessThanThree',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RejectRelay',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RejectRollup',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'rollupSize',
        type: 'uint256',
      },
    ],
    name: 'RollupDisabled',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RollupFeeToFew',
    type: 'error',
  },
  {
    inputs: [],
    name: 'SanctionedAddress',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'inputNumber',
        type: 'uint32',
      },
      {
        internalType: 'uint32',
        name: 'outputNumber',
        type: 'uint32',
      },
    ],
    name: 'TransactDisabled',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TreeHeightLessThanZero',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TreeHeightOutOfBounds',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TreeIsFull',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'commitment',
        type: 'uint256',
      },
    ],
    name: 'CommitmentIncluded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'commitment',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'rollupFee',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'leafIndex',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'encryptedNote',
        type: 'bytes',
      },
    ],
    name: 'CommitmentQueued',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'rootHash',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'serialNumber',
        type: 'uint256',
      },
    ],
    name: 'CommitmentSpent',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint64',
        name: 'id',
        type: 'uint64',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'auditorPublicKey',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'encryptedAuditorNote',
        type: 'uint256',
      },
    ],
    name: 'EncryptedAuditorNote',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'uint64',
            name: 'id',
            type: 'uint64',
          },
          {
            internalType: 'uint256',
            name: 'publicKey',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'note',
            type: 'uint256',
          },
        ],
        indexed: false,
        internalType: 'struct CommitmentPool.AuditorNote[]',
        name: 'notes',
        type: 'tuple[]',
      },
    ],
    name: 'EncryptedAuditorNotes',
    type: 'event',
  },
  {
    inputs: [],
    name: 'AUDITOR_COUNT',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_fullPath',
        type: 'uint256',
      },
      {
        internalType: 'uint32',
        name: '_rollupSize',
        type: 'uint32',
      },
    ],
    name: '_pathIndices',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetAddress',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetType',
    outputs: [
      {
        internalType: 'enum AssetPool.AssetType',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'defaultMinRollupFee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'commitment',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'executorFee',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'rollupFee',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'encryptedNote',
            type: 'bytes',
          },
        ],
        internalType: 'struct ICommitmentPool.CommitmentRequest',
        name: '_request',
        type: 'tuple',
      },
      {
        internalType: 'address',
        name: '_executor',
        type: 'address',
      },
    ],
    name: 'enqueue',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAllAuditorPublicKeys',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_index',
        type: 'uint256',
      },
    ],
    name: 'getAuditorPublicKey',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCommitmentCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCommitmentIncludedCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCommitmentQueuedCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getMinRollupFee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getNullifierCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getQueuedCommitments',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getTreeCapacity',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_commitment',
        type: 'uint256',
      },
    ],
    name: 'isHistoricCommitment',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'root',
        type: 'uint256',
      },
    ],
    name: 'isKnownRoot',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_serialNumber',
        type: 'uint256',
      },
    ],
    name: 'isSpentSerialNumber',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'a',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256[2]',
                    name: 'X',
                    type: 'uint256[2]',
                  },
                  {
                    internalType: 'uint256[2]',
                    name: 'Y',
                    type: 'uint256[2]',
                  },
                ],
                internalType: 'struct IVerifier.G2Point',
                name: 'b',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'c',
                type: 'tuple',
              },
            ],
            internalType: 'struct IVerifier.Proof',
            name: 'proof',
            type: 'tuple',
          },
          {
            internalType: 'uint32',
            name: 'rollupSize',
            type: 'uint32',
          },
          {
            internalType: 'uint256',
            name: 'newRoot',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'leafHash',
            type: 'uint256',
          },
        ],
        internalType: 'struct ICommitmentPool.RollupRequest',
        name: '_request',
        type: 'tuple',
      },
    ],
    name: 'rollup',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'settingsCenter',
    outputs: [
      {
        internalType: 'contract MystikoSettingsCenter',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'a',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256[2]',
                    name: 'X',
                    type: 'uint256[2]',
                  },
                  {
                    internalType: 'uint256[2]',
                    name: 'Y',
                    type: 'uint256[2]',
                  },
                ],
                internalType: 'struct IVerifier.G2Point',
                name: 'b',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'c',
                type: 'tuple',
              },
            ],
            internalType: 'struct IVerifier.Proof',
            name: 'proof',
            type: 'tuple',
          },
          {
            internalType: 'uint256',
            name: 'rootHash',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'serialNumbers',
            type: 'uint256[]',
          },
          {
            internalType: 'uint256[]',
            name: 'sigHashes',
            type: 'uint256[]',
          },
          {
            internalType: 'bytes32',
            name: 'sigPk',
            type: 'bytes32',
          },
          {
            internalType: 'uint256',
            name: 'publicAmount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'relayerFeeAmount',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'outCommitments',
            type: 'uint256[]',
          },
          {
            internalType: 'uint256[]',
            name: 'outRollupFees',
            type: 'uint256[]',
          },
          {
            internalType: 'address',
            name: 'publicRecipient',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'relayerAddress',
            type: 'address',
          },
          {
            internalType: 'bytes[]',
            name: 'outEncryptedNotes',
            type: 'bytes[]',
          },
          {
            internalType: 'uint256',
            name: 'randomAuditingPublicKey',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'encryptedAuditorNotes',
            type: 'uint256[]',
          },
        ],
        internalType: 'struct ICommitmentPool.TransactRequest',
        name: '_request',
        type: 'tuple',
      },
      {
        internalType: 'bytes',
        name: '_signature',
        type: 'bytes',
      },
    ],
    name: 'transact',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    stateMutability: 'payable',
    type: 'receive',
  },
];

const _bytecode =
  '';

type CommitmentPoolMainConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CommitmentPoolMainConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CommitmentPoolMain__factory extends ContractFactory {
  constructor(...args: CommitmentPoolMainConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'CommitmentPoolMain';
  }

  deploy(
    _treeHeight: BigNumberish,
    _minRollupFee: BigNumberish,
    _settingsCenter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<CommitmentPoolMain> {
    return super.deploy(
      _treeHeight,
      _minRollupFee,
      _settingsCenter,
      overrides || {},
    ) as Promise<CommitmentPoolMain>;
  }
  getDeployTransaction(
    _treeHeight: BigNumberish,
    _minRollupFee: BigNumberish,
    _settingsCenter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_treeHeight, _minRollupFee, _settingsCenter, overrides || {});
  }
  attach(address: string): CommitmentPoolMain {
    return super.attach(address) as CommitmentPoolMain;
  }
  connect(signer: Signer): CommitmentPoolMain__factory {
    return super.connect(signer) as CommitmentPoolMain__factory;
  }
  static readonly contractName: 'CommitmentPoolMain';
  public readonly contractName: 'CommitmentPoolMain';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommitmentPoolMainInterface {
    return new utils.Interface(_abi) as CommitmentPoolMainInterface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): CommitmentPoolMain {
    return new Contract(address, _abi, signerOrProvider) as CommitmentPoolMain;
  }
}
