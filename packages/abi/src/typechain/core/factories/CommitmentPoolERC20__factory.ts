/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides, BigNumberish } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { CommitmentPoolERC20, CommitmentPoolERC20Interface } from '../CommitmentPoolERC20';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint8',
        name: '_treeHeight',
        type: 'uint8',
      },
      {
        internalType: 'uint256',
        name: '_minRollupFee',
        type: 'uint256',
      },
      {
        internalType: 'contract IERC20Metadata',
        name: '_token',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_settingsCenter',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'target',
        type: 'address',
      },
    ],
    name: 'AddressEmptyCode',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'AddressInsufficientBalance',
    type: 'error',
  },
  {
    inputs: [],
    name: 'AssociatedPoolNotMatched',
    type: 'error',
  },
  {
    inputs: [],
    name: 'AuditorNotesLengthError',
    type: 'error',
  },
  {
    inputs: [],
    name: 'CommitmentHasBeenSubmitted',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'param',
        type: 'string',
      },
    ],
    name: 'Duplicated',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ECDSAInvalidSignature',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'length',
        type: 'uint256',
      },
    ],
    name: 'ECDSAInvalidSignatureLength',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 's',
        type: 'bytes32',
      },
    ],
    name: 'ECDSAInvalidSignatureS',
    type: 'error',
  },
  {
    inputs: [],
    name: 'FailedInnerCall',
    type: 'error',
  },
  {
    inputs: [],
    name: 'IndexOutOfBound',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'param',
        type: 'string',
      },
    ],
    name: 'Invalid',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NewRootIsDuplicated',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NoteHasBeenSpent',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OutputNotesLessThanThree',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ReentrancyGuardReentrantCall',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RejectRelay',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RejectRollup',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RollupFeeToFew',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'rollupSize',
        type: 'uint256',
      },
    ],
    name: 'RollupVerifierDisabled',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint8',
        name: 'bits',
        type: 'uint8',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'SafeCastOverflowedUintDowncast',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'token',
        type: 'address',
      },
    ],
    name: 'SafeERC20FailedOperation',
    type: 'error',
  },
  {
    inputs: [],
    name: 'SanctionedAddress',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'inputNumber',
        type: 'uint32',
      },
      {
        internalType: 'uint32',
        name: 'outputNumber',
        type: 'uint32',
      },
    ],
    name: 'TransactVerifierDisabled',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TreeHeightLessThanZero',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TreeHeightOutOfBounds',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TreeIsFull',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'commitment',
        type: 'uint256',
      },
    ],
    name: 'CommitmentIncluded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'commitment',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'rollupFee',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'leafIndex',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'encryptedNote',
        type: 'bytes',
      },
    ],
    name: 'CommitmentQueued',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'rootHash',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'serialNumber',
        type: 'uint256',
      },
    ],
    name: 'CommitmentSpent',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint64',
        name: 'id',
        type: 'uint64',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'auditorPublicKey',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'encryptedAuditorNote',
        type: 'uint256',
      },
    ],
    name: 'EncryptedAuditorNote',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'uint64',
            name: 'id',
            type: 'uint64',
          },
          {
            internalType: 'uint256',
            name: 'publicKey',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'note',
            type: 'uint256',
          },
        ],
        indexed: false,
        internalType: 'struct CommitmentPool.AuditorNote[]',
        name: 'notes',
        type: 'tuple[]',
      },
    ],
    name: 'EncryptedAuditorNotes',
    type: 'event',
  },
  {
    inputs: [],
    name: 'AUDITOR_COUNT',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_fullPath',
        type: 'uint256',
      },
      {
        internalType: 'uint32',
        name: '_rollupSize',
        type: 'uint32',
      },
    ],
    name: '_pathIndices',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetAddress',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetDecimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetName',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetSymbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetType',
    outputs: [
      {
        internalType: 'enum AssetPool.AssetType',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'defaultMinRollupFee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'commitment',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'executorFee',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'rollupFee',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'encryptedNote',
            type: 'bytes',
          },
        ],
        internalType: 'struct ICommitmentPool.CommitmentRequest',
        name: '_request',
        type: 'tuple',
      },
      {
        internalType: 'address',
        name: '_executor',
        type: 'address',
      },
    ],
    name: 'enqueue',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAllAuditorPublicKeys',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_index',
        type: 'uint256',
      },
    ],
    name: 'getAuditorPublicKey',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCommitmentCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCommitmentIncludedCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCommitmentQueuedCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getMinRollupFee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getNullifierCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getQueuedCommitments',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getTreeCapacity',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_commitment',
        type: 'uint256',
      },
    ],
    name: 'isHistoricCommitment',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'root',
        type: 'uint256',
      },
    ],
    name: 'isKnownRoot',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_serialNumber',
        type: 'uint256',
      },
    ],
    name: 'isSpentSerialNumber',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'a',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256[2]',
                    name: 'X',
                    type: 'uint256[2]',
                  },
                  {
                    internalType: 'uint256[2]',
                    name: 'Y',
                    type: 'uint256[2]',
                  },
                ],
                internalType: 'struct IVerifier.G2Point',
                name: 'b',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'c',
                type: 'tuple',
              },
            ],
            internalType: 'struct IVerifier.Proof',
            name: 'proof',
            type: 'tuple',
          },
          {
            internalType: 'uint32',
            name: 'rollupSize',
            type: 'uint32',
          },
          {
            internalType: 'uint256',
            name: 'newRoot',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'leafHash',
            type: 'uint256',
          },
        ],
        internalType: 'struct ICommitmentPool.RollupRequest',
        name: '_request',
        type: 'tuple',
      },
    ],
    name: 'rollup',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'settings',
    outputs: [
      {
        internalType: 'contract MystikoSettings',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'a',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256[2]',
                    name: 'X',
                    type: 'uint256[2]',
                  },
                  {
                    internalType: 'uint256[2]',
                    name: 'Y',
                    type: 'uint256[2]',
                  },
                ],
                internalType: 'struct IVerifier.G2Point',
                name: 'b',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'c',
                type: 'tuple',
              },
            ],
            internalType: 'struct IVerifier.Proof',
            name: 'proof',
            type: 'tuple',
          },
          {
            internalType: 'uint256',
            name: 'rootHash',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'serialNumbers',
            type: 'uint256[]',
          },
          {
            internalType: 'uint256[]',
            name: 'sigHashes',
            type: 'uint256[]',
          },
          {
            internalType: 'bytes32',
            name: 'sigPk',
            type: 'bytes32',
          },
          {
            internalType: 'uint256',
            name: 'publicAmount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'relayerFeeAmount',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'outCommitments',
            type: 'uint256[]',
          },
          {
            internalType: 'uint256[]',
            name: 'outRollupFees',
            type: 'uint256[]',
          },
          {
            internalType: 'address',
            name: 'publicRecipient',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'relayerAddress',
            type: 'address',
          },
          {
            internalType: 'bytes[]',
            name: 'outEncryptedNotes',
            type: 'bytes[]',
          },
          {
            internalType: 'uint256',
            name: 'randomAuditingPublicKey',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'encryptedAuditorNotes',
            type: 'uint256[]',
          },
        ],
        internalType: 'struct ICommitmentPool.TransactRequest',
        name: '_request',
        type: 'tuple',
      },
      {
        internalType: 'bytes',
        name: '_signature',
        type: 'bytes',
      },
    ],
    name: 'transact',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x60a06040526000600455600060055560006006553480156200002057600080fd5b5060405162003ce438038062003ce48339810160408190526200004391620007ae565b8184848360016000819055508260ff166000036200007457604051632c4f29b160e21b815260040160405180910390fd5b600160ff84161b6080526200008983620000e9565b60088190556000908152600760205260409020805460ff19166001179055600991909155600a80546001600160a01b039283166001600160a01b031991821617909155600b805494909216931692909217909155506200080f9350505050565b60008160ff166000036200011e57507f09f658457775074ff4c842032a5ec2f1134c32784cca59d594caac8c503b7923919050565b8160ff166001036200015157507f1a77569b79cb7c2eaf9368de9e3b1efc0a606561e5ab299c2337340f3cdd576a919050565b8160ff166002036200018457507f111bd0002b1e3b8f1978c932b5ccb2fab87fdb0acab2ddb266f9a346dcb11ee1919050565b8160ff16600303620001b757507f040868ea2a363e05d7ae44280f69b49e429ab096ca2844efe91f8d6b3dad57dd919050565b8160ff16600403620001e957507ef8f605c92c8502c8fe83be1b83b24e3f67312a388f30cbadb5dee8974137c3919050565b8160ff166005036200021c57507f1adc043c99adbc0c86a60a36db0f661e2dd96f36ede322f954386d8935a0c5d9919050565b8160ff166006036200024f57507f2a1fedfa71da723ac3e9b35cef752fa1b647b2b737a23e91241cb7bdc419e3f4919050565b8160ff166007036200028257507f17fe1974543c4c4b228e1292f7e3200d31435fc910ee5a8c5cafd329cc4b256b919050565b8160ff16600803620002b557507f0e84a586eb63a0eec0f1fe5785022441f0e29e4ae859c7ce1f5fc88a42ad2e6b919050565b8160ff16600903620002e857507f193deb901f6eeb032e02e093280db17e373d4ff52bafda9215b46bb9b0a86f3e919050565b8160ff16600a036200031b57507f1d10ca7b985697cb519565a5006c3f44b020b2edab9b7422ed15dc34532f9406919050565b8160ff16600b036200034e57507f1dc200763555467a4e583e00badfdc1fb4d3d3f8f1cc81f31fd2f8b387776081919050565b8160ff16600c036200038157507f203dd11fdba0ed13b20ca2d6952f3feb7461836a03512e0cccce8467b320b2f6919050565b8160ff16600d03620003b457507f0591af64e64a3e69caf23eee2bdea90885343a49f547ee9464e95d8d6267e4f7919050565b8160ff16600e03620003e757507f2af572f1077a32f46dc8e307d43c0fa6753b400b2107325976b8df7380545ff6919050565b8160ff16600f036200041a57507f043227ae4b70b1aacd04e35e6aaed7b56d91220c31e97aaf52e12a6a56984e52919050565b8160ff166010036200044d57507f2976f1f6a91d83d4c528dad69ece6d3d91934b0e5657e915b360c8c4c2fb54e6919050565b8160ff166011036200047f57507ee5c251c9e093658be0cd1b0df55b6f70f3d09146c1c8b4212a4ddcde700dbc919050565b8160ff16601203620004b257507f0267cbbc1bc2f1c3e3073d2ee60df8cc0bfef39fe3cee735c9ad5c8ad30064d2919050565b8160ff16601303620004e557507f2f356057bc56f67dbf159a0e8935022acd5e982dce9f4071adc43e4d57ce27e6919050565b8160ff166014036200051857507f273db68f52f12a9d8022ae524050064e42d4d1661c9bcce958acf89b5e8b127b919050565b8160ff166015036200054b57507f0496a18ad4cca81b7c98ceb197439ad925e0f7f62d69dfa42cf9574be77fe30f919050565b8160ff166016036200057e57507f24f89a3f943d421b2f3a554b65459f42b820ac09d6fd9d693df5f8ba732ab596919050565b8160ff16601703620005b157507f1b55bfd751c6807df36876cdce68034ab43210be2bc8afa8043c7f428604e7a7919050565b8160ff16601803620005e457507f16d6595a398cf20f2489b90e958166f1e19c537c0c46e9b8ea5462391ee8f143919050565b8160ff166019036200061757507f0f01447ef8f621592474b678ed2fc404ebaf22a6fce15364bb4152a88c113613919050565b8160ff16601a036200064a57507f026c2dffee48bacbc9d21cf90aa7c6e525ab01db6966a9e7e53b3d3f4d1f5a4d919050565b8160ff16601b036200067d57507f234fe90732795745b2c504c791242a2bb193baa1cbeab57db9324b6bb9134817919050565b8160ff16601c03620006b057507f23a8e0a7e60981c52ebb498c260d5bef4d7c65145d17128996a77c33a3262a7e919050565b8160ff16601d03620006e357507f24ee69d2565210c7027ff6fc2657ed029278bc79f41077fe3281ea5d5d8e80f9919050565b8160ff16601e036200071657507f1de402fa32463bb2917b733aeef0197a49cacacd1fe860c3acc8cd3b65a30a68919050565b8160ff16601f036200074957507f1d3015a0f6a7b3f754171d0540628107e50e25debceb16e0e33ae4205501896d919050565b8160ff166020036200077c57507f264a260539342647256819046bae05bed903a8d19b3c90439d67317d5d881322919050565b604051639780f42960e01b815260040160405180910390fd5b6001600160a01b0381168114620007ab57600080fd5b50565b60008060008060808587031215620007c557600080fd5b845160ff81168114620007d757600080fd5b602086015160408701519195509350620007f18162000795565b6060860151909250620008048162000795565b939692955090935050565b6080516134ab620008396000396000818161023901528181610e3f015261180301526134ab6000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c80637a553744116100e3578063b2316c331161008c578063e06174e411610066578063e06174e414610356578063e500f50414610369578063f2da1d411461037157600080fd5b8063b2316c331461032b578063c2d4160114610334578063c9230c5d1461034e57600080fd5b8063a592bd69116100bd578063a592bd69146102f8578063a6232a9314610300578063b08892d01461032357600080fd5b80637a553744146102d5578063866ac658146102dd57806387780df9146102e557600080fd5b8063555d75f01161014557806363bc7d321161011f57806363bc7d321461029a57806372082971146102af57806378d60cd7146102c257600080fd5b8063555d75f0146102675780635688881f1461026f578063570600161461027757600080fd5b80633bb8d1b4116101765780633bb8d1b4146101f55780633fe3347a14610228578063484eb6521461023757600080fd5b806314a7737d1461019d578063176de7a8146101b25780631ba46cfd146101d0575b600080fd5b6101b06101ab3660046129e6565b610384565b005b6101ba6109f6565b6040516101c79190612aaa565b60405180910390f35b600b546001600160a01b03165b6040516001600160a01b0390911681526020016101c7565b610218610203366004612abd565b60009081526002602052604090205460ff1690565b60405190151581526020016101c7565b60006040516101c79190612aec565b7f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020016101c7565b600454610259565b610259610a6d565b610218610285366004612abd565b60009081526001602052604090205460ff1690565b6102a2610a7f565b6040516101c79190612b4f565b6101b06102bd366004612d0a565b610af1565b6101b06102d0366004612ecc565b611738565b600654610259565b6102a26118dc565b6102596102f3366004612abd565b61198f565b610259600581565b61021861030e366004612abd565b60009081526007602052604090205460ff1690565b610259611a03565b61025960095481565b61033c611a8c565b60405160ff90911681526020016101c7565b6101ba611afa565b600a546101dd906001600160a01b031681565b600554610259565b61025961037f366004612f73565b611b44565b600480546005546040805160a08101825230815233602080830191825287015163ffffffff168284019081526060830186815260808401868152600a549551635d63d9c360e01b815285516001600160a01b039081169a82019a909a529351891660248501529151604484015251606483015251608482015293949293909290911690635d63d9c39060a401602060405180830381865afa15801561042d573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906104519190612fa6565b610487576040517fff4e342300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60408085015160009081526007602052205460ff16156104ba5760405163e2e1210360e01b815260040160405180910390fd5b82846020015163ffffffff161115610507576040516314e8955b60e21b815260206004820152600a602482015269726f6c6c757053697a6560b01b60448201526064015b60405180910390fd5b602084015161051c9063ffffffff1683612fc1565b15610557576040516314e8955b60e21b815260206004820152600a602482015269726f6c6c757053697a6560b01b60448201526064016104fe565b600a5460208501516040516305afd53360e31b815263ffffffff90911660048201526000916001600160a01b031690632d7ea998906024016040805180830381865afa1580156105ab573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105cf9190612fe3565b9050806020015161060157602085015160405163f5735a5f60e01b815263ffffffff90911660048201526024016104fe565b6000610611848760200151611b44565b90506000866020015163ffffffff1667ffffffffffffffff811115610638576106386127f0565b604051908082528060200260200182016040528015610661578160200160208202803683370190505b5090506000805b886020015163ffffffff1681101561075f5760006106868289613038565b6000818152600360209081526040808320815180830190925280548083526001909101549282019290925292935090036106d35760405163d3482f7b60e01b815260040160405180910390fd5b80600001518584815181106106ea576106ea61304b565b6020026020010181815250508060200151846107069190613038565b60008381526003602052604080822082815560010182905583519051929650917ffe6b097b46a78e08506a3143b6337c2505ba77df76fe05c3663a987395d634139190a25050808061075790613061565b915050610668565b50876020015163ffffffff166004600082825461077c919061307a565b9250508190555060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001836040516020016107b7919061308d565b6040516020818303038152906040528051906020012060001c6107da9190612fc1565b905080896060015114610830576040516314e8955b60e21b815260206004820152600860248201527f6c6561664861736800000000000000000000000000000000000000000000000060448201526064016104fe565b60408051600480825260a0820190925260009160208201608080368337019050509050600854816000815181106108695761086961304b565b60200260200101818152505089604001518160018151811061088d5761088d61304b565b60200260200101818152505081816002815181106108ad576108ad61304b565b60200260200101818152505084816003815181106108cd576108cd61304b565b602090810291909101015285518a5160405163c941764760e01b81526000926001600160a01b03169163c94176479161090b919086906004016130e6565b6020604051808303816000875af115801561092a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061094e9190612fa6565b90508061099e576040516314e8955b60e21b815260206004820152600560248201527f70726f6f6600000000000000000000000000000000000000000000000000000060448201526064016104fe565b8a6020015163ffffffff16600560008282546109ba9190613038565b90915550506040808c015160088190556000908152600760205220805460ff191660011790556109e984611bcd565b5050505050505050505050565b600b54604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b419160048083019260009291908290030181865afa158015610a40573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a689190810190613157565b905090565b6000600454600554610a689190613038565b600a5460408051633044b79b60e21b815290516060926001600160a01b03169163c112de6c9160048083019260009291908290030181865afa158015610ac9573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a6891908101906131c5565b610af9611be7565b6000610b09836040015151611c11565b90506000610b1b8460e0015151611c11565b600a54604051632452cfdb60e21b81523060048201529192506001600160a01b03169063914b3f6c90602401602060405180830381865afa158015610b64573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b889190612fa6565b8015610b99575063ffffffff811615155b15610bc7576040516368975a4760e01b815263ffffffff8084166004830152821660248201526044016104fe565b60c084015115610c7c576040805180820182523081523360208201908152600a5492516371f320a760e11b815282516001600160a01b0390811660048301529151821660248201529192169063e3e6414e90604401602060405180830381865afa158015610c39573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5d9190612fa6565b610c7a5760405163324af8d960e11b815260040160405180910390fd5b505b600a546040516385e861eb60e01b815263ffffffff8085166004830152831660248201526000916001600160a01b0316906385e861eb906044016040805180830381865afa158015610cd2573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf69190612fe3565b90508060200151610d2a576040516368975a4760e01b815263ffffffff8085166004830152831660248201526044016104fe565b8263ffffffff1685606001515114610d85576040516314e8955b60e21b815260206004820152601060248201527f736967486173686573206c656e6774680000000000000000000000000000000060448201526064016104fe565b8163ffffffff168561010001515114610de1576040516314e8955b60e21b815260206004820152601460248201527f6f7574526f6c6c757046656573206c656e67746800000000000000000000000060448201526064016104fe565b8163ffffffff168561016001515114610e3d576040516314e8955b60e21b815260206004820152601860248201527f6f7574456e637279707465644e6f746573206c656e677468000000000000000060448201526064016104fe565b7f00000000000000000000000000000000000000000000000000000000000000008263ffffffff16600454600554610e759190613038565b610e7f9190613038565b1115610e9e57604051633b5ccb4360e21b815260040160405180910390fd5b600a5460405163df592f7d60e01b81523260048201526001600160a01b039091169063df592f7d90602401602060405180830381865afa158015610ee6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0a9190612fa6565b15610f2857604051632e70c0b160e01b815260040160405180910390fd5b600a5461012086015160405163df592f7d60e01b81526001600160a01b03918216600482015291169063df592f7d90602401602060405180830381865afa158015610f77573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9b9190612fa6565b15610fb957604051632e70c0b160e01b815260040160405180910390fd5b610fca600563ffffffff8516613256565b856101a001515114610fef57604051633acf48bb60e21b815260040160405180910390fd5b610ff98585611c46565b600061100684600261326d565b63ffffffff169050600061101b85600261326d565b611026906004613295565b63ffffffff169050600061103b85600261326d565b61104b9063ffffffff1683613038565b90506000600561105c886002613295565b63ffffffff1661106c9190613256565b611077836002613038565b6110819190613038565b67ffffffffffffffff811115611099576110996127f0565b6040519080825280602002602001820160405280156110c2578160200160208202803683370190505b506020808b015160009081526007909152604090205490915060ff16611114576040516314e8955b60e21b81526004016104fe906020808252600490820152631c9bdbdd60e21b604082015260600190565b88602001518160008151811061112c5761112c61304b565b60209081029190910101526000611144886001613295565b63ffffffff16905060005b8863ffffffff168110156112505760008b6040015182815181106111755761117561304b565b6020908102919091018101516000818152600290925260409091205490915060ff16156111ce576040517fff556e2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80846111db846001613038565b815181106111eb576111eb61304b565b6020026020010181815250508b60600151828151811061120d5761120d61304b565b60200260200101518484846112229190613038565b815181106112325761123261304b565b6020908102919091010152508061124881613061565b91505061114f565b5060808a015182611262876001613038565b815181106112725761127261304b565b602090810291909101015260a08a01518261128e876002613038565b8151811061129e5761129e61304b565b602090810291909101015260c08a0151826112ba876003613038565b815181106112ca576112ca61304b565b602090810291909101015260006112e763ffffffff891686613038565b905060006112f3611a03565b905060005b8963ffffffff1681101561146b57600160008e60e0015183815181106113205761132061304b565b60209081029190910181015182528101919091526040016000205460ff161561138c5760405163bee3611160e01b815260206004820152600a60248201527f636f6d6d69746d656e740000000000000000000000000000000000000000000060448201526064016104fe565b818d610100015182815181106113a4576113a461304b565b602002602001015110156113cb5760405163784f02bd60e11b815260040160405180910390fd5b8c60e0015181815181106113e1576113e161304b565b60200260200101518588836113f69190613038565b815181106114065761140661304b565b6020026020010181815250508c610100015181815181106114295761142961304b565b602002602001015185848361143e9190613038565b8151811061144e5761144e61304b565b60209081029190910101528061146381613061565b9150506112f8565b506114778c8587611e23565b87518c5160405163c941764760e01b81526001600160a01b039092169163c9417647916114a89188906004016130e6565b6020604051808303816000875af11580156114c7573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114eb9190612fa6565b611538576040516314e8955b60e21b815260206004820152600e60248201527f7472616e736163742070726f6f6600000000000000000000000000000000000060448201526064016104fe565b60005b8a63ffffffff1681101561160c576001600260008f6040015184815181106115655761156561304b565b6020026020010151815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600660008282546115a59190613038565b909155505060408d01518051829081106115c1576115c161304b565b60200260200101518d602001517f3c2372ab6130817bd6b8fc6dbaecae947e84201b49535d358debaa6c34c23ecf60405160405180910390a38061160481613061565b91505061153b565b5060005b8963ffffffff168110156116dc5760018060008f60e0015184815181106116395761163961304b565b6020026020010151815260200190815260200160002060006101000a81548160ff0219169083151502179055506116ca8d60e00151828151811061167f5761167f61304b565b60200260200101518e6101000151838151811061169e5761169e61304b565b60200260200101518f610160015184815181106116bd576116bd61304b565b60200260200101516120a1565b806116d481613061565b915050611610565b5060a08c0151156116fa576116fa8c61012001518d60a00151612140565b60c08c015115611717576117178c61014001518d60c00151612140565b6117208c612157565b505050505050505050506117346001600055565b5050565b600a546040516341fb697960e01b81523360048201526000916001600160a01b0316906341fb697990602401602060405180830381865afa158015611781573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a591906132b9565b90506001600160a01b03811630146117d057604051635335a04560e01b815260040160405180910390fd5b60006117da611a03565b905080846060015110156118015760405163784f02bd60e11b815260040160405180910390fd5b7f00000000000000000000000000000000000000000000000000000000000000006004546005546118329190613038565b1061185057604051633b5ccb4360e21b815260040160405180910390fd5b60208085015160009081526001909152604090205460ff16156118865760405163e38cd14d60e01b815260040160405180910390fd5b60208085018051600090815260019283905260409020805460ff191690921790915551606085015160808601516118be9291906120a1565b6040840151156118d6576118d6838560400151612140565b50505050565b6060600060045467ffffffffffffffff8111156118fb576118fb6127f0565b604051908082528060200260200182016040528015611924578160200160208202803683370190505b50905060005b600454811015611989576000816005546119449190613038565b60008181526003602052604090205484519192509084908490811061196b5761196b61304b565b6020908102919091010152508061198181613061565b91505061192a565b50919050565b600a5460405163dbda082960e01b8152600481018390526000916001600160a01b03169063dbda082990602401602060405180830381865afa1580156119d9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119fd91906132d6565b92915050565b600a5460405163c3c4bd0b60e01b815230600482015260009182916001600160a01b039091169063c3c4bd0b90602401602060405180830381865afa158015611a50573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7491906132d6565b90508015611a825780611a86565b6009545b91505090565b600b546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015611ad6573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6891906132ef565b600b54604080516306fdde0360e01b815290516060926001600160a01b0316916306fdde039160048083019260009291908290030181865afa158015610a40573d6000803e3d6000fd5b60006101008263ffffffff1610611b6a5760088263ffffffff16901c9150600883901c92505b60108263ffffffff1610611b8d5760048263ffffffff16901c9150600483901c92505b60048263ffffffff1610611bb05760028263ffffffff16901c9150600283901c92505b60028263ffffffff1610611bc657600183901c92505b5090919050565b600b54611be4906001600160a01b031633836123eb565b50565b600260005403611c0a57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b600063ffffffff821115611c42576040516306dfcc6560e41b815260206004820152602481018390526044016104fe565b5090565b6101608201515160038110611c6e57604051633fb1945d60e11b815260040160405180910390fd5b606081600003611cc5576101208401516101408501516040516bffffffffffffffffffffffff19606093841b811660208301529190921b1660348201526048015b6040516020818303038152906040529050611d7c565b81600103611d0b57836101200151846101400151856101600151600081518110611cf157611cf161304b565b6020026020010151604051602001611caf93929190613312565b836101200151846101400151856101600151600081518110611d2f57611d2f61304b565b6020026020010151866101600151600181518110611d4f57611d4f61304b565b6020026020010151604051602001611d6a9493929190613358565b60405160208183030381529060405290505b805160208201207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c9020611dbd8185612457565b6001600160a01b031660001b856080015114611e1c576040516314e8955b60e21b815260206004820152600960248201527f7369676e6174757265000000000000000000000000000000000000000000000060448201526064016104fe565b5050505050565b6101808301516040805180820182526000808252602091820152815180830190925260ff83901c8083526001600160ff1b03909316908201528351909190849084908110611e7357611e7361304b565b602002602001018181525050806020015183836001611e929190613038565b81518110611ea257611ea261304b565b6020908102919091010152600a5460408051633044b79b60e21b815290516005926000926001600160a01b039091169163c112de6c9160048082019286929091908290030181865afa158015611efc573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f2491908101906131c5565b90506000611f33856002613038565b90506000611f418483613038565b90506000611f50856002613256565b611f5a9084613038565b905060005b8581101561202a576000611fbe868381518110611f7e57611f7e61304b565b60200260200101516040805180820182526000808252602091820152815180830190925260ff83901c82526001600160ff1b039092169181019190915290565b80519091508a611fce8488613038565b81518110611fde57611fde61304b565b60200260200101818152505080602001518a8386611ffc9190613038565b8151811061200c5761200c61304b565b6020908102919091010152508061202281613061565b915050611f5f565b5060005b896101a001515181101561209557896101a0015181815181106120535761205361304b565b60200260200101518982846120689190613038565b815181106120785761207861304b565b60209081029190910101528061208d81613061565b91505061202e565b50505050505050505050565b60006005546004546120b39190613038565b6040805180820182528681526020808201878152600085815260039092529281209151825591516001918201556004805493945090929091906120f7908490613038565b92505081905550837ff533f9705aac5020e21695ea3553ac7b6881070d2b6900ab2b1e3050304b5bf9848385604051612132939291906133b4565b60405180910390a250505050565b600b54611734906001600160a01b031683836123eb565b600a5460408051633044b79b60e21b815290516005926000926001600160a01b039091169163c112de6c9160048082019286929091908290030181865afa1580156121a6573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121ce91908101906131c5565b90506000828460400151516121e39190613256565b905060008167ffffffffffffffff811115612200576122006127f0565b60405190808252806020026020018201604052801561225f57816020015b61224c6040518060600160405280600067ffffffffffffffff16815260200160008152602001600081525090565b81526020019060019003908161221e5790505b5090506000805b8660400151518163ffffffff1610156123ab5760005b868163ffffffff161015612398578063ffffffff1660208363ffffffff1667ffffffffffffffff16901b178484815181106122b9576122b961304b565b602090810291909101015167ffffffffffffffff90911690528551869063ffffffff83169081106122ec576122ec61304b565b60200260200101518484815181106123065761230661304b565b60200260200101516020018181525050876101a001518163ffffffff16888463ffffffff166123359190613256565b61233f9190613038565b8151811061234f5761234f61304b565b60200260200101518484815181106123695761236961304b565b6020908102919091010151604001528261238281613061565b9350508080612390906133d3565b91505061227c565b50806123a3816133d3565b915050612266565b507f6af07ebcb33931abd348e785f70c6d259390cf799191f8c99124245b96e1a613826040516123db91906133f6565b60405180910390a1505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052612452908490612481565b505050565b60008060008061246786866124e4565b9250925092506124778282612531565b5090949350505050565b60006124966001600160a01b038416836125ea565b905080516000141580156124bb5750808060200190518101906124b99190612fa6565b155b1561245257604051635274afe760e01b81526001600160a01b03841660048201526024016104fe565b6000806000835160410361251e5760208401516040850151606086015160001a612510888285856125ff565b95509550955050505061252a565b50508151600091506002905b9250925092565b600082600381111561254557612545612ad6565b0361254e575050565b600182600381111561256257612562612ad6565b036125805760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561259457612594612ad6565b036125b55760405163fce698f760e01b8152600481018290526024016104fe565b60038260038111156125c9576125c9612ad6565b03611734576040516335e2f38360e21b8152600481018290526024016104fe565b60606125f8838360006126ce565b9392505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561263a57506000915060039050826126c4565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa15801561268e573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166126ba575060009250600191508290506126c4565b9250600091508190505b9450945094915050565b6060814710156126f35760405163cd78605960e01b81523060048201526024016104fe565b600080856001600160a01b0316848660405161270f9190613459565b60006040518083038185875af1925050503d806000811461274c576040519150601f19603f3d011682016040523d82523d6000602084013e612751565b606091505b509150915061276186838361276b565b9695505050505050565b6060826127805761277b826127c7565b6125f8565b815115801561279757506001600160a01b0384163b155b156127c057604051639996b31560e01b81526001600160a01b03851660048201526024016104fe565b50806125f8565b8051156127d75780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff81118282101715612829576128296127f0565b60405290565b6040516101c0810167ffffffffffffffff81118282101715612829576128296127f0565b60405160a0810167ffffffffffffffff81118282101715612829576128296127f0565b604051601f8201601f1916810167ffffffffffffffff8111828210171561289f5761289f6127f0565b604052919050565b6000604082840312156128b957600080fd5b6128c1612806565b9050813581526020820135602082015292915050565b600082601f8301126128e857600080fd5b6128f0612806565b80604084018581111561290257600080fd5b845b8181101561291c578035845260209384019301612904565b509095945050505050565b600081830361010081121561293b57600080fd5b6040516060810181811067ffffffffffffffff8211171561295e5761295e6127f0565b60405291508161296e85856128a7565b81526080603f198301121561298257600080fd5b61298a612806565b915061299985604086016128d7565b82526129a885608086016128d7565b60208301528160208201526129c08560c086016128a7565b6040820152505092915050565b803563ffffffff811681146129e157600080fd5b919050565b600061016082840312156129f957600080fd5b6040516080810181811067ffffffffffffffff82111715612a1c57612a1c6127f0565b604052612a298484612927565b8152612a3861010084016129cd565b6020820152610120830135604082015261014090920135606083015250919050565b60005b83811015612a75578181015183820152602001612a5d565b50506000910152565b60008151808452612a96816020860160208601612a5a565b601f01601f19169290920160200192915050565b6020815260006125f86020830184612a7e565b600060208284031215612acf57600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6020810160028310612b0e57634e487b7160e01b600052602160045260246000fd5b91905290565b600081518084526020808501945080840160005b83811015612b4457815187529582019590820190600101612b28565b509495945050505050565b6020815260006125f86020830184612b14565b600067ffffffffffffffff821115612b7c57612b7c6127f0565b5060051b60200190565b600082601f830112612b9757600080fd5b81356020612bac612ba783612b62565b612876565b82815260059290921b84018101918181019086841115612bcb57600080fd5b8286015b84811015612be65780358352918301918301612bcf565b509695505050505050565b6001600160a01b0381168114611be457600080fd5b80356129e181612bf1565b600067ffffffffffffffff821115612c2b57612c2b6127f0565b50601f01601f191660200190565b600082601f830112612c4a57600080fd5b8135612c58612ba782612c11565b818152846020838601011115612c6d57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112612c9b57600080fd5b81356020612cab612ba783612b62565b82815260059290921b84018101918181019086841115612cca57600080fd5b8286015b84811015612be657803567ffffffffffffffff811115612cee5760008081fd5b612cfc8986838b0101612c39565b845250918301918301612cce565b60008060408385031215612d1d57600080fd5b823567ffffffffffffffff80821115612d3557600080fd5b908401906102a08287031215612d4a57600080fd5b612d5261282f565b612d5c8784612927565b81526101008084013560208301526101208085013584811115612d7e57600080fd5b612d8a8a828801612b86565b6040850152506101408086013585811115612da457600080fd5b612db08b828901612b86565b6060860152506101608087013560808601526101808088013560a08701526101a08089013560c08801526101c089013588811115612ded57600080fd5b612df98e828c01612b86565b60e0890152506101e089013588811115612e1257600080fd5b612e1e8e828c01612b86565b8789015250612e306102008a01612c06565b85880152612e416102208a01612c06565b84880152610240890135955087861115612e5a57600080fd5b612e668d878b01612c8a565b8388015261026089013582880152610280890135955087861115612e8957600080fd5b612e958d878b01612b86565b9087015250939750505050602086013592505080821115612eb557600080fd5b50612ec285828601612c39565b9150509250929050565b60008060408385031215612edf57600080fd5b823567ffffffffffffffff80821115612ef757600080fd5b9084019060a08287031215612f0b57600080fd5b612f13612853565b82358152602083013560208201526040830135604082015260608301356060820152608083013582811115612f4757600080fd5b612f5388828601612c39565b6080830152509350612f6a91505060208401612c06565b90509250929050565b60008060408385031215612f8657600080fd5b82359150612f6a602084016129cd565b805180151581146129e157600080fd5b600060208284031215612fb857600080fd5b6125f882612f96565b600082612fde57634e487b7160e01b600052601260045260246000fd5b500690565b600060408284031215612ff557600080fd5b612ffd612806565b825161300881612bf1565b815261301660208401612f96565b60208201529392505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156119fd576119fd613022565b634e487b7160e01b600052603260045260246000fd5b60006001820161307357613073613022565b5060010190565b818103818111156119fd576119fd613022565b815160009082906020808601845b838110156130b75781518552938201939082019060010161309b565b50929695505050505050565b8060005b60028110156118d65781518452602093840193909101906001016130c7565b600061012061310083865180518252602090810151910152565b60208501516131136040850182516130c3565b6020015161312460808501826130c3565b506040850151805160c08501526020015160e0840152610100830181905261314e81840185612b14565b95945050505050565b60006020828403121561316957600080fd5b815167ffffffffffffffff81111561318057600080fd5b8201601f8101841361319157600080fd5b805161319f612ba782612c11565b8181528560208385010111156131b457600080fd5b61314e826020830160208601612a5a565b600060208083850312156131d857600080fd5b825167ffffffffffffffff8111156131ef57600080fd5b8301601f8101851361320057600080fd5b805161320e612ba782612b62565b81815260059190911b8201830190838101908783111561322d57600080fd5b928401925b8284101561324b57835182529284019290840190613232565b979650505050505050565b80820281158282048414176119fd576119fd613022565b63ffffffff81811683821602808216919082811461328d5761328d613022565b505092915050565b63ffffffff8181168382160190808211156132b2576132b2613022565b5092915050565b6000602082840312156132cb57600080fd5b81516125f881612bf1565b6000602082840312156132e857600080fd5b5051919050565b60006020828403121561330157600080fd5b815160ff811681146125f857600080fd5b60006bffffffffffffffffffffffff19808660601b168352808560601b166014840152508251613349816028850160208701612a5a565b91909101602801949350505050565b60006bffffffffffffffffffffffff19808760601b168352808660601b16601484015250835161338f816028850160208801612a5a565b8351908301906133a6816028840160208801612a5a565b016028019695505050505050565b83815282602082015260606040820152600061314e6060830184612a7e565b600063ffffffff8083168181036133ec576133ec613022565b6001019392505050565b602080825282518282018190526000919060409081850190868401855b8281101561344c578151805167ffffffffffffffff16855286810151878601528501518585015260609093019290850190600101613413565b5091979650505050505050565b6000825161346b818460208701612a5a565b919091019291505056fea2646970667358221220cf34894a5703a6bee36bc692ee5f524fcba3e9f6d5b24684d81f48d11bbc7f8b64736f6c63430008140033';

type CommitmentPoolERC20ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CommitmentPoolERC20ConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CommitmentPoolERC20__factory extends ContractFactory {
  constructor(...args: CommitmentPoolERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'CommitmentPoolERC20';
  }

  deploy(
    _treeHeight: BigNumberish,
    _minRollupFee: BigNumberish,
    _token: string,
    _settingsCenter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<CommitmentPoolERC20> {
    return super.deploy(
      _treeHeight,
      _minRollupFee,
      _token,
      _settingsCenter,
      overrides || {},
    ) as Promise<CommitmentPoolERC20>;
  }
  getDeployTransaction(
    _treeHeight: BigNumberish,
    _minRollupFee: BigNumberish,
    _token: string,
    _settingsCenter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_treeHeight, _minRollupFee, _token, _settingsCenter, overrides || {});
  }
  attach(address: string): CommitmentPoolERC20 {
    return super.attach(address) as CommitmentPoolERC20;
  }
  connect(signer: Signer): CommitmentPoolERC20__factory {
    return super.connect(signer) as CommitmentPoolERC20__factory;
  }
  static readonly contractName: 'CommitmentPoolERC20';
  public readonly contractName: 'CommitmentPoolERC20';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommitmentPoolERC20Interface {
    return new utils.Interface(_abi) as CommitmentPoolERC20Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): CommitmentPoolERC20 {
    return new Contract(address, _abi, signerOrProvider) as CommitmentPoolERC20;
  }
}
