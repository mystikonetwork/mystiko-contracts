/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides, BigNumberish } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { CommitmentPoolERC20, CommitmentPoolERC20Interface } from '../CommitmentPoolERC20';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint8',
        name: '_treeHeight',
        type: 'uint8',
      },
      {
        internalType: 'uint256',
        name: '_minRollupFee',
        type: 'uint256',
      },
      {
        internalType: 'contract IERC20Metadata',
        name: '_token',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_settingsCenter',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'target',
        type: 'address',
      },
    ],
    name: 'AddressEmptyCode',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'AddressInsufficientBalance',
    type: 'error',
  },
  {
    inputs: [],
    name: 'AssociatedPoolNotMatched',
    type: 'error',
  },
  {
    inputs: [],
    name: 'AuditorNotesLengthError',
    type: 'error',
  },
  {
    inputs: [],
    name: 'CommitmentHasBeenSubmitted',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'param',
        type: 'string',
      },
    ],
    name: 'Duplicated',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ECDSAInvalidSignature',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'length',
        type: 'uint256',
      },
    ],
    name: 'ECDSAInvalidSignatureLength',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 's',
        type: 'bytes32',
      },
    ],
    name: 'ECDSAInvalidSignatureS',
    type: 'error',
  },
  {
    inputs: [],
    name: 'FailedInnerCall',
    type: 'error',
  },
  {
    inputs: [],
    name: 'IndexOutOfBound',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'param',
        type: 'string',
      },
    ],
    name: 'Invalid',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NewRootIsDuplicated',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NoteHasBeenSpent',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OutputNotesLessThanThree',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ReentrancyGuardReentrantCall',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RejectRelay',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RejectRollup',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RollupFeeToFew',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'rollupSize',
        type: 'uint256',
      },
    ],
    name: 'RollupVerifierDisabled',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint8',
        name: 'bits',
        type: 'uint8',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'SafeCastOverflowedUintDowncast',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'token',
        type: 'address',
      },
    ],
    name: 'SafeERC20FailedOperation',
    type: 'error',
  },
  {
    inputs: [],
    name: 'SanctionedAddress',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'inputNumber',
        type: 'uint32',
      },
      {
        internalType: 'uint32',
        name: 'outputNumber',
        type: 'uint32',
      },
    ],
    name: 'TransactVerifierDisabled',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TreeHeightLessThanZero',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TreeHeightOutOfBounds',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TreeIsFull',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'commitment',
        type: 'uint256',
      },
    ],
    name: 'CommitmentIncluded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'commitment',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'rollupFee',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'leafIndex',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'encryptedNote',
        type: 'bytes',
      },
    ],
    name: 'CommitmentQueued',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'rootHash',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'serialNumber',
        type: 'uint256',
      },
    ],
    name: 'CommitmentSpent',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint64',
        name: 'id',
        type: 'uint64',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'auditorPublicKey',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'encryptedAuditorNote',
        type: 'uint256',
      },
    ],
    name: 'EncryptedAuditorNote',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'uint64',
            name: 'id',
            type: 'uint64',
          },
          {
            internalType: 'uint256',
            name: 'publicKey',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'note',
            type: 'uint256',
          },
        ],
        indexed: false,
        internalType: 'struct CommitmentPool.AuditorNote[]',
        name: 'notes',
        type: 'tuple[]',
      },
    ],
    name: 'EncryptedAuditorNotes',
    type: 'event',
  },
  {
    inputs: [],
    name: 'AUDITOR_COUNT',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_fullPath',
        type: 'uint256',
      },
      {
        internalType: 'uint32',
        name: '_rollupSize',
        type: 'uint32',
      },
    ],
    name: '_pathIndices',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetAddress',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetDecimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetName',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetSymbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetType',
    outputs: [
      {
        internalType: 'enum AssetPool.AssetType',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'defaultMinRollupFee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'commitment',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'executorFee',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'rollupFee',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'encryptedNote',
            type: 'bytes',
          },
        ],
        internalType: 'struct ICommitmentPool.CommitmentRequest',
        name: '_request',
        type: 'tuple',
      },
      {
        internalType: 'address',
        name: '_executor',
        type: 'address',
      },
    ],
    name: 'enqueue',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAllAuditorPublicKeys',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_index',
        type: 'uint256',
      },
    ],
    name: 'getAuditorPublicKey',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCommitmentCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCommitmentIncludedCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCommitmentQueuedCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getMinRollupFee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getNullifierCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getQueuedCommitments',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getTreeCapacity',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_commitment',
        type: 'uint256',
      },
    ],
    name: 'isHistoricCommitment',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'root',
        type: 'uint256',
      },
    ],
    name: 'isKnownRoot',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_serialNumber',
        type: 'uint256',
      },
    ],
    name: 'isSpentSerialNumber',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'a',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256[2]',
                    name: 'X',
                    type: 'uint256[2]',
                  },
                  {
                    internalType: 'uint256[2]',
                    name: 'Y',
                    type: 'uint256[2]',
                  },
                ],
                internalType: 'struct IVerifier.G2Point',
                name: 'b',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'c',
                type: 'tuple',
              },
            ],
            internalType: 'struct IVerifier.Proof',
            name: 'proof',
            type: 'tuple',
          },
          {
            internalType: 'uint32',
            name: 'rollupSize',
            type: 'uint32',
          },
          {
            internalType: 'uint256',
            name: 'newRoot',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'leafHash',
            type: 'uint256',
          },
        ],
        internalType: 'struct ICommitmentPool.RollupRequest',
        name: '_request',
        type: 'tuple',
      },
    ],
    name: 'rollup',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'settings',
    outputs: [
      {
        internalType: 'contract MystikoSettings',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'a',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256[2]',
                    name: 'X',
                    type: 'uint256[2]',
                  },
                  {
                    internalType: 'uint256[2]',
                    name: 'Y',
                    type: 'uint256[2]',
                  },
                ],
                internalType: 'struct IVerifier.G2Point',
                name: 'b',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'c',
                type: 'tuple',
              },
            ],
            internalType: 'struct IVerifier.Proof',
            name: 'proof',
            type: 'tuple',
          },
          {
            internalType: 'uint256',
            name: 'rootHash',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'serialNumbers',
            type: 'uint256[]',
          },
          {
            internalType: 'uint256[]',
            name: 'sigHashes',
            type: 'uint256[]',
          },
          {
            internalType: 'bytes32',
            name: 'sigPk',
            type: 'bytes32',
          },
          {
            internalType: 'uint256',
            name: 'publicAmount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'relayerFeeAmount',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'outCommitments',
            type: 'uint256[]',
          },
          {
            internalType: 'uint256[]',
            name: 'outRollupFees',
            type: 'uint256[]',
          },
          {
            internalType: 'address',
            name: 'publicRecipient',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'relayerAddress',
            type: 'address',
          },
          {
            internalType: 'bytes[]',
            name: 'outEncryptedNotes',
            type: 'bytes[]',
          },
          {
            internalType: 'uint256',
            name: 'randomAuditingPublicKey',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'encryptedAuditorNotes',
            type: 'uint256[]',
          },
        ],
        internalType: 'struct ICommitmentPool.TransactRequest',
        name: '_request',
        type: 'tuple',
      },
      {
        internalType: 'bytes',
        name: '_signature',
        type: 'bytes',
      },
    ],
    name: 'transact',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x60c03461014c57601f61334f38819003918201601f19168301916001600160401b038311848410176101515780849260809460405283398101031261014c57805160ff811680820361014c5760208301516040840151939091906001600160a01b038516850361014c57606001516001600160a01b038116939084900361014c576001600055600060045560006005556000600655811561013b5760016100a9921b608052610167565b8060085560005260076020526040600020600160ff1982541617905560095560018060a01b0319600a541617600a5560a052604051612c0d908161074282396080518181816105aa01528181610a6e0152611b07015260a0518181816101ce0152818161027801528181610625015281816111540152818161119c01528181611b9701528181611be1015261202f0152f35b632c4f29b160e21b60005260046000fd5b600080fd5b634e487b7160e01b600052604160045260246000fd5b60ff168061019457507f09f658457775074ff4c842032a5ec2f1134c32784cca59d594caac8c503b792390565b600181036101c157507f1a77569b79cb7c2eaf9368de9e3b1efc0a606561e5ab299c2337340f3cdd576a90565b600281036101ee57507f111bd0002b1e3b8f1978c932b5ccb2fab87fdb0acab2ddb266f9a346dcb11ee190565b6003810361021b57507f040868ea2a363e05d7ae44280f69b49e429ab096ca2844efe91f8d6b3dad57dd90565b6004810361024757507ef8f605c92c8502c8fe83be1b83b24e3f67312a388f30cbadb5dee8974137c390565b6005810361027457507f1adc043c99adbc0c86a60a36db0f661e2dd96f36ede322f954386d8935a0c5d990565b600681036102a157507f2a1fedfa71da723ac3e9b35cef752fa1b647b2b737a23e91241cb7bdc419e3f490565b600781036102ce57507f17fe1974543c4c4b228e1292f7e3200d31435fc910ee5a8c5cafd329cc4b256b90565b600881036102fb57507f0e84a586eb63a0eec0f1fe5785022441f0e29e4ae859c7ce1f5fc88a42ad2e6b90565b6009810361032857507f193deb901f6eeb032e02e093280db17e373d4ff52bafda9215b46bb9b0a86f3e90565b600a810361035557507f1d10ca7b985697cb519565a5006c3f44b020b2edab9b7422ed15dc34532f940690565b600b810361038257507f1dc200763555467a4e583e00badfdc1fb4d3d3f8f1cc81f31fd2f8b38777608190565b600c81036103af57507f203dd11fdba0ed13b20ca2d6952f3feb7461836a03512e0cccce8467b320b2f690565b600d81036103dc57507f0591af64e64a3e69caf23eee2bdea90885343a49f547ee9464e95d8d6267e4f790565b600e810361040957507f2af572f1077a32f46dc8e307d43c0fa6753b400b2107325976b8df7380545ff690565b600f810361043657507f043227ae4b70b1aacd04e35e6aaed7b56d91220c31e97aaf52e12a6a56984e5290565b6010810361046357507f2976f1f6a91d83d4c528dad69ece6d3d91934b0e5657e915b360c8c4c2fb54e690565b6011810361048f57507ee5c251c9e093658be0cd1b0df55b6f70f3d09146c1c8b4212a4ddcde700dbc90565b601281036104bc57507f0267cbbc1bc2f1c3e3073d2ee60df8cc0bfef39fe3cee735c9ad5c8ad30064d290565b601381036104e957507f2f356057bc56f67dbf159a0e8935022acd5e982dce9f4071adc43e4d57ce27e690565b6014810361051657507f273db68f52f12a9d8022ae524050064e42d4d1661c9bcce958acf89b5e8b127b90565b6015810361054357507f0496a18ad4cca81b7c98ceb197439ad925e0f7f62d69dfa42cf9574be77fe30f90565b6016810361057057507f24f89a3f943d421b2f3a554b65459f42b820ac09d6fd9d693df5f8ba732ab59690565b6017810361059d57507f1b55bfd751c6807df36876cdce68034ab43210be2bc8afa8043c7f428604e7a790565b601881036105ca57507f16d6595a398cf20f2489b90e958166f1e19c537c0c46e9b8ea5462391ee8f14390565b601981036105f757507f0f01447ef8f621592474b678ed2fc404ebaf22a6fce15364bb4152a88c11361390565b601a810361062457507f026c2dffee48bacbc9d21cf90aa7c6e525ab01db6966a9e7e53b3d3f4d1f5a4d90565b601b810361065157507f234fe90732795745b2c504c791242a2bb193baa1cbeab57db9324b6bb913481790565b601c810361067e57507f23a8e0a7e60981c52ebb498c260d5bef4d7c65145d17128996a77c33a3262a7e90565b601d81036106ab57507f24ee69d2565210c7027ff6fc2657ed029278bc79f41077fe3281ea5d5d8e80f990565b601e81036106d857507f1de402fa32463bb2917b733aeef0197a49cacacd1fe860c3acc8cd3b65a30a6890565b601f810361070557507f1d3015a0f6a7b3f754171d0540628107e50e25debceb16e0e33ae4205501896d90565b602003610730577f264a260539342647256819046bae05bed903a8d19b3c90439d67317d5d88132290565b639780f42960e01b60005260046000fdfe608080604052600436101561001357600080fd5b60003560e01c90816314a7737d14611c3157508063176de7a814611bbb5780631ba46cfd14611b775780633bb8d1b414611b465780633fe3347a14611b2a578063484eb65214611aef578063555d75f014611ad15780635688881f14611aaf5780635706001614611a7e57806363bc7d3214611a0857806372082971146106ca57806378d60cd71461049a5780637a5537441461047c578063866ac6581461040e57806387780df914610386578063a592bd691461036a578063a6232a9314610339578063b08892d01461031e578063b2316c3314610300578063c2d4160114610252578063c9230c5d146101a8578063e06174e414610181578063e500f504146101635763f2da1d411461012757600080fd5b3461015e57604036600319011261015e5760243563ffffffff8116810361015e576101566020916004356127b1565b604051908152f35b600080fd5b3461015e57600036600319011261015e576020600554604051908152f35b3461015e57600036600319011261015e5760206001600160a01b03600a5416604051908152f35b3461015e57600036600319011261015e576040516306fdde0360e01b81526000816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa80156102465761021f91600091610223575b5060405191829160208352602083019061239d565b0390f35b61024091503d806000833e61023881836122eb565b810190612643565b8261020a565b6040513d6000823e3d90fd5b3461015e57600036600319011261015e5760405163313ce56760e01b81526020816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa908115610246576000916102bf575b60208260ff60405191168152f35b6020813d6020116102f8575b816102d8602093836122eb565b810103126102f4575160ff811681036102f457905060206102b1565b5080fd5b3d91506102cb565b3461015e57600036600319011261015e576020600954604051908152f35b3461015e57600036600319011261015e576020610156612737565b3461015e57602036600319011261015e576004356000526007602052602060ff604060002054166040519015158152f35b3461015e57600036600319011261015e57602060405160058152f35b3461015e57602036600319011261015e57602460206001600160a01b03600a54166040519283809263dbda082960e01b825260043560048301525afa8015610246576000906103db575b602090604051908152f35b506020813d602011610406575b816103f5602093836122eb565b8101031261015e57602090516103d0565b3d91506103e8565b3461015e57600036600319011261015e5760045461042b81612539565b906000600554905b828110610450576040516020808252819061021f908201876123c2565b8061045d6001928461256b565b600052600360205260406000205461047582876125ab565b5201610433565b3461015e57600036600319011261015e576020600654604051908152f35b3461015e57604036600319011261015e5760043567ffffffffffffffff811161015e5760a0600319823603011261015e57604051906104d882612297565b806004013582526020820160248201358152604083019160448101358352606084019060648101358252608481013567ffffffffffffffff811161015e576080916004610528923692010161249b565b9401938452602435936001600160a01b038516850361015e57602460206001600160a01b03600a5416604051928380926341fb697960e01b82523360048301525afa90811561024657600091610690575b506001600160a01b033091160361067f57610592612737565b82511061066e576105a86005546004549061256b565b7f0000000000000000000000000000000000000000000000000000000000000000111561065d578251600052600160205260ff6040600020541661064c578261060f935160005260016020526040600020600160ff19825416179055519151905191612850565b518061061757005b61064a916001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016612901565b005b63e38cd14d60e01b60005260046000fd5b633b5ccb4360e21b60005260046000fd5b63784f02bd60e11b60005260046000fd5b635335a04560e01b60005260046000fd5b90506020813d6020116106c2575b816106ab602093836122eb565b8101031261015e576106bc906124ef565b86610579565b3d915061069e565b3461015e57604036600319011261015e5760043567ffffffffffffffff811161015e57803603906003198201916102a0831261015e57604051926101c084019084821067ffffffffffffffff8311176119f257610100916040521261015e57608060405191610738836122cf565b610745368560040161230d565b8352604319011261015e5760405161075c816122b3565b6107693660448501612335565b81526107783660848501612335565b6020820152602082015261078f3660c4840161230d565b60408201528252610104810135602083015261012481013567ffffffffffffffff811161015e576107c6906004369184010161240e565b604083015261014481013567ffffffffffffffff811161015e576107f0906004369184010161240e565b6060830152610164810135608083015261018481013560a08301526101a481013560c08301526101c481013567ffffffffffffffff811161015e5761083b906004369184010161240e565b60e08301526101e481013567ffffffffffffffff811161015e57610865906004369184010161240e565b610100830152610878610204820161246b565b61012083015261088b610224820161246b565b61014083015261024481013567ffffffffffffffff811161015e5781013660238201121561015e5760048101356108c1816123f6565b916108cf60405193846122eb565b818352602060048185019360051b830101019036821161015e5760248101925b8284106119c057505050506101608301526102648101356101808301526102848101359067ffffffffffffffff821161015e576004610931923692010161240e565b6101a082015260243567ffffffffffffffff811161015e5761095790369060040161249b565b6002600054146119af576002600055610974604083015151612823565b9061098360e084015151612823565b906001600160a01b03600a5416604051631dcdf73160e31b8152306004820152602081602481855afa90811561024657600091611975575b5080611966575b6119455760c08501516118a2575b604080516385e861eb60e01b815263ffffffff868116600483015285166024820152929083604481855afa92831561024657600093611871575b506020830151156118505763ffffffff85166060870151510361180a5763ffffffff841661010087015151036117c45763ffffffff8416610160870151510361177e57610a6c600554610a6763ffffffff8716916004549061256b565b61256b565b7f00000000000000000000000000000000000000000000000000000000000000001061065d5760405163df592f7d60e01b8152326004820152602081602481865afa90811561024657600091611744575b506116f9576001600160a01b03610120870151166040519063df592f7d60e01b82526004820152602081602481865afa9081156102465760009161170a575b506116f9576101a086015151600563ffffffff8716029063ffffffff8716820460051463ffffffff88161517156113e557036116e8576101608601515160038110156116d757606090806115b3575050610120860151610140870151604051916bffffffffffffffffffffffff199060601b1660208301526bffffffffffffffffffffffff199060601b16603482015260288152610b9b6048826122eb565b602081519101207f19457468657265756d205369676e6564204d6573736167653a0a333200000000600052601c526001600160a01b03610bf1610be8603c6000209360808a015194612a2c565b90929192612a68565b160361156d5763ffffffff610c058561271c565b1694600463ffffffff610c178761271c565b16019363ffffffff85116113e557610c4363ffffffff610c368361271c565b1663ffffffff871661256b565b946002860186116113e55763ffffffff871660020163ffffffff81116113e55763ffffffff166005810290808204600514901517156113e557610c8c610c91916002890161256b565b612539565b976020840151600052600760205260ff6040600020541615611541576020840151610cbb8a612578565b52600163ffffffff89160163ffffffff81116113e55760005b63ffffffff8a1681106114c75750506080840151600182018083116113e557610cfd908b6125ab565b5260a0840151600282018083116113e557610d18908b6125ab565b5260c0840151906003810181116113e5576003610d3691018a6125ab565b52610d4d63ffffffff831663ffffffff831661256b565b610d55612737565b9160005b63ffffffff851681106113fb57505050506020610d7a6101808401516129e5565b8051610d86888b6125ab565b5201516001860186116113e557600493600091610da6600189018b6125ab565b52604051633044b79b60e21b815294859182905afa928315610246576000936113c8575b506000926007860160028701116113b457600c8601958660028201116113a057845b6005811061135557505050825b6101a08301518051821015610e305790610e15816001936125ab565b51610e29610e23838a61256b565b8b6125ab565b5201610df9565b505085610e636020896001600160a01b0388511686518860405180968195829463c941764760e01b8452600484016125e7565b03925af190811561134a57859161130c575b50156112c657835b63ffffffff82168110611232575050825b63ffffffff821681106111c7576004838560a08201518061117f575b5060c082015180611137575b50806001600160a01b03600a541660405194858092633044b79b60e21b82525afa92831561112a578193611106575b506040820151516005810290808204600514901517156110f257610f0b819493946123f6565b90610f1960405192836122eb565b808252610f28601f19916123f6565b01825b8181106110c357505081825b60408601515163ffffffff82169081101561103757849667ffffffff000000008360201b1696600583029280840460051490151715945b63ffffffff8a16600581101561101d578690610f8a838a6125ab565b51818c179052610f9a81856125ab565b516020610fa7858c6125ab565b5101526101a0850151916110095790610fc3610fc9928761256b565b906125ab565b516040610fd6838a6125ab565b5101526000198114610ff5576001610fef9101996128ea565b98610f6e565b634e487b7160e01b88526011600452602488fd5b634e487b7160e01b8a52601160045260248afd5b509850935095505061102e906128ea565b94909394610f37565b5050506040519060208201602083528151809152602060408401920190845b81811061108b57857f6af07ebcb33931abd348e785f70c6d259390cf799191f8c99124245b96e1a61386860387a16001815580f35b909192602060606001926040875167ffffffffffffffff81511683528481015185840152015160408201520194019101919091611056565b6020906040969596516110d5816122cf565b858152858382015285604082015282828601015201949394610f2b565b634e487b7160e01b82526011600452602482fd5b6111239193503d8085833e61111b81836122eb565b8101906126a2565b9183610ee5565b50604051903d90823e3d90fd5b611179906001600160a01b03610140850151166001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016612901565b83610eb6565b6111c1906001600160a01b03610120850151166001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016612901565b83610eaa565b6001816111dd63ffffffff9360e08701516125ab565b51865281602052604086208260ff1982541617905561122a6112038260e08801516125ab565b51611213836101008901516125ab565b51611223846101608a01516125ab565b5191612850565b019050610e8e565b6112408160408601516125ab565b518552600260205260408520600160ff19825416179055600654600181018091116112b25763ffffffff9160019160065560208601516112848260408901516125ab565b51907f3c2372ab6130817bd6b8fc6dbaecae947e84201b49535d358debaa6c34c23ecf8980a3019050610e7d565b634e487b7160e01b86526011600452602486fd5b6040516314e8955b60e21b815260206004820152600e60248201527f7472616e736163742070726f6f660000000000000000000000000000000000006044820152606490fd5b90506020813d602011611342575b81611327602093836122eb565b8101031261133e57611338906124e2565b85610e75565b8480fd5b3d915061131a565b6040513d87823e3d90fd5b80602061136d611367600194876125ab565b516129e5565b80516113808e610fc38660028a0161256b565b520151611399611393836007870161256b565b8d6125ab565b5201610dec565b634e487b7160e01b85526011600452602485fd5b634e487b7160e01b84526011600452602484fd5b6113de9193503d806000833e61111b81836122eb565b9187610dca565b634e487b7160e01b600052601160045260246000fd5b6114098160e08801516125ab565b51600052600160205260ff60406000205416611481578361142f826101008901516125ab565b511061066e578061144660019260e08901516125ab565b5161145b8d610fc363ffffffff87168561256b565b5261146b816101008901516125ab565b5161147a8d610fc3878561256b565b5201610d59565b60405163bee3611160e01b815260206004820152600a60248201527f636f6d6d69746d656e74000000000000000000000000000000000000000000006044820152606490fd5b6114d58160408801516125ab565b519081600052600260205260ff604060002054166115305760018101918282116113e5576115056001938e6125ab565b526115148160608901516125ab565b516115298d610fc363ffffffff87168561256b565b5201610cd4565b6307faab7160e51b60005260046000fd5b60646040516314e8955b60e21b81526020600482015260046024820152631c9bdbdd60e21b6044820152fd5b6040516314e8955b60e21b815260206004820152600960248201527f7369676e617475726500000000000000000000000000000000000000000000006044820152606490fd5b60010361163b57506101208601516116366048610140890151926115db6101608b0151612578565b516040519485926bffffffffffffffffffffffff199060601b1660208401526bffffffffffffffffffffffff199060601b166034830152611625815180926020868601910161237a565b81010301601f1981018352826122eb565b610b9b565b61163661012088015160486101408a01519361165b6101608c0151612578565b5161166a6101608d015161259b565b51916040519687956bffffffffffffffffffffffff1990831b1660208701526bffffffffffffffffffffffff19911b1660348501526116b2815180926020868801910161237a565b83016116c7825180936020868501910161237a565b010103601f1981018352826122eb565b633fb1945d60e11b60005260046000fd5b633acf48bb60e21b60005260046000fd5b632e70c0b160e01b60005260046000fd5b90506020813d60201161173c575b81611725602093836122eb565b8101031261015e57611736906124e2565b87610afc565b3d9150611718565b90506020813d602011611776575b8161175f602093836122eb565b8101031261015e57611770906124e2565b87610abd565b3d9150611752565b6040516314e8955b60e21b815260206004820152601860248201527f6f7574456e637279707465644e6f746573206c656e67746800000000000000006044820152606490fd5b6040516314e8955b60e21b815260206004820152601460248201527f6f7574526f6c6c757046656573206c656e6774680000000000000000000000006044820152606490fd5b6040516314e8955b60e21b815260206004820152601060248201527f736967486173686573206c656e677468000000000000000000000000000000006044820152606490fd5b63ffffffff8481876368975a4760e01b600052166004521660245260446000fd5b61189491935060403d60401161189b575b61188c81836122eb565b810190612503565b9186610a0a565b503d611882565b6040516118ae816122b3565b3081526001600160a01b03602082013381528160405193635ee36ce960e01b85525116600484015251166024820152602081604481855afa9081156102465760009161190b575b506109d05763324af8d960e11b60005260046000fd5b90506020813d60201161193d575b81611926602093836122eb565b8101031261015e57611937906124e2565b866118f5565b3d9150611919565b63ffffffff8381866368975a4760e01b600052166004521660245260446000fd5b5063ffffffff831615156109c2565b90506020813d6020116119a7575b81611990602093836122eb565b8101031261015e576119a1906124e2565b866109bb565b3d9150611983565b633ee5aeb560e01b60005260046000fd5b833567ffffffffffffffff811161015e576020916119e7839283600436928801010161249b565b8152019301926108ef565b634e487b7160e01b600052604160045260246000fd5b3461015e57600036600319011261015e57600460006001600160a01b03600a541660405192838092633044b79b60e21b82525afa80156102465761021f91600091611a63575b506040519182916020835260208301906123c2565b611a7891503d806000833e61111b81836122eb565b82611a4e565b3461015e57602036600319011261015e576004356000526001602052602060ff604060002054166040519015158152f35b3461015e57600036600319011261015e5760206101566005546004549061256b565b3461015e57600036600319011261015e576020600454604051908152f35b3461015e57600036600319011261015e5760206040517f00000000000000000000000000000000000000000000000000000000000000008152f35b3461015e57600036600319011261015e57602060405160008152f35b3461015e57602036600319011261015e576004356000526002602052602060ff604060002054166040519015158152f35b3461015e57600036600319011261015e5760206040516001600160a01b037f0000000000000000000000000000000000000000000000000000000000000000168152f35b3461015e57600036600319011261015e576040516395d89b4160e01b81526000816004817f00000000000000000000000000000000000000000000000000000000000000006001600160a01b03165afa80156102465761021f91600091610223575060405191829160208352602083019061239d565b3461015e57366003190190610160821261015e576000916080820182811067ffffffffffffffff82111761228357604052610100136102f457604051611c76816122cf565b611c8136600461230d565b8152608036604319011261227f57604051611c9b816122b3565b611ca6366044612335565b8152611cb3366084612335565b60208201526020820152611cc83660c461230d565b60408201528152610104359063ffffffff821680830361227b57602082019283526040820161012435815260608301936101443585526004549160055492604051611d1281612297565b3081526020810195338752604082019081526060820183815260808301918783526001600160a01b0380600a541699816040519662039b1360e11b8852511660048701525116602485015251604484015251606483015251608482015260208160a481895afa908115612270578991612232575b501561220a5781518852600760205260ff6040892054166121fb5763ffffffff835116116121a15763ffffffff82511680156121e75783066121a157604063ffffffff83511660248251809781936305afd53360e31b835260048301525afa938415612196578794612175575b5060208401511561215b5763ffffffff82511695611e1a611e1488866127b1565b97612539565b958895895b63ffffffff865116811015611ed557611e38818861256b565b97888c52600360205260408c209060405191611e53836122b3565b60018154918285520154906020840191825215611ec6578291611e88918d611e80876001989751926125ab565b52519061256b565b998d5260036020528c83604082208281550155517ffe6b097b46a78e08506a3143b6337c2505ba77df76fe05c3663a987395d634138d80a201611e1f565b63d3482f7b60e01b8e5260048efd5b508996949550888863ffffffff8851166004549081039081116110095760045560405160208101918260208251919201908c5b8181106121455750505090611f48817f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001949303601f1981018352826122eb565b51902006809451036120ff5760405193611f6360a0866122eb565b600485526080366020870137600854611f7b86612578565b528551611f878661259b565b528451600210156120eb5760608501528351600310156120d757916001600160a01b0384926020946080611fd8970152511690518860405180968195829463c941764760e01b8452600484016125e7565b03925af190811561134a57859161209d575b50156120575761200663ffffffff61205494511660055461256b565b60055551806008558352600760205260408320600160ff19825416179055336001600160a01b037f000000000000000000000000000000000000000000000000000000000000000016612901565b80f35b6040516314e8955b60e21b815260206004820152600560248201527f70726f6f660000000000000000000000000000000000000000000000000000006044820152606490fd5b90506020813d6020116120cf575b816120b8602093836122eb565b8101031261133e576120c9906124e2565b85611fea565b3d91506120ab565b634e487b7160e01b88526032600452602488fd5b634e487b7160e01b89526032600452602489fd5b6040516314e8955b60e21b815260206004820152600860248201527f6c656166486173680000000000000000000000000000000000000000000000006044820152606490fd5b8251845260209384019390920191600101611f08565b815163f5735a5f60e01b885263ffffffff16600452602487fd5b61218f91945060403d60401161189b5761188c81836122eb565b9287611df3565b6040513d89823e3d90fd5b6040516314e8955b60e21b815260206004820152600a60248201527f726f6c6c757053697a65000000000000000000000000000000000000000000006044820152606490fd5b634e487b7160e01b88526012600452602488fd5b63e2e1210360e01b8852600488fd5b7fff4e3423000000000000000000000000000000000000000000000000000000008852600488fd5b90506020813d602011612268575b8161224d602093836122eb565b810103126122645761225e906124e2565b89611d86565b8880fd5b3d9150612240565b6040513d8b823e3d90fd5b8380fd5b8280fd5b634e487b7160e01b84526041600452602484fd5b60a0810190811067ffffffffffffffff8211176119f257604052565b6040810190811067ffffffffffffffff8211176119f257604052565b6060810190811067ffffffffffffffff8211176119f257604052565b90601f8019910116810190811067ffffffffffffffff8211176119f257604052565b919082604091031261015e57604051612325816122b3565b6020808294803584520135910152565b9080601f8301121561015e576040519161234e836122b3565b82906040810192831161015e57905b82821061236a5750505090565b813581526020918201910161235d565b60005b83811061238d5750506000910152565b818101518382015260200161237d565b906020916123b68151809281855285808601910161237a565b601f01601f1916010190565b906020808351928381520192019060005b8181106123e05750505090565b82518452602093840193909201916001016123d3565b67ffffffffffffffff81116119f25760051b60200190565b9080601f8301121561015e578135612425816123f6565b9261243360405194856122eb565b81845260208085019260051b82010192831161015e57602001905b82821061245b5750505090565b813581526020918201910161244e565b35906001600160a01b038216820361015e57565b67ffffffffffffffff81116119f257601f01601f191660200190565b81601f8201121561015e578035906124b28261247f565b926124c060405194856122eb565b8284526020838301011161015e57816000926020809301838601378301015290565b5190811515820361015e57565b51906001600160a01b038216820361015e57565b9081604091031261015e57612531602060405192612520846122b3565b612529816124ef565b8452016124e2565b602082015290565b90612543826123f6565b61255060405191826122eb565b8281528092612561601f19916123f6565b0190602036910137565b919082018092116113e557565b8051156125855760200190565b634e487b7160e01b600052603260045260246000fd5b8051600110156125855760400190565b80518210156125855760209160051b010190565b906000905b600282106125d157505050565b60208060019285518152019301910190916125c4565b6101209060206040612640959482815180518652015183850152612622838083015161261685880182516125bf565b015160808601906125bf565b0151805160c0840152015160e08201528161010082015201906123c2565b90565b60208183031261015e5780519067ffffffffffffffff821161015e570181601f8201121561015e5780516126768161247f565b9261268460405194856122eb565b8184526020828401011161015e57612640916020808501910161237a565b60208183031261015e5780519067ffffffffffffffff821161015e57019080601f8301121561015e5781516126d6816123f6565b926126e460405194856122eb565b81845260208085019260051b82010192831161015e57602001905b82821061270c5750505090565b81518152602091820191016126ff565b60011b906401fffffffe63fffffffe8316921682036113e557565b602460206001600160a01b03600a54166040519283809263c3c4bd0b60e01b82523060048301525afa9081156102465760009161277c575b5080612640575060095490565b906020823d6020116127a9575b81612796602093836122eb565b810103126127a65750513861276f565b80fd5b3d9150612789565b9063ffffffff6002916101008282161015612812575b60108282161015612800575b600482821610156127ef575b1610156127e95790565b60011c90565b92821c92821c633fffffff166127df565b600493841c931c630fffffff166127d3565b600893841c931c62ffffff166127c7565b63ffffffff81116128375763ffffffff1690565b6306dfcc6560e41b600052602060045260245260446000fd5b91906128616004546005549061256b565b9060405161286e816122b3565b84815260016020820183815284600052600360205260406000209251835551910155600454600181018091116113e5577ff533f9705aac5020e21695ea3553ac7b6881070d2b6900ab2b1e3050304b5bf9936128e5916004556040519384938452602084015260606040840152606083019061239d565b0390a2565b63ffffffff1663ffffffff81146113e55760010190565b6000612977926001600160a01b0382936040519682602089019463a9059cbb60e01b865216602489015260448801526044875261293f6064886122eb565b1694519082865af13d156129c4573d906129588261247f565b9161296660405193846122eb565b82523d6000602084013e5b83612b79565b80519081151591826129a1575b505061298d5750565b635274afe760e01b60005260045260246000fd5b819250906020918101031261015e5760206129bc91016124e2565b153880612984565b606090612971565b604051906129d9826122b3565b60006020838281520152565b6129ed6129cc565b507f7fffffffffffffffffffffffffffffffffffffffffffffffffffffffffffffff60405191612a1c836122b3565b60ff81901c835216602082015290565b8151919060418303612a5d57612a5692506020820151906060604084015193015160001a90612af0565b9192909190565b505060009160029190565b9190916004811015612ada5780612a7e57509050565b600060018203612a995763f645eedf60e01b60005260046000fd5b5060028103612ab7578263fce698f760e01b60005260045260246000fd5b9091600360009214612ac7575050565b6335e2f38360e21b825260045260249150fd5b634e487b7160e01b600052602160045260246000fd5b91907f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a08411612b6d579160209360809260ff60009560405194855216868401526040830152606082015282805260015afa15610246576000516001600160a01b03811615612b615790600090600090565b50600090600190600090565b50505060009160039190565b90612b9f5750805115612b8e57805190602001fd5b630a12f52160e11b60005260046000fd5b81511580612bce575b612bb0575090565b6001600160a01b0390639996b31560e01b6000521660045260246000fd5b50803b15612ba856fea264697066735822122012dfd0ae8d5dbc3fc880112f49149b46d89b2ed9da63a79342b84a207377f89f64736f6c634300081a0033';

type CommitmentPoolERC20ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CommitmentPoolERC20ConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CommitmentPoolERC20__factory extends ContractFactory {
  constructor(...args: CommitmentPoolERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'CommitmentPoolERC20';
  }

  deploy(
    _treeHeight: BigNumberish,
    _minRollupFee: BigNumberish,
    _token: string,
    _settingsCenter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<CommitmentPoolERC20> {
    return super.deploy(
      _treeHeight,
      _minRollupFee,
      _token,
      _settingsCenter,
      overrides || {},
    ) as Promise<CommitmentPoolERC20>;
  }
  getDeployTransaction(
    _treeHeight: BigNumberish,
    _minRollupFee: BigNumberish,
    _token: string,
    _settingsCenter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_treeHeight, _minRollupFee, _token, _settingsCenter, overrides || {});
  }
  attach(address: string): CommitmentPoolERC20 {
    return super.attach(address) as CommitmentPoolERC20;
  }
  connect(signer: Signer): CommitmentPoolERC20__factory {
    return super.connect(signer) as CommitmentPoolERC20__factory;
  }
  static readonly contractName: 'CommitmentPoolERC20';
  public readonly contractName: 'CommitmentPoolERC20';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommitmentPoolERC20Interface {
    return new utils.Interface(_abi) as CommitmentPoolERC20Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): CommitmentPoolERC20 {
    return new Contract(address, _abi, signerOrProvider) as CommitmentPoolERC20;
  }
}
