/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import { Signer, utils, Contract, ContractFactory, Overrides, BigNumberish } from 'ethers';
import { Provider, TransactionRequest } from '@ethersproject/providers';
import type { CommitmentPoolERC20, CommitmentPoolERC20Interface } from '../CommitmentPoolERC20';

const _abi = [
  {
    inputs: [
      {
        internalType: 'uint8',
        name: '_treeHeight',
        type: 'uint8',
      },
      {
        internalType: 'uint256',
        name: '_minRollupFee',
        type: 'uint256',
      },
      {
        internalType: 'contract IERC20Metadata',
        name: '_token',
        type: 'address',
      },
      {
        internalType: 'address',
        name: '_settingsCenter',
        type: 'address',
      },
    ],
    stateMutability: 'nonpayable',
    type: 'constructor',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'target',
        type: 'address',
      },
    ],
    name: 'AddressEmptyCode',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'account',
        type: 'address',
      },
    ],
    name: 'AddressInsufficientBalance',
    type: 'error',
  },
  {
    inputs: [],
    name: 'AssociatedPoolNotMatched',
    type: 'error',
  },
  {
    inputs: [],
    name: 'AuditorNotesLengthError',
    type: 'error',
  },
  {
    inputs: [],
    name: 'CommitmentHasBeenSubmitted',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'param',
        type: 'string',
      },
    ],
    name: 'Duplicated',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ECDSAInvalidSignature',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'length',
        type: 'uint256',
      },
    ],
    name: 'ECDSAInvalidSignatureLength',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'bytes32',
        name: 's',
        type: 'bytes32',
      },
    ],
    name: 'ECDSAInvalidSignatureS',
    type: 'error',
  },
  {
    inputs: [],
    name: 'FailedInnerCall',
    type: 'error',
  },
  {
    inputs: [],
    name: 'IndexOutOfBound',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'string',
        name: 'param',
        type: 'string',
      },
    ],
    name: 'Invalid',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NewRootIsDuplicated',
    type: 'error',
  },
  {
    inputs: [],
    name: 'NoteHasBeenSpent',
    type: 'error',
  },
  {
    inputs: [],
    name: 'OutputNotesLessThanThree',
    type: 'error',
  },
  {
    inputs: [],
    name: 'ReentrancyGuardReentrantCall',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RejectRelay',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RejectRollup',
    type: 'error',
  },
  {
    inputs: [],
    name: 'RollupFeeToFew',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'rollupSize',
        type: 'uint256',
      },
    ],
    name: 'RollupVerifierDisabled',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint8',
        name: 'bits',
        type: 'uint8',
      },
      {
        internalType: 'uint256',
        name: 'value',
        type: 'uint256',
      },
    ],
    name: 'SafeCastOverflowedUintDowncast',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'address',
        name: 'token',
        type: 'address',
      },
    ],
    name: 'SafeERC20FailedOperation',
    type: 'error',
  },
  {
    inputs: [],
    name: 'SanctionedAddress',
    type: 'error',
  },
  {
    inputs: [
      {
        internalType: 'uint32',
        name: 'inputNumber',
        type: 'uint32',
      },
      {
        internalType: 'uint32',
        name: 'outputNumber',
        type: 'uint32',
      },
    ],
    name: 'TransactVerifierDisabled',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TreeHeightLessThanZero',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TreeHeightOutOfBounds',
    type: 'error',
  },
  {
    inputs: [],
    name: 'TreeIsFull',
    type: 'error',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'commitment',
        type: 'uint256',
      },
    ],
    name: 'CommitmentIncluded',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'commitment',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'rollupFee',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'leafIndex',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'bytes',
        name: 'encryptedNote',
        type: 'bytes',
      },
    ],
    name: 'CommitmentQueued',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: true,
        internalType: 'uint256',
        name: 'rootHash',
        type: 'uint256',
      },
      {
        indexed: true,
        internalType: 'uint256',
        name: 'serialNumber',
        type: 'uint256',
      },
    ],
    name: 'CommitmentSpent',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        indexed: false,
        internalType: 'uint64',
        name: 'id',
        type: 'uint64',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'auditorPublicKey',
        type: 'uint256',
      },
      {
        indexed: false,
        internalType: 'uint256',
        name: 'encryptedAuditorNote',
        type: 'uint256',
      },
    ],
    name: 'EncryptedAuditorNote',
    type: 'event',
  },
  {
    anonymous: false,
    inputs: [
      {
        components: [
          {
            internalType: 'uint64',
            name: 'id',
            type: 'uint64',
          },
          {
            internalType: 'uint256',
            name: 'publicKey',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'note',
            type: 'uint256',
          },
        ],
        indexed: false,
        internalType: 'struct CommitmentPool.AuditorNote[]',
        name: 'notes',
        type: 'tuple[]',
      },
    ],
    name: 'EncryptedAuditorNotes',
    type: 'event',
  },
  {
    inputs: [],
    name: 'AUDITOR_COUNT',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_fullPath',
        type: 'uint256',
      },
      {
        internalType: 'uint32',
        name: '_rollupSize',
        type: 'uint32',
      },
    ],
    name: '_pathIndices',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetAddress',
    outputs: [
      {
        internalType: 'address',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetDecimals',
    outputs: [
      {
        internalType: 'uint8',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetName',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetSymbol',
    outputs: [
      {
        internalType: 'string',
        name: '',
        type: 'string',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'assetType',
    outputs: [
      {
        internalType: 'enum AssetPool.AssetType',
        name: '',
        type: 'uint8',
      },
    ],
    stateMutability: 'pure',
    type: 'function',
  },
  {
    inputs: [],
    name: 'defaultMinRollupFee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            internalType: 'uint256',
            name: 'amount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'commitment',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'executorFee',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'rollupFee',
            type: 'uint256',
          },
          {
            internalType: 'bytes',
            name: 'encryptedNote',
            type: 'bytes',
          },
        ],
        internalType: 'struct ICommitmentPool.CommitmentRequest',
        name: '_request',
        type: 'tuple',
      },
      {
        internalType: 'address',
        name: '_executor',
        type: 'address',
      },
    ],
    name: 'enqueue',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getAllAuditorPublicKeys',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_index',
        type: 'uint256',
      },
    ],
    name: 'getAuditorPublicKey',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCommitmentCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCommitmentIncludedCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getCommitmentQueuedCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getMinRollupFee',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getNullifierCount',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getQueuedCommitments',
    outputs: [
      {
        internalType: 'uint256[]',
        name: '',
        type: 'uint256[]',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [],
    name: 'getTreeCapacity',
    outputs: [
      {
        internalType: 'uint256',
        name: '',
        type: 'uint256',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_commitment',
        type: 'uint256',
      },
    ],
    name: 'isHistoricCommitment',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: 'root',
        type: 'uint256',
      },
    ],
    name: 'isKnownRoot',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        internalType: 'uint256',
        name: '_serialNumber',
        type: 'uint256',
      },
    ],
    name: 'isSpentSerialNumber',
    outputs: [
      {
        internalType: 'bool',
        name: '',
        type: 'bool',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'a',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256[2]',
                    name: 'X',
                    type: 'uint256[2]',
                  },
                  {
                    internalType: 'uint256[2]',
                    name: 'Y',
                    type: 'uint256[2]',
                  },
                ],
                internalType: 'struct IVerifier.G2Point',
                name: 'b',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'c',
                type: 'tuple',
              },
            ],
            internalType: 'struct IVerifier.Proof',
            name: 'proof',
            type: 'tuple',
          },
          {
            internalType: 'uint32',
            name: 'rollupSize',
            type: 'uint32',
          },
          {
            internalType: 'uint256',
            name: 'newRoot',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'leafHash',
            type: 'uint256',
          },
        ],
        internalType: 'struct ICommitmentPool.RollupRequest',
        name: '_request',
        type: 'tuple',
      },
    ],
    name: 'rollup',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
  {
    inputs: [],
    name: 'settings',
    outputs: [
      {
        internalType: 'contract MystikoSettings',
        name: '',
        type: 'address',
      },
    ],
    stateMutability: 'view',
    type: 'function',
  },
  {
    inputs: [
      {
        components: [
          {
            components: [
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'a',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256[2]',
                    name: 'X',
                    type: 'uint256[2]',
                  },
                  {
                    internalType: 'uint256[2]',
                    name: 'Y',
                    type: 'uint256[2]',
                  },
                ],
                internalType: 'struct IVerifier.G2Point',
                name: 'b',
                type: 'tuple',
              },
              {
                components: [
                  {
                    internalType: 'uint256',
                    name: 'X',
                    type: 'uint256',
                  },
                  {
                    internalType: 'uint256',
                    name: 'Y',
                    type: 'uint256',
                  },
                ],
                internalType: 'struct IVerifier.G1Point',
                name: 'c',
                type: 'tuple',
              },
            ],
            internalType: 'struct IVerifier.Proof',
            name: 'proof',
            type: 'tuple',
          },
          {
            internalType: 'uint256',
            name: 'rootHash',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'serialNumbers',
            type: 'uint256[]',
          },
          {
            internalType: 'uint256[]',
            name: 'sigHashes',
            type: 'uint256[]',
          },
          {
            internalType: 'bytes32',
            name: 'sigPk',
            type: 'bytes32',
          },
          {
            internalType: 'uint256',
            name: 'publicAmount',
            type: 'uint256',
          },
          {
            internalType: 'uint256',
            name: 'relayerFeeAmount',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'outCommitments',
            type: 'uint256[]',
          },
          {
            internalType: 'uint256[]',
            name: 'outRollupFees',
            type: 'uint256[]',
          },
          {
            internalType: 'address',
            name: 'publicRecipient',
            type: 'address',
          },
          {
            internalType: 'address',
            name: 'relayerAddress',
            type: 'address',
          },
          {
            internalType: 'bytes[]',
            name: 'outEncryptedNotes',
            type: 'bytes[]',
          },
          {
            internalType: 'uint256',
            name: 'randomAuditingPublicKey',
            type: 'uint256',
          },
          {
            internalType: 'uint256[]',
            name: 'encryptedAuditorNotes',
            type: 'uint256[]',
          },
        ],
        internalType: 'struct ICommitmentPool.TransactRequest',
        name: '_request',
        type: 'tuple',
      },
      {
        internalType: 'bytes',
        name: '_signature',
        type: 'bytes',
      },
    ],
    name: 'transact',
    outputs: [],
    stateMutability: 'nonpayable',
    type: 'function',
  },
];

const _bytecode =
  '0x60a06040526000600455600060055560006006553480156200002057600080fd5b5060405162003ce638038062003ce68339810160408190526200004391620007ae565b8184848360016000819055508260ff166000036200007457604051632c4f29b160e21b815260040160405180910390fd5b600160ff84161b6080526200008983620000e9565b60088190556000908152600760205260409020805460ff19166001179055600991909155600a80546001600160a01b039283166001600160a01b031991821617909155600b805494909216931692909217909155506200080f9350505050565b60008160ff166000036200011e57507f09f658457775074ff4c842032a5ec2f1134c32784cca59d594caac8c503b7923919050565b8160ff166001036200015157507f1a77569b79cb7c2eaf9368de9e3b1efc0a606561e5ab299c2337340f3cdd576a919050565b8160ff166002036200018457507f111bd0002b1e3b8f1978c932b5ccb2fab87fdb0acab2ddb266f9a346dcb11ee1919050565b8160ff16600303620001b757507f040868ea2a363e05d7ae44280f69b49e429ab096ca2844efe91f8d6b3dad57dd919050565b8160ff16600403620001e957507ef8f605c92c8502c8fe83be1b83b24e3f67312a388f30cbadb5dee8974137c3919050565b8160ff166005036200021c57507f1adc043c99adbc0c86a60a36db0f661e2dd96f36ede322f954386d8935a0c5d9919050565b8160ff166006036200024f57507f2a1fedfa71da723ac3e9b35cef752fa1b647b2b737a23e91241cb7bdc419e3f4919050565b8160ff166007036200028257507f17fe1974543c4c4b228e1292f7e3200d31435fc910ee5a8c5cafd329cc4b256b919050565b8160ff16600803620002b557507f0e84a586eb63a0eec0f1fe5785022441f0e29e4ae859c7ce1f5fc88a42ad2e6b919050565b8160ff16600903620002e857507f193deb901f6eeb032e02e093280db17e373d4ff52bafda9215b46bb9b0a86f3e919050565b8160ff16600a036200031b57507f1d10ca7b985697cb519565a5006c3f44b020b2edab9b7422ed15dc34532f9406919050565b8160ff16600b036200034e57507f1dc200763555467a4e583e00badfdc1fb4d3d3f8f1cc81f31fd2f8b387776081919050565b8160ff16600c036200038157507f203dd11fdba0ed13b20ca2d6952f3feb7461836a03512e0cccce8467b320b2f6919050565b8160ff16600d03620003b457507f0591af64e64a3e69caf23eee2bdea90885343a49f547ee9464e95d8d6267e4f7919050565b8160ff16600e03620003e757507f2af572f1077a32f46dc8e307d43c0fa6753b400b2107325976b8df7380545ff6919050565b8160ff16600f036200041a57507f043227ae4b70b1aacd04e35e6aaed7b56d91220c31e97aaf52e12a6a56984e52919050565b8160ff166010036200044d57507f2976f1f6a91d83d4c528dad69ece6d3d91934b0e5657e915b360c8c4c2fb54e6919050565b8160ff166011036200047f57507ee5c251c9e093658be0cd1b0df55b6f70f3d09146c1c8b4212a4ddcde700dbc919050565b8160ff16601203620004b257507f0267cbbc1bc2f1c3e3073d2ee60df8cc0bfef39fe3cee735c9ad5c8ad30064d2919050565b8160ff16601303620004e557507f2f356057bc56f67dbf159a0e8935022acd5e982dce9f4071adc43e4d57ce27e6919050565b8160ff166014036200051857507f273db68f52f12a9d8022ae524050064e42d4d1661c9bcce958acf89b5e8b127b919050565b8160ff166015036200054b57507f0496a18ad4cca81b7c98ceb197439ad925e0f7f62d69dfa42cf9574be77fe30f919050565b8160ff166016036200057e57507f24f89a3f943d421b2f3a554b65459f42b820ac09d6fd9d693df5f8ba732ab596919050565b8160ff16601703620005b157507f1b55bfd751c6807df36876cdce68034ab43210be2bc8afa8043c7f428604e7a7919050565b8160ff16601803620005e457507f16d6595a398cf20f2489b90e958166f1e19c537c0c46e9b8ea5462391ee8f143919050565b8160ff166019036200061757507f0f01447ef8f621592474b678ed2fc404ebaf22a6fce15364bb4152a88c113613919050565b8160ff16601a036200064a57507f026c2dffee48bacbc9d21cf90aa7c6e525ab01db6966a9e7e53b3d3f4d1f5a4d919050565b8160ff16601b036200067d57507f234fe90732795745b2c504c791242a2bb193baa1cbeab57db9324b6bb9134817919050565b8160ff16601c03620006b057507f23a8e0a7e60981c52ebb498c260d5bef4d7c65145d17128996a77c33a3262a7e919050565b8160ff16601d03620006e357507f24ee69d2565210c7027ff6fc2657ed029278bc79f41077fe3281ea5d5d8e80f9919050565b8160ff16601e036200071657507f1de402fa32463bb2917b733aeef0197a49cacacd1fe860c3acc8cd3b65a30a68919050565b8160ff16601f036200074957507f1d3015a0f6a7b3f754171d0540628107e50e25debceb16e0e33ae4205501896d919050565b8160ff166020036200077c57507f264a260539342647256819046bae05bed903a8d19b3c90439d67317d5d881322919050565b604051639780f42960e01b815260040160405180910390fd5b6001600160a01b0381168114620007ab57600080fd5b50565b60008060008060808587031215620007c557600080fd5b845160ff81168114620007d757600080fd5b602086015160408701519195509350620007f18162000795565b6060860151909250620008048162000795565b939692955090935050565b6080516134ad620008396000396000818161023901528181610e41015261180501526134ad6000f3fe608060405234801561001057600080fd5b50600436106101985760003560e01c80637a553744116100e3578063b2316c331161008c578063e06174e411610066578063e06174e414610356578063e500f50414610369578063f2da1d411461037157600080fd5b8063b2316c331461032b578063c2d4160114610334578063c9230c5d1461034e57600080fd5b8063a592bd69116100bd578063a592bd69146102f8578063a6232a9314610300578063b08892d01461032357600080fd5b80637a553744146102d5578063866ac658146102dd57806387780df9146102e557600080fd5b8063555d75f01161014557806363bc7d321161011f57806363bc7d321461029a57806372082971146102af57806378d60cd7146102c257600080fd5b8063555d75f0146102675780635688881f1461026f578063570600161461027757600080fd5b80633bb8d1b4116101765780633bb8d1b4146101f55780633fe3347a14610228578063484eb6521461023757600080fd5b806314a7737d1461019d578063176de7a8146101b25780631ba46cfd146101d0575b600080fd5b6101b06101ab3660046129e8565b610384565b005b6101ba6109f8565b6040516101c79190612aac565b60405180910390f35b600b546001600160a01b03165b6040516001600160a01b0390911681526020016101c7565b610218610203366004612abf565b60009081526002602052604090205460ff1690565b60405190151581526020016101c7565b60006040516101c79190612aee565b7f00000000000000000000000000000000000000000000000000000000000000005b6040519081526020016101c7565b600454610259565b610259610a6f565b610218610285366004612abf565b60009081526001602052604090205460ff1690565b6102a2610a81565b6040516101c79190612b51565b6101b06102bd366004612d0c565b610af3565b6101b06102d0366004612ece565b61173a565b600654610259565b6102a26118de565b6102596102f3366004612abf565b611991565b610259600581565b61021861030e366004612abf565b60009081526007602052604090205460ff1690565b610259611a05565b61025960095481565b61033c611a8e565b60405160ff90911681526020016101c7565b6101ba611afc565b600a546101dd906001600160a01b031681565b600554610259565b61025961037f366004612f75565b611b46565b6020818101516040805160a0810182523081523393810193845263ffffffff909216828201818152600480546060860190815260055460808701908152600a54955162039b1360e11b815287516001600160a01b039081169482019490945297518316602489015292516044880152516064870152905160848601529093911690620736269060a401602060405180830381865afa15801561042a573d6000803e3d6000fd5b505050506040513d601f19601f8201168201806040525081019061044e9190612fa8565b610484576040517fff4e342300000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b60055460408085015160009081526007602052205460ff16156104ba5760405163e2e1210360e01b815260040160405180910390fd5b600454846020015163ffffffff161115610509576040516314e8955b60e21b815260206004820152600a602482015269726f6c6c757053697a6560b01b60448201526064015b60405180910390fd5b602084015161051e9063ffffffff1682612fc3565b15610559576040516314e8955b60e21b815260206004820152600a602482015269726f6c6c757053697a6560b01b6044820152606401610500565b600a5460208501516040516305afd53360e31b815263ffffffff90911660048201526000916001600160a01b031690632d7ea998906024016040805180830381865afa1580156105ad573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906105d19190612fe5565b9050806020015161060357602085015160405163f5735a5f60e01b815263ffffffff9091166004820152602401610500565b6000610613838760200151611b46565b90506000866020015163ffffffff1667ffffffffffffffff81111561063a5761063a6127f2565b604051908082528060200260200182016040528015610663578160200160208202803683370190505b5090506000805b886020015163ffffffff16811015610761576000610688828861303a565b6000818152600360209081526040808320815180830190925280548083526001909101549282019290925292935090036106d55760405163d3482f7b60e01b815260040160405180910390fd5b80600001518584815181106106ec576106ec61304d565b602002602001018181525050806020015184610708919061303a565b60008381526003602052604080822082815560010182905583519051929650917ffe6b097b46a78e08506a3143b6337c2505ba77df76fe05c3663a987395d634139190a25050808061075990613063565b91505061066a565b50876020015163ffffffff166004600082825461077e919061307c565b9250508190555060007f30644e72e131a029b85045b68181585d2833e84879b9709143e1f593f0000001836040516020016107b9919061308f565b6040516020818303038152906040528051906020012060001c6107dc9190612fc3565b905080896060015114610832576040516314e8955b60e21b815260206004820152600860248201527f6c656166486173680000000000000000000000000000000000000000000000006044820152606401610500565b60408051600480825260a08201909252600091602082016080803683370190505090506008548160008151811061086b5761086b61304d565b60200260200101818152505089604001518160018151811061088f5761088f61304d565b60200260200101818152505081816002815181106108af576108af61304d565b60200260200101818152505084816003815181106108cf576108cf61304d565b602090810291909101015285518a5160405163c941764760e01b81526000926001600160a01b03169163c94176479161090d919086906004016130e8565b6020604051808303816000875af115801561092c573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906109509190612fa8565b9050806109a0576040516314e8955b60e21b815260206004820152600560248201527f70726f6f660000000000000000000000000000000000000000000000000000006044820152606401610500565b8a6020015163ffffffff16600560008282546109bc919061303a565b90915550506040808c015160088190556000908152600760205220805460ff191660011790556109eb84611bcf565b5050505050505050505050565b600b54604080516395d89b4160e01b815290516060926001600160a01b0316916395d89b419160048083019260009291908290030181865afa158015610a42573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a6a9190810190613159565b905090565b6000600454600554610a6a919061303a565b600a5460408051633044b79b60e21b815290516060926001600160a01b03169163c112de6c9160048083019260009291908290030181865afa158015610acb573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052610a6a91908101906131c7565b610afb611be9565b6000610b0b836040015151611c13565b90506000610b1d8460e0015151611c13565b600a54604051632452cfdb60e21b81523060048201529192506001600160a01b03169063914b3f6c90602401602060405180830381865afa158015610b66573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610b8a9190612fa8565b8015610b9b575063ffffffff811615155b15610bc9576040516368975a4760e01b815263ffffffff808416600483015282166024820152604401610500565b60c084015115610c7e576040805180820182523081523360208201908152600a549251635ee36ce960e01b815282516001600160a01b03908116600483015291518216602482015291921690635ee36ce990604401602060405180830381865afa158015610c3b573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610c5f9190612fa8565b610c7c5760405163324af8d960e11b815260040160405180910390fd5b505b600a546040516385e861eb60e01b815263ffffffff8085166004830152831660248201526000916001600160a01b0316906385e861eb906044016040805180830381865afa158015610cd4573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610cf89190612fe5565b90508060200151610d2c576040516368975a4760e01b815263ffffffff808516600483015283166024820152604401610500565b8263ffffffff1685606001515114610d87576040516314e8955b60e21b815260206004820152601060248201527f736967486173686573206c656e677468000000000000000000000000000000006044820152606401610500565b8163ffffffff168561010001515114610de3576040516314e8955b60e21b815260206004820152601460248201527f6f7574526f6c6c757046656573206c656e6774680000000000000000000000006044820152606401610500565b8163ffffffff168561016001515114610e3f576040516314e8955b60e21b815260206004820152601860248201527f6f7574456e637279707465644e6f746573206c656e67746800000000000000006044820152606401610500565b7f00000000000000000000000000000000000000000000000000000000000000008263ffffffff16600454600554610e77919061303a565b610e81919061303a565b1115610ea057604051633b5ccb4360e21b815260040160405180910390fd5b600a5460405163df592f7d60e01b81523260048201526001600160a01b039091169063df592f7d90602401602060405180830381865afa158015610ee8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f0c9190612fa8565b15610f2a57604051632e70c0b160e01b815260040160405180910390fd5b600a5461012086015160405163df592f7d60e01b81526001600160a01b03918216600482015291169063df592f7d90602401602060405180830381865afa158015610f79573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610f9d9190612fa8565b15610fbb57604051632e70c0b160e01b815260040160405180910390fd5b610fcc600563ffffffff8516613258565b856101a001515114610ff157604051633acf48bb60e21b815260040160405180910390fd5b610ffb8585611c48565b600061100884600261326f565b63ffffffff169050600061101d85600261326f565b611028906004613297565b63ffffffff169050600061103d85600261326f565b61104d9063ffffffff168361303a565b90506000600561105e886002613297565b63ffffffff1661106e9190613258565b61107983600261303a565b611083919061303a565b67ffffffffffffffff81111561109b5761109b6127f2565b6040519080825280602002602001820160405280156110c4578160200160208202803683370190505b506020808b015160009081526007909152604090205490915060ff16611116576040516314e8955b60e21b8152600401610500906020808252600490820152631c9bdbdd60e21b604082015260600190565b88602001518160008151811061112e5761112e61304d565b60209081029190910101526000611146886001613297565b63ffffffff16905060005b8863ffffffff168110156112525760008b6040015182815181106111775761117761304d565b6020908102919091018101516000818152600290925260409091205490915060ff16156111d0576040517fff556e2000000000000000000000000000000000000000000000000000000000815260040160405180910390fd5b80846111dd84600161303a565b815181106111ed576111ed61304d565b6020026020010181815250508b60600151828151811061120f5761120f61304d565b6020026020010151848484611224919061303a565b815181106112345761123461304d565b6020908102919091010152508061124a81613063565b915050611151565b5060808a01518261126487600161303a565b815181106112745761127461304d565b602090810291909101015260a08a01518261129087600261303a565b815181106112a0576112a061304d565b602090810291909101015260c08a0151826112bc87600361303a565b815181106112cc576112cc61304d565b602090810291909101015260006112e963ffffffff89168661303a565b905060006112f5611a05565b905060005b8963ffffffff1681101561146d57600160008e60e0015183815181106113225761132261304d565b60209081029190910181015182528101919091526040016000205460ff161561138e5760405163bee3611160e01b815260206004820152600a60248201527f636f6d6d69746d656e74000000000000000000000000000000000000000000006044820152606401610500565b818d610100015182815181106113a6576113a661304d565b602002602001015110156113cd5760405163784f02bd60e11b815260040160405180910390fd5b8c60e0015181815181106113e3576113e361304d565b60200260200101518588836113f8919061303a565b815181106114085761140861304d565b6020026020010181815250508c6101000151818151811061142b5761142b61304d565b6020026020010151858483611440919061303a565b815181106114505761145061304d565b60209081029190910101528061146581613063565b9150506112fa565b506114798c8587611e25565b87518c5160405163c941764760e01b81526001600160a01b039092169163c9417647916114aa9188906004016130e8565b6020604051808303816000875af11580156114c9573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906114ed9190612fa8565b61153a576040516314e8955b60e21b815260206004820152600e60248201527f7472616e736163742070726f6f660000000000000000000000000000000000006044820152606401610500565b60005b8a63ffffffff1681101561160e576001600260008f6040015184815181106115675761156761304d565b6020026020010151815260200190815260200160002060006101000a81548160ff0219169083151502179055506001600660008282546115a7919061303a565b909155505060408d01518051829081106115c3576115c361304d565b60200260200101518d602001517f3c2372ab6130817bd6b8fc6dbaecae947e84201b49535d358debaa6c34c23ecf60405160405180910390a38061160681613063565b91505061153d565b5060005b8963ffffffff168110156116de5760018060008f60e00151848151811061163b5761163b61304d565b6020026020010151815260200190815260200160002060006101000a81548160ff0219169083151502179055506116cc8d60e0015182815181106116815761168161304d565b60200260200101518e610100015183815181106116a0576116a061304d565b60200260200101518f610160015184815181106116bf576116bf61304d565b60200260200101516120a3565b806116d681613063565b915050611612565b5060a08c0151156116fc576116fc8c61012001518d60a00151612142565b60c08c015115611719576117198c61014001518d60c00151612142565b6117228c612159565b505050505050505050506117366001600055565b5050565b600a546040516341fb697960e01b81523360048201526000916001600160a01b0316906341fb697990602401602060405180830381865afa158015611783573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906117a791906132bb565b90506001600160a01b03811630146117d257604051635335a04560e01b815260040160405180910390fd5b60006117dc611a05565b905080846060015110156118035760405163784f02bd60e11b815260040160405180910390fd5b7f0000000000000000000000000000000000000000000000000000000000000000600454600554611834919061303a565b1061185257604051633b5ccb4360e21b815260040160405180910390fd5b60208085015160009081526001909152604090205460ff16156118885760405163e38cd14d60e01b815260040160405180910390fd5b60208085018051600090815260019283905260409020805460ff191690921790915551606085015160808601516118c09291906120a3565b6040840151156118d8576118d8838560400151612142565b50505050565b6060600060045467ffffffffffffffff8111156118fd576118fd6127f2565b604051908082528060200260200182016040528015611926578160200160208202803683370190505b50905060005b60045481101561198b57600081600554611946919061303a565b60008181526003602052604090205484519192509084908490811061196d5761196d61304d565b6020908102919091010152508061198381613063565b91505061192c565b50919050565b600a5460405163dbda082960e01b8152600481018390526000916001600160a01b03169063dbda082990602401602060405180830381865afa1580156119db573d6000803e3d6000fd5b505050506040513d601f19601f820116820180604052508101906119ff91906132d8565b92915050565b600a5460405163c3c4bd0b60e01b815230600482015260009182916001600160a01b039091169063c3c4bd0b90602401602060405180830381865afa158015611a52573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190611a7691906132d8565b90508015611a845780611a88565b6009545b91505090565b600b546040805163313ce56760e01b815290516000926001600160a01b03169163313ce5679160048083019260209291908290030181865afa158015611ad8573d6000803e3d6000fd5b505050506040513d601f19601f82011682018060405250810190610a6a91906132f1565b600b54604080516306fdde0360e01b815290516060926001600160a01b0316916306fdde039160048083019260009291908290030181865afa158015610a42573d6000803e3d6000fd5b60006101008263ffffffff1610611b6c5760088263ffffffff16901c9150600883901c92505b60108263ffffffff1610611b8f5760048263ffffffff16901c9150600483901c92505b60048263ffffffff1610611bb25760028263ffffffff16901c9150600283901c92505b60028263ffffffff1610611bc857600183901c92505b5090919050565b600b54611be6906001600160a01b031633836123ed565b50565b600260005403611c0c57604051633ee5aeb560e01b815260040160405180910390fd5b6002600055565b600063ffffffff821115611c44576040516306dfcc6560e41b81526020600482015260248101839052604401610500565b5090565b6101608201515160038110611c7057604051633fb1945d60e11b815260040160405180910390fd5b606081600003611cc7576101208401516101408501516040516bffffffffffffffffffffffff19606093841b811660208301529190921b1660348201526048015b6040516020818303038152906040529050611d7e565b81600103611d0d57836101200151846101400151856101600151600081518110611cf357611cf361304d565b6020026020010151604051602001611cb193929190613314565b836101200151846101400151856101600151600081518110611d3157611d3161304d565b6020026020010151866101600151600181518110611d5157611d5161304d565b6020026020010151604051602001611d6c949392919061335a565b60405160208183030381529060405290505b805160208201207f19457468657265756d205369676e6564204d6573736167653a0a3332000000006000908152601c91909152603c9020611dbf8185612459565b6001600160a01b031660001b856080015114611e1e576040516314e8955b60e21b815260206004820152600960248201527f7369676e617475726500000000000000000000000000000000000000000000006044820152606401610500565b5050505050565b6101808301516040805180820182526000808252602091820152815180830190925260ff83901c8083526001600160ff1b03909316908201528351909190849084908110611e7557611e7561304d565b602002602001018181525050806020015183836001611e94919061303a565b81518110611ea457611ea461304d565b6020908102919091010152600a5460408051633044b79b60e21b815290516005926000926001600160a01b039091169163c112de6c9160048082019286929091908290030181865afa158015611efe573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f19168201604052611f2691908101906131c7565b90506000611f3585600261303a565b90506000611f43848361303a565b90506000611f52856002613258565b611f5c908461303a565b905060005b8581101561202c576000611fc0868381518110611f8057611f8061304d565b60200260200101516040805180820182526000808252602091820152815180830190925260ff83901c82526001600160ff1b039092169181019190915290565b80519091508a611fd0848861303a565b81518110611fe057611fe061304d565b60200260200101818152505080602001518a8386611ffe919061303a565b8151811061200e5761200e61304d565b6020908102919091010152508061202481613063565b915050611f61565b5060005b896101a001515181101561209757896101a0015181815181106120555761205561304d565b602002602001015189828461206a919061303a565b8151811061207a5761207a61304d565b60209081029190910101528061208f81613063565b915050612030565b50505050505050505050565b60006005546004546120b5919061303a565b6040805180820182528681526020808201878152600085815260039092529281209151825591516001918201556004805493945090929091906120f990849061303a565b92505081905550837ff533f9705aac5020e21695ea3553ac7b6881070d2b6900ab2b1e3050304b5bf9848385604051612134939291906133b6565b60405180910390a250505050565b600b54611736906001600160a01b031683836123ed565b600a5460408051633044b79b60e21b815290516005926000926001600160a01b039091169163c112de6c9160048082019286929091908290030181865afa1580156121a8573d6000803e3d6000fd5b505050506040513d6000823e601f3d908101601f191682016040526121d091908101906131c7565b90506000828460400151516121e59190613258565b905060008167ffffffffffffffff811115612202576122026127f2565b60405190808252806020026020018201604052801561226157816020015b61224e6040518060600160405280600067ffffffffffffffff16815260200160008152602001600081525090565b8152602001906001900390816122205790505b5090506000805b8660400151518163ffffffff1610156123ad5760005b868163ffffffff16101561239a578063ffffffff1660208363ffffffff1667ffffffffffffffff16901b178484815181106122bb576122bb61304d565b602090810291909101015167ffffffffffffffff90911690528551869063ffffffff83169081106122ee576122ee61304d565b60200260200101518484815181106123085761230861304d565b60200260200101516020018181525050876101a001518163ffffffff16888463ffffffff166123379190613258565b612341919061303a565b815181106123515761235161304d565b602002602001015184848151811061236b5761236b61304d565b6020908102919091010151604001528261238481613063565b9350508080612392906133d5565b91505061227e565b50806123a5816133d5565b915050612268565b507f6af07ebcb33931abd348e785f70c6d259390cf799191f8c99124245b96e1a613826040516123dd91906133f8565b60405180910390a1505050505050565b604080516001600160a01b038416602482015260448082018490528251808303909101815260649091019091526020810180517bffffffffffffffffffffffffffffffffffffffffffffffffffffffff1663a9059cbb60e01b179052612454908490612483565b505050565b60008060008061246986866124e6565b9250925092506124798282612533565b5090949350505050565b60006124986001600160a01b038416836125ec565b905080516000141580156124bd5750808060200190518101906124bb9190612fa8565b155b1561245457604051635274afe760e01b81526001600160a01b0384166004820152602401610500565b600080600083516041036125205760208401516040850151606086015160001a61251288828585612601565b95509550955050505061252c565b50508151600091506002905b9250925092565b600082600381111561254757612547612ad8565b03612550575050565b600182600381111561256457612564612ad8565b036125825760405163f645eedf60e01b815260040160405180910390fd5b600282600381111561259657612596612ad8565b036125b75760405163fce698f760e01b815260048101829052602401610500565b60038260038111156125cb576125cb612ad8565b03611736576040516335e2f38360e21b815260048101829052602401610500565b60606125fa838360006126d0565b9392505050565b600080807f7fffffffffffffffffffffffffffffff5d576e7357a4501ddfe92f46681b20a084111561263c57506000915060039050826126c6565b604080516000808252602082018084528a905260ff891692820192909252606081018790526080810186905260019060a0016020604051602081039080840390855afa158015612690573d6000803e3d6000fd5b5050604051601f1901519150506001600160a01b0381166126bc575060009250600191508290506126c6565b9250600091508190505b9450945094915050565b6060814710156126f55760405163cd78605960e01b8152306004820152602401610500565b600080856001600160a01b03168486604051612711919061345b565b60006040518083038185875af1925050503d806000811461274e576040519150601f19603f3d011682016040523d82523d6000602084013e612753565b606091505b509150915061276386838361276d565b9695505050505050565b6060826127825761277d826127c9565b6125fa565b815115801561279957506001600160a01b0384163b155b156127c257604051639996b31560e01b81526001600160a01b0385166004820152602401610500565b50806125fa565b8051156127d95780518082602001fd5b604051630a12f52160e11b815260040160405180910390fd5b634e487b7160e01b600052604160045260246000fd5b6040805190810167ffffffffffffffff8111828210171561282b5761282b6127f2565b60405290565b6040516101c0810167ffffffffffffffff8111828210171561282b5761282b6127f2565b60405160a0810167ffffffffffffffff8111828210171561282b5761282b6127f2565b604051601f8201601f1916810167ffffffffffffffff811182821017156128a1576128a16127f2565b604052919050565b6000604082840312156128bb57600080fd5b6128c3612808565b9050813581526020820135602082015292915050565b600082601f8301126128ea57600080fd5b6128f2612808565b80604084018581111561290457600080fd5b845b8181101561291e578035845260209384019301612906565b509095945050505050565b600081830361010081121561293d57600080fd5b6040516060810181811067ffffffffffffffff82111715612960576129606127f2565b60405291508161297085856128a9565b81526080603f198301121561298457600080fd5b61298c612808565b915061299b85604086016128d9565b82526129aa85608086016128d9565b60208301528160208201526129c28560c086016128a9565b6040820152505092915050565b803563ffffffff811681146129e357600080fd5b919050565b600061016082840312156129fb57600080fd5b6040516080810181811067ffffffffffffffff82111715612a1e57612a1e6127f2565b604052612a2b8484612929565b8152612a3a61010084016129cf565b6020820152610120830135604082015261014090920135606083015250919050565b60005b83811015612a77578181015183820152602001612a5f565b50506000910152565b60008151808452612a98816020860160208601612a5c565b601f01601f19169290920160200192915050565b6020815260006125fa6020830184612a80565b600060208284031215612ad157600080fd5b5035919050565b634e487b7160e01b600052602160045260246000fd5b6020810160028310612b1057634e487b7160e01b600052602160045260246000fd5b91905290565b600081518084526020808501945080840160005b83811015612b4657815187529582019590820190600101612b2a565b509495945050505050565b6020815260006125fa6020830184612b16565b600067ffffffffffffffff821115612b7e57612b7e6127f2565b5060051b60200190565b600082601f830112612b9957600080fd5b81356020612bae612ba983612b64565b612878565b82815260059290921b84018101918181019086841115612bcd57600080fd5b8286015b84811015612be85780358352918301918301612bd1565b509695505050505050565b6001600160a01b0381168114611be657600080fd5b80356129e381612bf3565b600067ffffffffffffffff821115612c2d57612c2d6127f2565b50601f01601f191660200190565b600082601f830112612c4c57600080fd5b8135612c5a612ba982612c13565b818152846020838601011115612c6f57600080fd5b816020850160208301376000918101602001919091529392505050565b600082601f830112612c9d57600080fd5b81356020612cad612ba983612b64565b82815260059290921b84018101918181019086841115612ccc57600080fd5b8286015b84811015612be857803567ffffffffffffffff811115612cf05760008081fd5b612cfe8986838b0101612c3b565b845250918301918301612cd0565b60008060408385031215612d1f57600080fd5b823567ffffffffffffffff80821115612d3757600080fd5b908401906102a08287031215612d4c57600080fd5b612d54612831565b612d5e8784612929565b81526101008084013560208301526101208085013584811115612d8057600080fd5b612d8c8a828801612b88565b6040850152506101408086013585811115612da657600080fd5b612db28b828901612b88565b6060860152506101608087013560808601526101808088013560a08701526101a08089013560c08801526101c089013588811115612def57600080fd5b612dfb8e828c01612b88565b60e0890152506101e089013588811115612e1457600080fd5b612e208e828c01612b88565b8789015250612e326102008a01612c08565b85880152612e436102208a01612c08565b84880152610240890135955087861115612e5c57600080fd5b612e688d878b01612c8c565b8388015261026089013582880152610280890135955087861115612e8b57600080fd5b612e978d878b01612b88565b9087015250939750505050602086013592505080821115612eb757600080fd5b50612ec485828601612c3b565b9150509250929050565b60008060408385031215612ee157600080fd5b823567ffffffffffffffff80821115612ef957600080fd5b9084019060a08287031215612f0d57600080fd5b612f15612855565b82358152602083013560208201526040830135604082015260608301356060820152608083013582811115612f4957600080fd5b612f5588828601612c3b565b6080830152509350612f6c91505060208401612c08565b90509250929050565b60008060408385031215612f8857600080fd5b82359150612f6c602084016129cf565b805180151581146129e357600080fd5b600060208284031215612fba57600080fd5b6125fa82612f98565b600082612fe057634e487b7160e01b600052601260045260246000fd5b500690565b600060408284031215612ff757600080fd5b612fff612808565b825161300a81612bf3565b815261301860208401612f98565b60208201529392505050565b634e487b7160e01b600052601160045260246000fd5b808201808211156119ff576119ff613024565b634e487b7160e01b600052603260045260246000fd5b60006001820161307557613075613024565b5060010190565b818103818111156119ff576119ff613024565b815160009082906020808601845b838110156130b95781518552938201939082019060010161309d565b50929695505050505050565b8060005b60028110156118d85781518452602093840193909101906001016130c9565b600061012061310283865180518252602090810151910152565b60208501516131156040850182516130c5565b6020015161312660808501826130c5565b506040850151805160c08501526020015160e0840152610100830181905261315081840185612b16565b95945050505050565b60006020828403121561316b57600080fd5b815167ffffffffffffffff81111561318257600080fd5b8201601f8101841361319357600080fd5b80516131a1612ba982612c13565b8181528560208385010111156131b657600080fd5b613150826020830160208601612a5c565b600060208083850312156131da57600080fd5b825167ffffffffffffffff8111156131f157600080fd5b8301601f8101851361320257600080fd5b8051613210612ba982612b64565b81815260059190911b8201830190838101908783111561322f57600080fd5b928401925b8284101561324d57835182529284019290840190613234565b979650505050505050565b80820281158282048414176119ff576119ff613024565b63ffffffff81811683821602808216919082811461328f5761328f613024565b505092915050565b63ffffffff8181168382160190808211156132b4576132b4613024565b5092915050565b6000602082840312156132cd57600080fd5b81516125fa81612bf3565b6000602082840312156132ea57600080fd5b5051919050565b60006020828403121561330357600080fd5b815160ff811681146125fa57600080fd5b60006bffffffffffffffffffffffff19808660601b168352808560601b16601484015250825161334b816028850160208701612a5c565b91909101602801949350505050565b60006bffffffffffffffffffffffff19808760601b168352808660601b166014840152508351613391816028850160208801612a5c565b8351908301906133a8816028840160208801612a5c565b016028019695505050505050565b8381528260208201526060604082015260006131506060830184612a80565b600063ffffffff8083168181036133ee576133ee613024565b6001019392505050565b602080825282518282018190526000919060409081850190868401855b8281101561344e578151805167ffffffffffffffff16855286810151878601528501518585015260609093019290850190600101613415565b5091979650505050505050565b6000825161346d818460208701612a5c565b919091019291505056fea26469706673582212206c3d55a32c95a428649449dfefe99d8f44abbf0c10accf0d349513344a774e9064736f6c63430008140033';

type CommitmentPoolERC20ConstructorParams = [signer?: Signer] | ConstructorParameters<typeof ContractFactory>;

const isSuperArgs = (
  xs: CommitmentPoolERC20ConstructorParams,
): xs is ConstructorParameters<typeof ContractFactory> => xs.length > 1;

export class CommitmentPoolERC20__factory extends ContractFactory {
  constructor(...args: CommitmentPoolERC20ConstructorParams) {
    if (isSuperArgs(args)) {
      super(...args);
    } else {
      super(_abi, _bytecode, args[0]);
    }
    this.contractName = 'CommitmentPoolERC20';
  }

  deploy(
    _treeHeight: BigNumberish,
    _minRollupFee: BigNumberish,
    _token: string,
    _settingsCenter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<CommitmentPoolERC20> {
    return super.deploy(
      _treeHeight,
      _minRollupFee,
      _token,
      _settingsCenter,
      overrides || {},
    ) as Promise<CommitmentPoolERC20>;
  }
  getDeployTransaction(
    _treeHeight: BigNumberish,
    _minRollupFee: BigNumberish,
    _token: string,
    _settingsCenter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): TransactionRequest {
    return super.getDeployTransaction(_treeHeight, _minRollupFee, _token, _settingsCenter, overrides || {});
  }
  attach(address: string): CommitmentPoolERC20 {
    return super.attach(address) as CommitmentPoolERC20;
  }
  connect(signer: Signer): CommitmentPoolERC20__factory {
    return super.connect(signer) as CommitmentPoolERC20__factory;
  }
  static readonly contractName: 'CommitmentPoolERC20';
  public readonly contractName: 'CommitmentPoolERC20';
  static readonly bytecode = _bytecode;
  static readonly abi = _abi;
  static createInterface(): CommitmentPoolERC20Interface {
    return new utils.Interface(_abi) as CommitmentPoolERC20Interface;
  }
  static connect(address: string, signerOrProvider: Signer | Provider): CommitmentPoolERC20 {
    return new Contract(address, _abi, signerOrProvider) as CommitmentPoolERC20;
  }
}
