/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface MystikoDepositConfigInterface extends utils.Interface {
  contractName: 'MystikoDepositConfig';
  functions: {
    'DEFAULT_ADMIN_ROLE()': FunctionFragment;
    'associatedPool(address)': FunctionFragment;
    'daoRegistry()': FunctionFragment;
    'depositDisableMap(address)': FunctionFragment;
    'getRoleAdmin(bytes32)': FunctionFragment;
    'grantRole(bytes32,address)': FunctionFragment;
    'hasRole(bytes32,address)': FunctionFragment;
    'isDepositDisable(address)': FunctionFragment;
    'maxDepositAmountMap(address)': FunctionFragment;
    'minDepositAmountMap(address)': FunctionFragment;
    'queryAssociatedPool(address)': FunctionFragment;
    'queryMaxDepositAmount(address)': FunctionFragment;
    'queryMinDepositAmount(address)': FunctionFragment;
    'renounceRole(bytes32,address)': FunctionFragment;
    'revokeRole(bytes32,address)': FunctionFragment;
    'setAdminRole()': FunctionFragment;
    'setAssociatedPool(address,address)': FunctionFragment;
    'setDepositDisable(address,bool)': FunctionFragment;
    'setMaxDepositAmount(address,uint256)': FunctionFragment;
    'setMinDepositAmount(address,uint256)': FunctionFragment;
    'supportsInterface(bytes4)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'DEFAULT_ADMIN_ROLE', values?: undefined): string;
  encodeFunctionData(functionFragment: 'associatedPool', values: [string]): string;
  encodeFunctionData(functionFragment: 'daoRegistry', values?: undefined): string;
  encodeFunctionData(functionFragment: 'depositDisableMap', values: [string]): string;
  encodeFunctionData(functionFragment: 'getRoleAdmin', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'isDepositDisable', values: [string]): string;
  encodeFunctionData(functionFragment: 'maxDepositAmountMap', values: [string]): string;
  encodeFunctionData(functionFragment: 'minDepositAmountMap', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryAssociatedPool', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryMaxDepositAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'queryMinDepositAmount', values: [string]): string;
  encodeFunctionData(functionFragment: 'renounceRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [BytesLike, string]): string;
  encodeFunctionData(functionFragment: 'setAdminRole', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setAssociatedPool', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'setDepositDisable', values: [string, boolean]): string;
  encodeFunctionData(functionFragment: 'setMaxDepositAmount', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setMinDepositAmount', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'supportsInterface', values: [BytesLike]): string;

  decodeFunctionResult(functionFragment: 'DEFAULT_ADMIN_ROLE', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'associatedPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'daoRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositDisableMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getRoleAdmin', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isDepositDisable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxDepositAmountMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'minDepositAmountMap', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryAssociatedPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryMaxDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'queryMinDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'renounceRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAdminRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setAssociatedPool', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDepositDisable', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMinDepositAmount', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'supportsInterface', data: BytesLike): Result;

  events: {
    'AssociatedPoolChanged(address,address)': EventFragment;
    'DepositDisableChanged(address,bool)': EventFragment;
    'MaxDepositAmountChanged(address,uint256)': EventFragment;
    'MinDepositAmountChanged(address,uint256)': EventFragment;
    'RoleAdminChanged(bytes32,bytes32,bytes32)': EventFragment;
    'RoleGranted(bytes32,address,address)': EventFragment;
    'RoleRevoked(bytes32,address,address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AssociatedPoolChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'DepositDisableChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MaxDepositAmountChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MinDepositAmountChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleAdminChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
}

export type AssociatedPoolChangedEvent = TypedEvent<[string, string], { deposit: string; pool: string }>;

export type AssociatedPoolChangedEventFilter = TypedEventFilter<AssociatedPoolChangedEvent>;

export type DepositDisableChangedEvent = TypedEvent<[string, boolean], { deposit: string; disable: boolean }>;

export type DepositDisableChangedEventFilter = TypedEventFilter<DepositDisableChangedEvent>;

export type MaxDepositAmountChangedEvent = TypedEvent<
  [string, BigNumber],
  { deposit: string; maxDepositAmount: BigNumber }
>;

export type MaxDepositAmountChangedEventFilter = TypedEventFilter<MaxDepositAmountChangedEvent>;

export type MinDepositAmountChangedEvent = TypedEvent<
  [string, BigNumber],
  { deposit: string; minDepositAmount: BigNumber }
>;

export type MinDepositAmountChangedEventFilter = TypedEventFilter<MinDepositAmountChangedEvent>;

export type RoleAdminChangedEvent = TypedEvent<
  [string, string, string],
  { role: string; previousAdminRole: string; newAdminRole: string }
>;

export type RoleAdminChangedEventFilter = TypedEventFilter<RoleAdminChangedEvent>;

export type RoleGrantedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<
  [string, string, string],
  { role: string; account: string; sender: string }
>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface MystikoDepositConfig extends BaseContract {
  contractName: 'MystikoDepositConfig';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MystikoDepositConfigInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<[string]>;

    associatedPool(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    daoRegistry(overrides?: CallOverrides): Promise<[string]>;

    depositDisableMap(arg0: string, overrides?: CallOverrides): Promise<[boolean]>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<[boolean]>;

    isDepositDisable(_depositAddress: string, overrides?: CallOverrides): Promise<[boolean]>;

    maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryAssociatedPool(_depositAddress: string, overrides?: CallOverrides): Promise<[string]>;

    queryMaxDepositAmount(_deposit: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    queryMinDepositAmount(_deposit: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setAdminRole(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    setAssociatedPool(
      _depositAddress: string,
      _poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDepositDisable(
      _depositAddress: string,
      _disable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMaxDepositAmount(
      _deposit: string,
      _maxDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMinDepositAmount(
      _deposit: string,
      _minDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;
  };

  DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

  associatedPool(arg0: string, overrides?: CallOverrides): Promise<string>;

  daoRegistry(overrides?: CallOverrides): Promise<string>;

  depositDisableMap(arg0: string, overrides?: CallOverrides): Promise<boolean>;

  getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

  grantRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

  isDepositDisable(_depositAddress: string, overrides?: CallOverrides): Promise<boolean>;

  maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

  queryAssociatedPool(_depositAddress: string, overrides?: CallOverrides): Promise<string>;

  queryMaxDepositAmount(_deposit: string, overrides?: CallOverrides): Promise<BigNumber>;

  queryMinDepositAmount(_deposit: string, overrides?: CallOverrides): Promise<BigNumber>;

  renounceRole(
    role: BytesLike,
    callerConfirmation: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeRole(
    role: BytesLike,
    account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setAdminRole(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  setAssociatedPool(
    _depositAddress: string,
    _poolAddress: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDepositDisable(
    _depositAddress: string,
    _disable: boolean,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMaxDepositAmount(
    _deposit: string,
    _maxDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMinDepositAmount(
    _deposit: string,
    _minDepositAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<string>;

    associatedPool(arg0: string, overrides?: CallOverrides): Promise<string>;

    daoRegistry(overrides?: CallOverrides): Promise<string>;

    depositDisableMap(arg0: string, overrides?: CallOverrides): Promise<boolean>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<string>;

    grantRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<boolean>;

    isDepositDisable(_depositAddress: string, overrides?: CallOverrides): Promise<boolean>;

    maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryAssociatedPool(_depositAddress: string, overrides?: CallOverrides): Promise<string>;

    queryMaxDepositAmount(_deposit: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinDepositAmount(_deposit: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(role: BytesLike, callerConfirmation: string, overrides?: CallOverrides): Promise<void>;

    revokeRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<void>;

    setAdminRole(overrides?: CallOverrides): Promise<void>;

    setAssociatedPool(
      _depositAddress: string,
      _poolAddress: string,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDepositDisable(_depositAddress: string, _disable: boolean, overrides?: CallOverrides): Promise<void>;

    setMaxDepositAmount(
      _deposit: string,
      _maxDepositAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setMinDepositAmount(
      _deposit: string,
      _minDepositAmount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {
    'AssociatedPoolChanged(address,address)'(
      deposit?: string | null,
      pool?: string | null,
    ): AssociatedPoolChangedEventFilter;
    AssociatedPoolChanged(deposit?: string | null, pool?: string | null): AssociatedPoolChangedEventFilter;

    'DepositDisableChanged(address,bool)'(
      deposit?: string | null,
      disable?: null,
    ): DepositDisableChangedEventFilter;
    DepositDisableChanged(deposit?: string | null, disable?: null): DepositDisableChangedEventFilter;

    'MaxDepositAmountChanged(address,uint256)'(
      deposit?: string | null,
      maxDepositAmount?: null,
    ): MaxDepositAmountChangedEventFilter;
    MaxDepositAmountChanged(
      deposit?: string | null,
      maxDepositAmount?: null,
    ): MaxDepositAmountChangedEventFilter;

    'MinDepositAmountChanged(address,uint256)'(
      deposit?: string | null,
      minDepositAmount?: null,
    ): MinDepositAmountChangedEventFilter;
    MinDepositAmountChanged(
      deposit?: string | null,
      minDepositAmount?: null,
    ): MinDepositAmountChangedEventFilter;

    'RoleAdminChanged(bytes32,bytes32,bytes32)'(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;
    RoleAdminChanged(
      role?: BytesLike | null,
      previousAdminRole?: BytesLike | null,
      newAdminRole?: BytesLike | null,
    ): RoleAdminChangedEventFilter;

    'RoleGranted(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;
    RoleGranted(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleGrantedEventFilter;

    'RoleRevoked(bytes32,address,address)'(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
    RoleRevoked(
      role?: BytesLike | null,
      account?: string | null,
      sender?: string | null,
    ): RoleRevokedEventFilter;
  };

  estimateGas: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<BigNumber>;

    associatedPool(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    daoRegistry(overrides?: CallOverrides): Promise<BigNumber>;

    depositDisableMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<BigNumber>;

    isDepositDisable(_depositAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryAssociatedPool(_depositAddress: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMaxDepositAmount(_deposit: string, overrides?: CallOverrides): Promise<BigNumber>;

    queryMinDepositAmount(_deposit: string, overrides?: CallOverrides): Promise<BigNumber>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setAdminRole(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    setAssociatedPool(
      _depositAddress: string,
      _poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDepositDisable(
      _depositAddress: string,
      _disable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMaxDepositAmount(
      _deposit: string,
      _maxDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMinDepositAmount(
      _deposit: string,
      _minDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    DEFAULT_ADMIN_ROLE(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    associatedPool(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    daoRegistry(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    depositDisableMap(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getRoleAdmin(role: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(role: BytesLike, account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isDepositDisable(_depositAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    minDepositAmountMap(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryAssociatedPool(_depositAddress: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryMaxDepositAmount(_deposit: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    queryMinDepositAmount(_deposit: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    renounceRole(
      role: BytesLike,
      callerConfirmation: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeRole(
      role: BytesLike,
      account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setAdminRole(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    setAssociatedPool(
      _depositAddress: string,
      _poolAddress: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDepositDisable(
      _depositAddress: string,
      _disable: boolean,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMaxDepositAmount(
      _deposit: string,
      _maxDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMinDepositAmount(
      _deposit: string,
      _minDepositAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    supportsInterface(interfaceId: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
