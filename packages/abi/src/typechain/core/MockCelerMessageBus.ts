/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface MockCelerMessageBusInterface extends utils.Interface {
  contractName: 'MockCelerMessageBus';
  functions: {
    'chainIdA()': FunctionFragment;
    'chainIdB()': FunctionFragment;
    'contractAddressA()': FunctionFragment;
    'contractAddressB()': FunctionFragment;
    'sendMessage(address,uint256,bytes)': FunctionFragment;
    'setChainPair(uint64,address,uint64,address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'chainIdA', values?: undefined): string;
  encodeFunctionData(functionFragment: 'chainIdB', values?: undefined): string;
  encodeFunctionData(functionFragment: 'contractAddressA', values?: undefined): string;
  encodeFunctionData(functionFragment: 'contractAddressB', values?: undefined): string;
  encodeFunctionData(functionFragment: 'sendMessage', values: [string, BigNumberish, BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'setChainPair',
    values: [BigNumberish, string, BigNumberish, string],
  ): string;

  decodeFunctionResult(functionFragment: 'chainIdA', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'chainIdB', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'contractAddressA', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'contractAddressB', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sendMessage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setChainPair', data: BytesLike): Result;

  events: {};
}

export interface MockCelerMessageBus extends BaseContract {
  contractName: 'MockCelerMessageBus';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockCelerMessageBusInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    chainIdA(overrides?: CallOverrides): Promise<[BigNumber]>;

    chainIdB(overrides?: CallOverrides): Promise<[BigNumber]>;

    contractAddressA(overrides?: CallOverrides): Promise<[string]>;

    contractAddressB(overrides?: CallOverrides): Promise<[string]>;

    sendMessage(
      _receiver: string,
      _dstChainId: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setChainPair(
      _chainIdA: BigNumberish,
      _contractAddressA: string,
      _chainIdB: BigNumberish,
      _contractAddressB: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  chainIdA(overrides?: CallOverrides): Promise<BigNumber>;

  chainIdB(overrides?: CallOverrides): Promise<BigNumber>;

  contractAddressA(overrides?: CallOverrides): Promise<string>;

  contractAddressB(overrides?: CallOverrides): Promise<string>;

  sendMessage(
    _receiver: string,
    _dstChainId: BigNumberish,
    _message: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setChainPair(
    _chainIdA: BigNumberish,
    _contractAddressA: string,
    _chainIdB: BigNumberish,
    _contractAddressB: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    chainIdA(overrides?: CallOverrides): Promise<BigNumber>;

    chainIdB(overrides?: CallOverrides): Promise<BigNumber>;

    contractAddressA(overrides?: CallOverrides): Promise<string>;

    contractAddressB(overrides?: CallOverrides): Promise<string>;

    sendMessage(
      _receiver: string,
      _dstChainId: BigNumberish,
      _message: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setChainPair(
      _chainIdA: BigNumberish,
      _contractAddressA: string,
      _chainIdB: BigNumberish,
      _contractAddressB: string,
      overrides?: CallOverrides,
    ): Promise<void>;
  };

  filters: {};

  estimateGas: {
    chainIdA(overrides?: CallOverrides): Promise<BigNumber>;

    chainIdB(overrides?: CallOverrides): Promise<BigNumber>;

    contractAddressA(overrides?: CallOverrides): Promise<BigNumber>;

    contractAddressB(overrides?: CallOverrides): Promise<BigNumber>;

    sendMessage(
      _receiver: string,
      _dstChainId: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setChainPair(
      _chainIdA: BigNumberish,
      _contractAddressA: string,
      _chainIdB: BigNumberish,
      _contractAddressB: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    chainIdA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    chainIdB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractAddressA(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    contractAddressB(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    sendMessage(
      _receiver: string,
      _dstChainId: BigNumberish,
      _message: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setChainPair(
      _chainIdA: BigNumberish,
      _contractAddressA: string,
      _chainIdB: BigNumberish,
      _contractAddressB: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
