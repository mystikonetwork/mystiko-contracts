/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface ITokenMinterInterface extends utils.Interface {
  contractName: 'ITokenMinter';
  functions: {
    'acceptOwnership()': FunctionFragment;
    'addLocalTokenMessenger(address)': FunctionFragment;
    'burn(address,uint256)': FunctionFragment;
    'burnLimitsPerMessage(address)': FunctionFragment;
    'getLocalToken(uint32,bytes32)': FunctionFragment;
    'linkTokenPair(address,uint32,bytes32)': FunctionFragment;
    'localTokenMessenger()': FunctionFragment;
    'mint(uint32,bytes32,address,uint256)': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'pauser()': FunctionFragment;
    'pendingOwner()': FunctionFragment;
    'remoteTokensToLocalTokens(bytes32)': FunctionFragment;
    'removeLocalTokenMessenger()': FunctionFragment;
    'setMaxBurnAmountPerMessage(address,uint256)': FunctionFragment;
    'setTokenController(address)': FunctionFragment;
    'tokenController()': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unlinkTokenPair(address,uint32,bytes32)': FunctionFragment;
    'unpause()': FunctionFragment;
    'updatePauser(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addLocalTokenMessenger', values: [string]): string;
  encodeFunctionData(functionFragment: 'burn', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'burnLimitsPerMessage', values: [string]): string;
  encodeFunctionData(functionFragment: 'getLocalToken', values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'linkTokenPair', values: [string, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'localTokenMessenger', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'mint',
    values: [BigNumberish, BytesLike, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pauser', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'remoteTokensToLocalTokens', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'removeLocalTokenMessenger', values?: undefined): string;
  encodeFunctionData(functionFragment: 'setMaxBurnAmountPerMessage', values: [string, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setTokenController', values: [string]): string;
  encodeFunctionData(functionFragment: 'tokenController', values?: undefined): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'unlinkTokenPair', values: [string, BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updatePauser', values: [string]): string;

  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addLocalTokenMessenger', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'burnLimitsPerMessage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLocalToken', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'linkTokenPair', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'localTokenMessenger', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'remoteTokensToLocalTokens', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeLocalTokenMessenger', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxBurnAmountPerMessage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setTokenController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'tokenController', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unlinkTokenPair', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePauser', data: BytesLike): Result;

  events: {
    'LocalTokenMessengerAdded(address)': EventFragment;
    'LocalTokenMessengerRemoved(address)': EventFragment;
    'OwnershipTransferStarted(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Pause()': EventFragment;
    'PauserChanged(address)': EventFragment;
    'SetBurnLimitPerMessage(address,uint256)': EventFragment;
    'SetTokenController(address)': EventFragment;
    'TokenPairLinked(address,uint32,bytes32)': EventFragment;
    'TokenPairUnlinked(address,uint32,bytes32)': EventFragment;
    'Unpause()': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'LocalTokenMessengerAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LocalTokenMessengerRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Pause'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PauserChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetBurnLimitPerMessage'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SetTokenController'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenPairLinked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'TokenPairUnlinked'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpause'): EventFragment;
}

export type LocalTokenMessengerAddedEvent = TypedEvent<[string], { localTokenMessenger: string }>;

export type LocalTokenMessengerAddedEventFilter = TypedEventFilter<LocalTokenMessengerAddedEvent>;

export type LocalTokenMessengerRemovedEvent = TypedEvent<[string], { localTokenMessenger: string }>;

export type LocalTokenMessengerRemovedEventFilter = TypedEventFilter<LocalTokenMessengerRemovedEvent>;

export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferStartedEventFilter = TypedEventFilter<OwnershipTransferStartedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export type PauseEvent = TypedEvent<[], {}>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export type PauserChangedEvent = TypedEvent<[string], { newAddress: string }>;

export type PauserChangedEventFilter = TypedEventFilter<PauserChangedEvent>;

export type SetBurnLimitPerMessageEvent = TypedEvent<
  [string, BigNumber],
  { token: string; burnLimitPerMessage: BigNumber }
>;

export type SetBurnLimitPerMessageEventFilter = TypedEventFilter<SetBurnLimitPerMessageEvent>;

export type SetTokenControllerEvent = TypedEvent<[string], { tokenController: string }>;

export type SetTokenControllerEventFilter = TypedEventFilter<SetTokenControllerEvent>;

export type TokenPairLinkedEvent = TypedEvent<
  [string, number, string],
  { localToken: string; remoteDomain: number; remoteToken: string }
>;

export type TokenPairLinkedEventFilter = TypedEventFilter<TokenPairLinkedEvent>;

export type TokenPairUnlinkedEvent = TypedEvent<
  [string, number, string],
  { localToken: string; remoteDomain: number; remoteToken: string }
>;

export type TokenPairUnlinkedEventFilter = TypedEventFilter<TokenPairUnlinkedEvent>;

export type UnpauseEvent = TypedEvent<[], {}>;

export type UnpauseEventFilter = TypedEventFilter<UnpauseEvent>;

export interface ITokenMinter extends BaseContract {
  contractName: 'ITokenMinter';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITokenMinterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addLocalTokenMessenger(
      newLocalTokenMessenger: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    burn(
      burnToken: string,
      burnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    burnLimitsPerMessage(token: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    getLocalToken(
      remoteDomain: BigNumberish,
      remoteToken: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    linkTokenPair(
      localToken: string,
      remoteDomain: BigNumberish,
      remoteToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    localTokenMessenger(overrides?: CallOverrides): Promise<[string]>;

    mint(
      sourceDomain: BigNumberish,
      burnToken: BytesLike,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pauser(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    remoteTokensToLocalTokens(sourceIdHash: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    removeLocalTokenMessenger(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMaxBurnAmountPerMessage(
      localToken: string,
      burnLimitPerMessage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setTokenController(
      newTokenController: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    tokenController(overrides?: CallOverrides): Promise<[string]>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unlinkTokenPair(
      localToken: string,
      remoteDomain: BigNumberish,
      remoteToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    updatePauser(
      newPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  addLocalTokenMessenger(
    newLocalTokenMessenger: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  burn(
    burnToken: string,
    burnAmount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  burnLimitsPerMessage(token: string, overrides?: CallOverrides): Promise<BigNumber>;

  getLocalToken(
    remoteDomain: BigNumberish,
    remoteToken: BytesLike,
    overrides?: CallOverrides,
  ): Promise<string>;

  linkTokenPair(
    localToken: string,
    remoteDomain: BigNumberish,
    remoteToken: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  localTokenMessenger(overrides?: CallOverrides): Promise<string>;

  mint(
    sourceDomain: BigNumberish,
    burnToken: BytesLike,
    to: string,
    amount: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pauser(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  remoteTokensToLocalTokens(sourceIdHash: BytesLike, overrides?: CallOverrides): Promise<string>;

  removeLocalTokenMessenger(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMaxBurnAmountPerMessage(
    localToken: string,
    burnLimitPerMessage: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setTokenController(
    newTokenController: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  tokenController(overrides?: CallOverrides): Promise<string>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unlinkTokenPair(
    localToken: string,
    remoteDomain: BigNumberish,
    remoteToken: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  updatePauser(
    newPauser: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addLocalTokenMessenger(newLocalTokenMessenger: string, overrides?: CallOverrides): Promise<void>;

    burn(burnToken: string, burnAmount: BigNumberish, overrides?: CallOverrides): Promise<void>;

    burnLimitsPerMessage(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLocalToken(
      remoteDomain: BigNumberish,
      remoteToken: BytesLike,
      overrides?: CallOverrides,
    ): Promise<string>;

    linkTokenPair(
      localToken: string,
      remoteDomain: BigNumberish,
      remoteToken: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    localTokenMessenger(overrides?: CallOverrides): Promise<string>;

    mint(
      sourceDomain: BigNumberish,
      burnToken: BytesLike,
      to: string,
      amount: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pauser(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    remoteTokensToLocalTokens(sourceIdHash: BytesLike, overrides?: CallOverrides): Promise<string>;

    removeLocalTokenMessenger(overrides?: CallOverrides): Promise<void>;

    setMaxBurnAmountPerMessage(
      localToken: string,
      burnLimitPerMessage: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setTokenController(newTokenController: string, overrides?: CallOverrides): Promise<void>;

    tokenController(overrides?: CallOverrides): Promise<string>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    unlinkTokenPair(
      localToken: string,
      remoteDomain: BigNumberish,
      remoteToken: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updatePauser(newPauser: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'LocalTokenMessengerAdded(address)'(localTokenMessenger?: null): LocalTokenMessengerAddedEventFilter;
    LocalTokenMessengerAdded(localTokenMessenger?: null): LocalTokenMessengerAddedEventFilter;

    'LocalTokenMessengerRemoved(address)'(localTokenMessenger?: null): LocalTokenMessengerRemovedEventFilter;
    LocalTokenMessengerRemoved(localTokenMessenger?: null): LocalTokenMessengerRemovedEventFilter;

    'OwnershipTransferStarted(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'Pause()'(): PauseEventFilter;
    Pause(): PauseEventFilter;

    'PauserChanged(address)'(newAddress?: string | null): PauserChangedEventFilter;
    PauserChanged(newAddress?: string | null): PauserChangedEventFilter;

    'SetBurnLimitPerMessage(address,uint256)'(
      token?: string | null,
      burnLimitPerMessage?: null,
    ): SetBurnLimitPerMessageEventFilter;
    SetBurnLimitPerMessage(
      token?: string | null,
      burnLimitPerMessage?: null,
    ): SetBurnLimitPerMessageEventFilter;

    'SetTokenController(address)'(tokenController?: null): SetTokenControllerEventFilter;
    SetTokenController(tokenController?: null): SetTokenControllerEventFilter;

    'TokenPairLinked(address,uint32,bytes32)'(
      localToken?: null,
      remoteDomain?: null,
      remoteToken?: null,
    ): TokenPairLinkedEventFilter;
    TokenPairLinked(localToken?: null, remoteDomain?: null, remoteToken?: null): TokenPairLinkedEventFilter;

    'TokenPairUnlinked(address,uint32,bytes32)'(
      localToken?: null,
      remoteDomain?: null,
      remoteToken?: null,
    ): TokenPairUnlinkedEventFilter;
    TokenPairUnlinked(
      localToken?: null,
      remoteDomain?: null,
      remoteToken?: null,
    ): TokenPairUnlinkedEventFilter;

    'Unpause()'(): UnpauseEventFilter;
    Unpause(): UnpauseEventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    addLocalTokenMessenger(
      newLocalTokenMessenger: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    burn(
      burnToken: string,
      burnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    burnLimitsPerMessage(token: string, overrides?: CallOverrides): Promise<BigNumber>;

    getLocalToken(
      remoteDomain: BigNumberish,
      remoteToken: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    linkTokenPair(
      localToken: string,
      remoteDomain: BigNumberish,
      remoteToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    localTokenMessenger(overrides?: CallOverrides): Promise<BigNumber>;

    mint(
      sourceDomain: BigNumberish,
      burnToken: BytesLike,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pauser(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    remoteTokensToLocalTokens(sourceIdHash: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    removeLocalTokenMessenger(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMaxBurnAmountPerMessage(
      localToken: string,
      burnLimitPerMessage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setTokenController(
      newTokenController: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    tokenController(overrides?: CallOverrides): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unlinkTokenPair(
      localToken: string,
      remoteDomain: BigNumberish,
      remoteToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updatePauser(
      newPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addLocalTokenMessenger(
      newLocalTokenMessenger: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    burn(
      burnToken: string,
      burnAmount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    burnLimitsPerMessage(token: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getLocalToken(
      remoteDomain: BigNumberish,
      remoteToken: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    linkTokenPair(
      localToken: string,
      remoteDomain: BigNumberish,
      remoteToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    localTokenMessenger(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mint(
      sourceDomain: BigNumberish,
      burnToken: BytesLike,
      to: string,
      amount: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remoteTokensToLocalTokens(
      sourceIdHash: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    removeLocalTokenMessenger(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMaxBurnAmountPerMessage(
      localToken: string,
      burnLimitPerMessage: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setTokenController(
      newTokenController: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    tokenController(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unlinkTokenPair(
      localToken: string,
      remoteDomain: BigNumberish,
      remoteToken: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    updatePauser(
      newPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
