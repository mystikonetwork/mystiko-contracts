/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PayableOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface MockLZEndpointInterface extends utils.Interface {
  contractName: 'MockLZEndpoint';
  functions: {
    'addrToPackedBytes(address)': FunctionFragment;
    'blockNextMsg()': FunctionFragment;
    'estimateFees(uint16,address,bytes,bool,bytes)': FunctionFragment;
    'forceResumeReceive(uint16,bytes)': FunctionFragment;
    'getChainId()': FunctionFragment;
    'getConfig(uint16,uint16,address,uint256)': FunctionFragment;
    'getInboundNonce(uint16,bytes)': FunctionFragment;
    'getLengthOfQueue(uint16,bytes)': FunctionFragment;
    'getOutboundNonce(uint16,address)': FunctionFragment;
    'getReceiveLibraryAddress(address)': FunctionFragment;
    'getReceiveVersion(address)': FunctionFragment;
    'getSendLibraryAddress(address)': FunctionFragment;
    'getSendVersion(address)': FunctionFragment;
    'hasStoredPayload(uint16,bytes)': FunctionFragment;
    'inboundNonce(uint16,bytes)': FunctionFragment;
    'isReceivingPayload()': FunctionFragment;
    'isSendingPayload()': FunctionFragment;
    'lzEndpointLookup(address)': FunctionFragment;
    'mockBlockConfirmations()': FunctionFragment;
    'mockChainId()': FunctionFragment;
    'mockLayerZeroVersion()': FunctionFragment;
    'mockLibraryVersion()': FunctionFragment;
    'mockOracle()': FunctionFragment;
    'mockRelayer()': FunctionFragment;
    'mockStaticNativeFee()': FunctionFragment;
    'msgsToDeliver(uint16,bytes,uint256)': FunctionFragment;
    'nativeFee()': FunctionFragment;
    'outboundNonce(uint16,address)': FunctionFragment;
    'packedBytesToAddr(bytes)': FunctionFragment;
    'receivePayload(uint16,bytes,address,uint64,uint256,bytes)': FunctionFragment;
    'retryPayload(uint16,bytes,bytes)': FunctionFragment;
    'send(uint16,bytes,bytes,address,address,bytes)': FunctionFragment;
    'setConfig(uint16,uint16,uint256,bytes)': FunctionFragment;
    'setDestLzEndpoint(address,address)': FunctionFragment;
    'setEstimatedFees(uint256,uint256)': FunctionFragment;
    'setReceiveVersion(uint16)': FunctionFragment;
    'setSendVersion(uint16)': FunctionFragment;
    'storedPayload(uint16,bytes)': FunctionFragment;
    'zroFee()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'addrToPackedBytes', values: [string]): string;
  encodeFunctionData(functionFragment: 'blockNextMsg', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'estimateFees',
    values: [BigNumberish, string, BytesLike, boolean, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'forceResumeReceive', values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'getChainId', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'getConfig',
    values: [BigNumberish, BigNumberish, string, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'getInboundNonce', values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'getLengthOfQueue', values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'getOutboundNonce', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'getReceiveLibraryAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'getReceiveVersion', values: [string]): string;
  encodeFunctionData(functionFragment: 'getSendLibraryAddress', values: [string]): string;
  encodeFunctionData(functionFragment: 'getSendVersion', values: [string]): string;
  encodeFunctionData(functionFragment: 'hasStoredPayload', values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'inboundNonce', values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'isReceivingPayload', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isSendingPayload', values?: undefined): string;
  encodeFunctionData(functionFragment: 'lzEndpointLookup', values: [string]): string;
  encodeFunctionData(functionFragment: 'mockBlockConfirmations', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mockChainId', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mockLayerZeroVersion', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mockLibraryVersion', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mockOracle', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mockRelayer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'mockStaticNativeFee', values?: undefined): string;
  encodeFunctionData(
    functionFragment: 'msgsToDeliver',
    values: [BigNumberish, BytesLike, BigNumberish],
  ): string;
  encodeFunctionData(functionFragment: 'nativeFee', values?: undefined): string;
  encodeFunctionData(functionFragment: 'outboundNonce', values: [BigNumberish, string]): string;
  encodeFunctionData(functionFragment: 'packedBytesToAddr', values: [BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'receivePayload',
    values: [BigNumberish, BytesLike, string, BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'retryPayload', values: [BigNumberish, BytesLike, BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'send',
    values: [BigNumberish, BytesLike, BytesLike, string, string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'setConfig',
    values: [BigNumberish, BigNumberish, BigNumberish, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'setDestLzEndpoint', values: [string, string]): string;
  encodeFunctionData(functionFragment: 'setEstimatedFees', values: [BigNumberish, BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setReceiveVersion', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setSendVersion', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'storedPayload', values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(functionFragment: 'zroFee', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'addrToPackedBytes', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'blockNextMsg', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'estimateFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'forceResumeReceive', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getChainId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getInboundNonce', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getLengthOfQueue', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getOutboundNonce', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReceiveLibraryAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getReceiveVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSendLibraryAddress', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getSendVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasStoredPayload', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'inboundNonce', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isReceivingPayload', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isSendingPayload', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'lzEndpointLookup', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mockBlockConfirmations', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mockChainId', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mockLayerZeroVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mockLibraryVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mockOracle', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mockRelayer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'mockStaticNativeFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'msgsToDeliver', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nativeFee', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'outboundNonce', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'packedBytesToAddr', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'receivePayload', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'retryPayload', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'send', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setConfig', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setDestLzEndpoint', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setEstimatedFees', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setReceiveVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSendVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'storedPayload', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'zroFee', data: BytesLike): Result;

  events: {
    'PayloadCleared(uint16,bytes,uint64,address)': EventFragment;
    'PayloadStored(uint16,bytes,address,uint64,bytes,bytes)': EventFragment;
    'UaForceResumeReceive(uint16,bytes)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'PayloadCleared'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PayloadStored'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'UaForceResumeReceive'): EventFragment;
}

export type PayloadClearedEvent = TypedEvent<
  [number, string, BigNumber, string],
  {
    srcChainId: number;
    srcAddress: string;
    nonce: BigNumber;
    dstAddress: string;
  }
>;

export type PayloadClearedEventFilter = TypedEventFilter<PayloadClearedEvent>;

export type PayloadStoredEvent = TypedEvent<
  [number, string, string, BigNumber, string, string],
  {
    srcChainId: number;
    srcAddress: string;
    dstAddress: string;
    nonce: BigNumber;
    payload: string;
    reason: string;
  }
>;

export type PayloadStoredEventFilter = TypedEventFilter<PayloadStoredEvent>;

export type UaForceResumeReceiveEvent = TypedEvent<[number, string], { chainId: number; srcAddress: string }>;

export type UaForceResumeReceiveEventFilter = TypedEventFilter<UaForceResumeReceiveEvent>;

export interface MockLZEndpoint extends BaseContract {
  contractName: 'MockLZEndpoint';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MockLZEndpointInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    addrToPackedBytes(_a: string, overrides?: CallOverrides): Promise<[string]>;

    blockNextMsg(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    estimateFees(
      arg0: BigNumberish,
      arg1: string,
      _payload: BytesLike,
      arg3: boolean,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { _nativeFee: BigNumber; _zroFee: BigNumber }>;

    forceResumeReceive(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getChainId(overrides?: CallOverrides): Promise<[number]>;

    getConfig(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<[string]>;

    getInboundNonce(
      _chainID: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getLengthOfQueue(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getOutboundNonce(
      _chainID: BigNumberish,
      _srcAddress: string,
      overrides?: CallOverrides,
    ): Promise<[BigNumber]>;

    getReceiveLibraryAddress(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    getReceiveVersion(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    getSendLibraryAddress(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    getSendVersion(arg0: string, overrides?: CallOverrides): Promise<[number]>;

    hasStoredPayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[boolean]>;

    inboundNonce(arg0: BigNumberish, arg1: BytesLike, overrides?: CallOverrides): Promise<[BigNumber]>;

    isReceivingPayload(overrides?: CallOverrides): Promise<[boolean]>;

    isSendingPayload(overrides?: CallOverrides): Promise<[boolean]>;

    lzEndpointLookup(arg0: string, overrides?: CallOverrides): Promise<[string]>;

    mockBlockConfirmations(overrides?: CallOverrides): Promise<[BigNumber]>;

    mockChainId(overrides?: CallOverrides): Promise<[number]>;

    mockLayerZeroVersion(overrides?: CallOverrides): Promise<[number]>;

    mockLibraryVersion(overrides?: CallOverrides): Promise<[number]>;

    mockOracle(overrides?: CallOverrides): Promise<[string]>;

    mockRelayer(overrides?: CallOverrides): Promise<[string]>;

    mockStaticNativeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    msgsToDeliver(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, string] & {
        dstAddress: string;
        nonce: BigNumber;
        payload: string;
      }
    >;

    nativeFee(overrides?: CallOverrides): Promise<[BigNumber]>;

    outboundNonce(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<[BigNumber]>;

    packedBytesToAddr(_b: BytesLike, overrides?: CallOverrides): Promise<[string]>;

    receivePayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _dstAddress: string,
      _nonce: BigNumberish,
      arg4: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    retryPayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    send(
      _chainId: BigNumberish,
      _destination: BytesLike,
      _payload: BytesLike,
      arg3: string,
      arg4: string,
      _adapterParams: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setConfig(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setDestLzEndpoint(
      destAddr: string,
      lzEndpointAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setEstimatedFees(
      _nativeFee: BigNumberish,
      _zroFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setReceiveVersion(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setSendVersion(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    storedPayload(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, string] & {
        payloadLength: BigNumber;
        dstAddress: string;
        payloadHash: string;
      }
    >;

    zroFee(overrides?: CallOverrides): Promise<[BigNumber]>;
  };

  addrToPackedBytes(_a: string, overrides?: CallOverrides): Promise<string>;

  blockNextMsg(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  estimateFees(
    arg0: BigNumberish,
    arg1: string,
    _payload: BytesLike,
    arg3: boolean,
    arg4: BytesLike,
    overrides?: CallOverrides,
  ): Promise<[BigNumber, BigNumber] & { _nativeFee: BigNumber; _zroFee: BigNumber }>;

  forceResumeReceive(
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getChainId(overrides?: CallOverrides): Promise<number>;

  getConfig(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: string,
    arg3: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<string>;

  getInboundNonce(
    _chainID: BigNumberish,
    _srcAddress: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getLengthOfQueue(
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getOutboundNonce(
    _chainID: BigNumberish,
    _srcAddress: string,
    overrides?: CallOverrides,
  ): Promise<BigNumber>;

  getReceiveLibraryAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

  getReceiveVersion(arg0: string, overrides?: CallOverrides): Promise<number>;

  getSendLibraryAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

  getSendVersion(arg0: string, overrides?: CallOverrides): Promise<number>;

  hasStoredPayload(
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    overrides?: CallOverrides,
  ): Promise<boolean>;

  inboundNonce(arg0: BigNumberish, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

  isReceivingPayload(overrides?: CallOverrides): Promise<boolean>;

  isSendingPayload(overrides?: CallOverrides): Promise<boolean>;

  lzEndpointLookup(arg0: string, overrides?: CallOverrides): Promise<string>;

  mockBlockConfirmations(overrides?: CallOverrides): Promise<BigNumber>;

  mockChainId(overrides?: CallOverrides): Promise<number>;

  mockLayerZeroVersion(overrides?: CallOverrides): Promise<number>;

  mockLibraryVersion(overrides?: CallOverrides): Promise<number>;

  mockOracle(overrides?: CallOverrides): Promise<string>;

  mockRelayer(overrides?: CallOverrides): Promise<string>;

  mockStaticNativeFee(overrides?: CallOverrides): Promise<BigNumber>;

  msgsToDeliver(
    arg0: BigNumberish,
    arg1: BytesLike,
    arg2: BigNumberish,
    overrides?: CallOverrides,
  ): Promise<
    [string, BigNumber, string] & {
      dstAddress: string;
      nonce: BigNumber;
      payload: string;
    }
  >;

  nativeFee(overrides?: CallOverrides): Promise<BigNumber>;

  outboundNonce(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

  packedBytesToAddr(_b: BytesLike, overrides?: CallOverrides): Promise<string>;

  receivePayload(
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    _dstAddress: string,
    _nonce: BigNumberish,
    arg4: BigNumberish,
    _payload: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  retryPayload(
    _srcChainId: BigNumberish,
    _srcAddress: BytesLike,
    _payload: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  send(
    _chainId: BigNumberish,
    _destination: BytesLike,
    _payload: BytesLike,
    arg3: string,
    arg4: string,
    _adapterParams: BytesLike,
    overrides?: PayableOverrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setConfig(
    arg0: BigNumberish,
    arg1: BigNumberish,
    arg2: BigNumberish,
    arg3: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setDestLzEndpoint(
    destAddr: string,
    lzEndpointAddr: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setEstimatedFees(
    _nativeFee: BigNumberish,
    _zroFee: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setReceiveVersion(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setSendVersion(
    arg0: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  storedPayload(
    arg0: BigNumberish,
    arg1: BytesLike,
    overrides?: CallOverrides,
  ): Promise<
    [BigNumber, string, string] & {
      payloadLength: BigNumber;
      dstAddress: string;
      payloadHash: string;
    }
  >;

  zroFee(overrides?: CallOverrides): Promise<BigNumber>;

  callStatic: {
    addrToPackedBytes(_a: string, overrides?: CallOverrides): Promise<string>;

    blockNextMsg(overrides?: CallOverrides): Promise<void>;

    estimateFees(
      arg0: BigNumberish,
      arg1: string,
      _payload: BytesLike,
      arg3: boolean,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<[BigNumber, BigNumber] & { _nativeFee: BigNumber; _zroFee: BigNumber }>;

    forceResumeReceive(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    getChainId(overrides?: CallOverrides): Promise<number>;

    getConfig(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<string>;

    getInboundNonce(
      _chainID: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLengthOfQueue(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getOutboundNonce(
      _chainID: BigNumberish,
      _srcAddress: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getReceiveLibraryAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

    getReceiveVersion(arg0: string, overrides?: CallOverrides): Promise<number>;

    getSendLibraryAddress(arg0: string, overrides?: CallOverrides): Promise<string>;

    getSendVersion(arg0: string, overrides?: CallOverrides): Promise<number>;

    hasStoredPayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    inboundNonce(arg0: BigNumberish, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isReceivingPayload(overrides?: CallOverrides): Promise<boolean>;

    isSendingPayload(overrides?: CallOverrides): Promise<boolean>;

    lzEndpointLookup(arg0: string, overrides?: CallOverrides): Promise<string>;

    mockBlockConfirmations(overrides?: CallOverrides): Promise<BigNumber>;

    mockChainId(overrides?: CallOverrides): Promise<number>;

    mockLayerZeroVersion(overrides?: CallOverrides): Promise<number>;

    mockLibraryVersion(overrides?: CallOverrides): Promise<number>;

    mockOracle(overrides?: CallOverrides): Promise<string>;

    mockRelayer(overrides?: CallOverrides): Promise<string>;

    mockStaticNativeFee(overrides?: CallOverrides): Promise<BigNumber>;

    msgsToDeliver(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<
      [string, BigNumber, string] & {
        dstAddress: string;
        nonce: BigNumber;
        payload: string;
      }
    >;

    nativeFee(overrides?: CallOverrides): Promise<BigNumber>;

    outboundNonce(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    packedBytesToAddr(_b: BytesLike, overrides?: CallOverrides): Promise<string>;

    receivePayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _dstAddress: string,
      _nonce: BigNumberish,
      arg4: BigNumberish,
      _payload: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    retryPayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _payload: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    send(
      _chainId: BigNumberish,
      _destination: BytesLike,
      _payload: BytesLike,
      arg3: string,
      arg4: string,
      _adapterParams: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setConfig(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    setDestLzEndpoint(destAddr: string, lzEndpointAddr: string, overrides?: CallOverrides): Promise<void>;

    setEstimatedFees(
      _nativeFee: BigNumberish,
      _zroFee: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<void>;

    setReceiveVersion(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setSendVersion(arg0: BigNumberish, overrides?: CallOverrides): Promise<void>;

    storedPayload(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<
      [BigNumber, string, string] & {
        payloadLength: BigNumber;
        dstAddress: string;
        payloadHash: string;
      }
    >;

    zroFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  filters: {
    'PayloadCleared(uint16,bytes,uint64,address)'(
      srcChainId?: null,
      srcAddress?: null,
      nonce?: null,
      dstAddress?: null,
    ): PayloadClearedEventFilter;
    PayloadCleared(
      srcChainId?: null,
      srcAddress?: null,
      nonce?: null,
      dstAddress?: null,
    ): PayloadClearedEventFilter;

    'PayloadStored(uint16,bytes,address,uint64,bytes,bytes)'(
      srcChainId?: null,
      srcAddress?: null,
      dstAddress?: null,
      nonce?: null,
      payload?: null,
      reason?: null,
    ): PayloadStoredEventFilter;
    PayloadStored(
      srcChainId?: null,
      srcAddress?: null,
      dstAddress?: null,
      nonce?: null,
      payload?: null,
      reason?: null,
    ): PayloadStoredEventFilter;

    'UaForceResumeReceive(uint16,bytes)'(chainId?: null, srcAddress?: null): UaForceResumeReceiveEventFilter;
    UaForceResumeReceive(chainId?: null, srcAddress?: null): UaForceResumeReceiveEventFilter;
  };

  estimateGas: {
    addrToPackedBytes(_a: string, overrides?: CallOverrides): Promise<BigNumber>;

    blockNextMsg(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    estimateFees(
      arg0: BigNumberish,
      arg1: string,
      _payload: BytesLike,
      arg3: boolean,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    forceResumeReceive(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getChainId(overrides?: CallOverrides): Promise<BigNumber>;

    getConfig(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getInboundNonce(
      _chainID: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getLengthOfQueue(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getOutboundNonce(
      _chainID: BigNumberish,
      _srcAddress: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    getReceiveLibraryAddress(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getReceiveVersion(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getSendLibraryAddress(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    getSendVersion(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    hasStoredPayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    inboundNonce(arg0: BigNumberish, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    isReceivingPayload(overrides?: CallOverrides): Promise<BigNumber>;

    isSendingPayload(overrides?: CallOverrides): Promise<BigNumber>;

    lzEndpointLookup(arg0: string, overrides?: CallOverrides): Promise<BigNumber>;

    mockBlockConfirmations(overrides?: CallOverrides): Promise<BigNumber>;

    mockChainId(overrides?: CallOverrides): Promise<BigNumber>;

    mockLayerZeroVersion(overrides?: CallOverrides): Promise<BigNumber>;

    mockLibraryVersion(overrides?: CallOverrides): Promise<BigNumber>;

    mockOracle(overrides?: CallOverrides): Promise<BigNumber>;

    mockRelayer(overrides?: CallOverrides): Promise<BigNumber>;

    mockStaticNativeFee(overrides?: CallOverrides): Promise<BigNumber>;

    msgsToDeliver(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    nativeFee(overrides?: CallOverrides): Promise<BigNumber>;

    outboundNonce(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<BigNumber>;

    packedBytesToAddr(_b: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    receivePayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _dstAddress: string,
      _nonce: BigNumberish,
      arg4: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    retryPayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    send(
      _chainId: BigNumberish,
      _destination: BytesLike,
      _payload: BytesLike,
      arg3: string,
      arg4: string,
      _adapterParams: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setConfig(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setDestLzEndpoint(
      destAddr: string,
      lzEndpointAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setEstimatedFees(
      _nativeFee: BigNumberish,
      _zroFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setReceiveVersion(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setSendVersion(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    storedPayload(arg0: BigNumberish, arg1: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    zroFee(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    addrToPackedBytes(_a: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    blockNextMsg(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    estimateFees(
      arg0: BigNumberish,
      arg1: string,
      _payload: BytesLike,
      arg3: boolean,
      arg4: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    forceResumeReceive(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getConfig(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: string,
      arg3: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getInboundNonce(
      _chainID: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getLengthOfQueue(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getOutboundNonce(
      _chainID: BigNumberish,
      _srcAddress: string,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    getReceiveLibraryAddress(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getReceiveVersion(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSendLibraryAddress(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getSendVersion(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    hasStoredPayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    inboundNonce(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    isReceivingPayload(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isSendingPayload(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    lzEndpointLookup(arg0: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockBlockConfirmations(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockChainId(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockLayerZeroVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockLibraryVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockOracle(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockRelayer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    mockStaticNativeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    msgsToDeliver(
      arg0: BigNumberish,
      arg1: BytesLike,
      arg2: BigNumberish,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    nativeFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    outboundNonce(arg0: BigNumberish, arg1: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    packedBytesToAddr(_b: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receivePayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _dstAddress: string,
      _nonce: BigNumberish,
      arg4: BigNumberish,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    retryPayload(
      _srcChainId: BigNumberish,
      _srcAddress: BytesLike,
      _payload: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    send(
      _chainId: BigNumberish,
      _destination: BytesLike,
      _payload: BytesLike,
      arg3: string,
      arg4: string,
      _adapterParams: BytesLike,
      overrides?: PayableOverrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setConfig(
      arg0: BigNumberish,
      arg1: BigNumberish,
      arg2: BigNumberish,
      arg3: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setDestLzEndpoint(
      destAddr: string,
      lzEndpointAddr: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setEstimatedFees(
      _nativeFee: BigNumberish,
      _zroFee: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setReceiveVersion(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setSendVersion(
      arg0: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    storedPayload(
      arg0: BigNumberish,
      arg1: BytesLike,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;

    zroFee(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
