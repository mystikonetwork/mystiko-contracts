/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface MystikoDAOAccessControlInterface extends utils.Interface {
  contractName: 'MystikoDAOAccessControl';
  functions: {
    'center()': FunctionFragment;
    'grantRole(address)': FunctionFragment;
    'grantRoles(address[])': FunctionFragment;
    'hasRole(address)': FunctionFragment;
    'revokeRole(address)': FunctionFragment;
    'revokeRoles(address[])': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'center', values?: undefined): string;
  encodeFunctionData(functionFragment: 'grantRole', values: [string]): string;
  encodeFunctionData(functionFragment: 'grantRoles', values: [string[]]): string;
  encodeFunctionData(functionFragment: 'hasRole', values: [string]): string;
  encodeFunctionData(functionFragment: 'revokeRole', values: [string]): string;
  encodeFunctionData(functionFragment: 'revokeRoles', values: [string[]]): string;

  decodeFunctionResult(functionFragment: 'center', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'grantRoles', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'hasRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRole', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'revokeRoles', data: BytesLike): Result;

  events: {
    'RoleGranted(address)': EventFragment;
    'RoleRevoked(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'RoleGranted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RoleRevoked'): EventFragment;
}

export type RoleGrantedEvent = TypedEvent<[string], { account: string }>;

export type RoleGrantedEventFilter = TypedEventFilter<RoleGrantedEvent>;

export type RoleRevokedEvent = TypedEvent<[string], { account: string }>;

export type RoleRevokedEventFilter = TypedEventFilter<RoleRevokedEvent>;

export interface MystikoDAOAccessControl extends BaseContract {
  contractName: 'MystikoDAOAccessControl';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MystikoDAOAccessControlInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    center(overrides?: CallOverrides): Promise<[string]>;

    grantRole(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    grantRoles(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    hasRole(_account: string, overrides?: CallOverrides): Promise<[boolean]>;

    revokeRole(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    revokeRoles(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  center(overrides?: CallOverrides): Promise<string>;

  grantRole(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  grantRoles(
    _accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  hasRole(_account: string, overrides?: CallOverrides): Promise<boolean>;

  revokeRole(
    _account: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  revokeRoles(
    _accounts: string[],
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    center(overrides?: CallOverrides): Promise<string>;

    grantRole(_account: string, overrides?: CallOverrides): Promise<void>;

    grantRoles(_accounts: string[], overrides?: CallOverrides): Promise<void>;

    hasRole(_account: string, overrides?: CallOverrides): Promise<boolean>;

    revokeRole(_account: string, overrides?: CallOverrides): Promise<void>;

    revokeRoles(_accounts: string[], overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'RoleGranted(address)'(account?: string | null): RoleGrantedEventFilter;
    RoleGranted(account?: string | null): RoleGrantedEventFilter;

    'RoleRevoked(address)'(account?: string | null): RoleRevokedEventFilter;
    RoleRevoked(account?: string | null): RoleRevokedEventFilter;
  };

  estimateGas: {
    center(overrides?: CallOverrides): Promise<BigNumber>;

    grantRole(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    grantRoles(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    hasRole(_account: string, overrides?: CallOverrides): Promise<BigNumber>;

    revokeRole(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    revokeRoles(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    center(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    grantRole(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    grantRoles(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    hasRole(_account: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    revokeRole(
      _account: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    revokeRoles(
      _accounts: string[],
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
