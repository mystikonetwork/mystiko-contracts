/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface ITokenMessengerInterface extends utils.Interface {
  contractName: 'ITokenMessenger';
  functions: {
    'acceptOwnership()': FunctionFragment;
    'addLocalMinter(address)': FunctionFragment;
    'addRemoteTokenMessenger(uint32,bytes32)': FunctionFragment;
    'depositForBurn(uint256,uint32,bytes32,address)': FunctionFragment;
    'depositForBurnWithCaller(uint256,uint32,bytes32,address,bytes32)': FunctionFragment;
    'handleReceiveMessage(uint32,bytes32,bytes)': FunctionFragment;
    'localMessageTransmitter()': FunctionFragment;
    'localMinter()': FunctionFragment;
    'messageBodyVersion()': FunctionFragment;
    'owner()': FunctionFragment;
    'pendingOwner()': FunctionFragment;
    'remoteTokenMessengers(uint32)': FunctionFragment;
    'removeLocalMinter()': FunctionFragment;
    'removeRemoteTokenMessenger(uint32)': FunctionFragment;
    'replaceDepositForBurn(bytes,bytes,bytes32,bytes32)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'addLocalMinter', values: [string]): string;
  encodeFunctionData(functionFragment: 'addRemoteTokenMessenger', values: [BigNumberish, BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'depositForBurn',
    values: [BigNumberish, BigNumberish, BytesLike, string],
  ): string;
  encodeFunctionData(
    functionFragment: 'depositForBurnWithCaller',
    values: [BigNumberish, BigNumberish, BytesLike, string, BytesLike],
  ): string;
  encodeFunctionData(
    functionFragment: 'handleReceiveMessage',
    values: [BigNumberish, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'localMessageTransmitter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'localMinter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'messageBodyVersion', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'remoteTokenMessengers', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'removeLocalMinter', values?: undefined): string;
  encodeFunctionData(functionFragment: 'removeRemoteTokenMessenger', values: [BigNumberish]): string;
  encodeFunctionData(
    functionFragment: 'replaceDepositForBurn',
    values: [BytesLike, BytesLike, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;

  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addLocalMinter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'addRemoteTokenMessenger', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositForBurn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'depositForBurnWithCaller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'handleReceiveMessage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'localMessageTransmitter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'localMinter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'messageBodyVersion', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'remoteTokenMessengers', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeLocalMinter', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'removeRemoteTokenMessenger', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'replaceDepositForBurn', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;

  events: {
    'DepositForBurn(uint64,address,uint256,address,bytes32,uint32,bytes32,bytes32)': EventFragment;
    'LocalMinterAdded(address)': EventFragment;
    'LocalMinterRemoved(address)': EventFragment;
    'MintAndWithdraw(address,uint256,address)': EventFragment;
    'OwnershipTransferStarted(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'RemoteTokenMessengerAdded(uint32,bytes32)': EventFragment;
    'RemoteTokenMessengerRemoved(uint32,bytes32)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'DepositForBurn'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LocalMinterAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'LocalMinterRemoved'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MintAndWithdraw'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoteTokenMessengerAdded'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'RemoteTokenMessengerRemoved'): EventFragment;
}

export type DepositForBurnEvent = TypedEvent<
  [BigNumber, string, BigNumber, string, string, number, string, string],
  {
    nonce: BigNumber;
    burnToken: string;
    amount: BigNumber;
    depositor: string;
    mintRecipient: string;
    destinationDomain: number;
    destinationTokenMessenger: string;
    destinationCaller: string;
  }
>;

export type DepositForBurnEventFilter = TypedEventFilter<DepositForBurnEvent>;

export type LocalMinterAddedEvent = TypedEvent<[string], { localMinter: string }>;

export type LocalMinterAddedEventFilter = TypedEventFilter<LocalMinterAddedEvent>;

export type LocalMinterRemovedEvent = TypedEvent<[string], { localMinter: string }>;

export type LocalMinterRemovedEventFilter = TypedEventFilter<LocalMinterRemovedEvent>;

export type MintAndWithdrawEvent = TypedEvent<
  [string, BigNumber, string],
  { mintRecipient: string; amount: BigNumber; mintToken: string }
>;

export type MintAndWithdrawEventFilter = TypedEventFilter<MintAndWithdrawEvent>;

export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferStartedEventFilter = TypedEventFilter<OwnershipTransferStartedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export type RemoteTokenMessengerAddedEvent = TypedEvent<
  [number, string],
  { domain: number; tokenMessenger: string }
>;

export type RemoteTokenMessengerAddedEventFilter = TypedEventFilter<RemoteTokenMessengerAddedEvent>;

export type RemoteTokenMessengerRemovedEvent = TypedEvent<
  [number, string],
  { domain: number; tokenMessenger: string }
>;

export type RemoteTokenMessengerRemovedEventFilter = TypedEventFilter<RemoteTokenMessengerRemovedEvent>;

export interface ITokenMessenger extends BaseContract {
  contractName: 'ITokenMessenger';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: ITokenMessengerInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addLocalMinter(
      newLocalMinter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    addRemoteTokenMessenger(
      domain: BigNumberish,
      tokenMessenger: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositForBurn(
      amount: BigNumberish,
      destinationDomain: BigNumberish,
      mintRecipient: BytesLike,
      burnToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    depositForBurnWithCaller(
      amount: BigNumberish,
      destinationDomain: BigNumberish,
      mintRecipient: BytesLike,
      burnToken: string,
      destinationCaller: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    handleReceiveMessage(
      remoteDomain: BigNumberish,
      sender: BytesLike,
      messageBody: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    localMessageTransmitter(overrides?: CallOverrides): Promise<[string]>;

    localMinter(overrides?: CallOverrides): Promise<[string]>;

    messageBodyVersion(overrides?: CallOverrides): Promise<[number]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    remoteTokenMessengers(domain: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    removeLocalMinter(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    removeRemoteTokenMessenger(
      domain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    replaceDepositForBurn(
      originalMessage: BytesLike,
      originalAttestation: BytesLike,
      newDestinationCaller: BytesLike,
      newMintRecipient: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;
  };

  acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  addLocalMinter(
    newLocalMinter: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  addRemoteTokenMessenger(
    domain: BigNumberish,
    tokenMessenger: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositForBurn(
    amount: BigNumberish,
    destinationDomain: BigNumberish,
    mintRecipient: BytesLike,
    burnToken: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  depositForBurnWithCaller(
    amount: BigNumberish,
    destinationDomain: BigNumberish,
    mintRecipient: BytesLike,
    burnToken: string,
    destinationCaller: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  handleReceiveMessage(
    remoteDomain: BigNumberish,
    sender: BytesLike,
    messageBody: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  localMessageTransmitter(overrides?: CallOverrides): Promise<string>;

  localMinter(overrides?: CallOverrides): Promise<string>;

  messageBodyVersion(overrides?: CallOverrides): Promise<number>;

  owner(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  remoteTokenMessengers(domain: BigNumberish, overrides?: CallOverrides): Promise<string>;

  removeLocalMinter(
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  removeRemoteTokenMessenger(
    domain: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  replaceDepositForBurn(
    originalMessage: BytesLike,
    originalAttestation: BytesLike,
    newDestinationCaller: BytesLike,
    newMintRecipient: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    addLocalMinter(newLocalMinter: string, overrides?: CallOverrides): Promise<void>;

    addRemoteTokenMessenger(
      domain: BigNumberish,
      tokenMessenger: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    depositForBurn(
      amount: BigNumberish,
      destinationDomain: BigNumberish,
      mintRecipient: BytesLike,
      burnToken: string,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    depositForBurnWithCaller(
      amount: BigNumberish,
      destinationDomain: BigNumberish,
      mintRecipient: BytesLike,
      burnToken: string,
      destinationCaller: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    handleReceiveMessage(
      remoteDomain: BigNumberish,
      sender: BytesLike,
      messageBody: BytesLike,
      overrides?: CallOverrides,
    ): Promise<boolean>;

    localMessageTransmitter(overrides?: CallOverrides): Promise<string>;

    localMinter(overrides?: CallOverrides): Promise<string>;

    messageBodyVersion(overrides?: CallOverrides): Promise<number>;

    owner(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    remoteTokenMessengers(domain: BigNumberish, overrides?: CallOverrides): Promise<string>;

    removeLocalMinter(overrides?: CallOverrides): Promise<void>;

    removeRemoteTokenMessenger(domain: BigNumberish, overrides?: CallOverrides): Promise<void>;

    replaceDepositForBurn(
      originalMessage: BytesLike,
      originalAttestation: BytesLike,
      newDestinationCaller: BytesLike,
      newMintRecipient: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;
  };

  filters: {
    'DepositForBurn(uint64,address,uint256,address,bytes32,uint32,bytes32,bytes32)'(
      nonce?: BigNumberish | null,
      burnToken?: string | null,
      amount?: null,
      depositor?: string | null,
      mintRecipient?: null,
      destinationDomain?: null,
      destinationTokenMessenger?: null,
      destinationCaller?: null,
    ): DepositForBurnEventFilter;
    DepositForBurn(
      nonce?: BigNumberish | null,
      burnToken?: string | null,
      amount?: null,
      depositor?: string | null,
      mintRecipient?: null,
      destinationDomain?: null,
      destinationTokenMessenger?: null,
      destinationCaller?: null,
    ): DepositForBurnEventFilter;

    'LocalMinterAdded(address)'(localMinter?: null): LocalMinterAddedEventFilter;
    LocalMinterAdded(localMinter?: null): LocalMinterAddedEventFilter;

    'LocalMinterRemoved(address)'(localMinter?: null): LocalMinterRemovedEventFilter;
    LocalMinterRemoved(localMinter?: null): LocalMinterRemovedEventFilter;

    'MintAndWithdraw(address,uint256,address)'(
      mintRecipient?: string | null,
      amount?: null,
      mintToken?: string | null,
    ): MintAndWithdrawEventFilter;
    MintAndWithdraw(
      mintRecipient?: string | null,
      amount?: null,
      mintToken?: string | null,
    ): MintAndWithdrawEventFilter;

    'OwnershipTransferStarted(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'RemoteTokenMessengerAdded(uint32,bytes32)'(
      domain?: null,
      tokenMessenger?: null,
    ): RemoteTokenMessengerAddedEventFilter;
    RemoteTokenMessengerAdded(domain?: null, tokenMessenger?: null): RemoteTokenMessengerAddedEventFilter;

    'RemoteTokenMessengerRemoved(uint32,bytes32)'(
      domain?: null,
      tokenMessenger?: null,
    ): RemoteTokenMessengerRemovedEventFilter;
    RemoteTokenMessengerRemoved(domain?: null, tokenMessenger?: null): RemoteTokenMessengerRemovedEventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    addLocalMinter(
      newLocalMinter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    addRemoteTokenMessenger(
      domain: BigNumberish,
      tokenMessenger: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositForBurn(
      amount: BigNumberish,
      destinationDomain: BigNumberish,
      mintRecipient: BytesLike,
      burnToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    depositForBurnWithCaller(
      amount: BigNumberish,
      destinationDomain: BigNumberish,
      mintRecipient: BytesLike,
      burnToken: string,
      destinationCaller: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    handleReceiveMessage(
      remoteDomain: BigNumberish,
      sender: BytesLike,
      messageBody: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    localMessageTransmitter(overrides?: CallOverrides): Promise<BigNumber>;

    localMinter(overrides?: CallOverrides): Promise<BigNumber>;

    messageBodyVersion(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    remoteTokenMessengers(domain: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    removeLocalMinter(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    removeRemoteTokenMessenger(
      domain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    replaceDepositForBurn(
      originalMessage: BytesLike,
      originalAttestation: BytesLike,
      newDestinationCaller: BytesLike,
      newMintRecipient: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addLocalMinter(
      newLocalMinter: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    addRemoteTokenMessenger(
      domain: BigNumberish,
      tokenMessenger: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositForBurn(
      amount: BigNumberish,
      destinationDomain: BigNumberish,
      mintRecipient: BytesLike,
      burnToken: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    depositForBurnWithCaller(
      amount: BigNumberish,
      destinationDomain: BigNumberish,
      mintRecipient: BytesLike,
      burnToken: string,
      destinationCaller: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    handleReceiveMessage(
      remoteDomain: BigNumberish,
      sender: BytesLike,
      messageBody: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    localMessageTransmitter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    localMinter(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    messageBodyVersion(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    remoteTokenMessengers(domain: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    removeLocalMinter(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    removeRemoteTokenMessenger(
      domain: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    replaceDepositForBurn(
      originalMessage: BytesLike,
      originalAttestation: BytesLike,
      newDestinationCaller: BytesLike,
      newMintRecipient: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;
  };
}
