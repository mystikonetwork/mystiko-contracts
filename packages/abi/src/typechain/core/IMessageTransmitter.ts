/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface IMessageTransmitterInterface extends utils.Interface {
  contractName: 'IMessageTransmitter';
  functions: {
    'acceptOwnership()': FunctionFragment;
    'attesterManager()': FunctionFragment;
    'disableAttester(address)': FunctionFragment;
    'enableAttester(address)': FunctionFragment;
    'getEnabledAttester(uint256)': FunctionFragment;
    'getNumEnabledAttesters()': FunctionFragment;
    'isEnabledAttester(address)': FunctionFragment;
    'localDomain()': FunctionFragment;
    'maxMessageBodySize()': FunctionFragment;
    'nextAvailableNonce()': FunctionFragment;
    'owner()': FunctionFragment;
    'pause()': FunctionFragment;
    'paused()': FunctionFragment;
    'pauser()': FunctionFragment;
    'pendingOwner()': FunctionFragment;
    'receiveMessage(bytes,bytes)': FunctionFragment;
    'replaceMessage(bytes,bytes,bytes,bytes32)': FunctionFragment;
    'sendMessage(uint32,bytes32,bytes)': FunctionFragment;
    'sendMessageWithCaller(uint32,bytes32,bytes32,bytes)': FunctionFragment;
    'setMaxMessageBodySize(uint256)': FunctionFragment;
    'setSignatureThreshold(uint256)': FunctionFragment;
    'transferOwnership(address)': FunctionFragment;
    'unpause()': FunctionFragment;
    'updateAttesterManager(address)': FunctionFragment;
    'updatePauser(address)': FunctionFragment;
    'usedNonces(bytes32)': FunctionFragment;
    'version()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'acceptOwnership', values?: undefined): string;
  encodeFunctionData(functionFragment: 'attesterManager', values?: undefined): string;
  encodeFunctionData(functionFragment: 'disableAttester', values: [string]): string;
  encodeFunctionData(functionFragment: 'enableAttester', values: [string]): string;
  encodeFunctionData(functionFragment: 'getEnabledAttester', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'getNumEnabledAttesters', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isEnabledAttester', values: [string]): string;
  encodeFunctionData(functionFragment: 'localDomain', values?: undefined): string;
  encodeFunctionData(functionFragment: 'maxMessageBodySize', values?: undefined): string;
  encodeFunctionData(functionFragment: 'nextAvailableNonce', values?: undefined): string;
  encodeFunctionData(functionFragment: 'owner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'paused', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pauser', values?: undefined): string;
  encodeFunctionData(functionFragment: 'pendingOwner', values?: undefined): string;
  encodeFunctionData(functionFragment: 'receiveMessage', values: [BytesLike, BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'replaceMessage',
    values: [BytesLike, BytesLike, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'sendMessage', values: [BigNumberish, BytesLike, BytesLike]): string;
  encodeFunctionData(
    functionFragment: 'sendMessageWithCaller',
    values: [BigNumberish, BytesLike, BytesLike, BytesLike],
  ): string;
  encodeFunctionData(functionFragment: 'setMaxMessageBodySize', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'setSignatureThreshold', values: [BigNumberish]): string;
  encodeFunctionData(functionFragment: 'transferOwnership', values: [string]): string;
  encodeFunctionData(functionFragment: 'unpause', values?: undefined): string;
  encodeFunctionData(functionFragment: 'updateAttesterManager', values: [string]): string;
  encodeFunctionData(functionFragment: 'updatePauser', values: [string]): string;
  encodeFunctionData(functionFragment: 'usedNonces', values: [BytesLike]): string;
  encodeFunctionData(functionFragment: 'version', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'acceptOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'attesterManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'disableAttester', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'enableAttester', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getEnabledAttester', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'getNumEnabledAttesters', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isEnabledAttester', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'localDomain', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'maxMessageBodySize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'nextAvailableNonce', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'owner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'paused', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pauser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'pendingOwner', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'receiveMessage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'replaceMessage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sendMessage', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'sendMessageWithCaller', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setMaxMessageBodySize', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'setSignatureThreshold', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'transferOwnership', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'unpause', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updateAttesterManager', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'updatePauser', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'usedNonces', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'version', data: BytesLike): Result;

  events: {
    'AttesterDisabled(address)': EventFragment;
    'AttesterEnabled(address)': EventFragment;
    'AttesterManagerUpdated(address,address)': EventFragment;
    'MessageReceived(address,uint32,uint64,bytes32,bytes)': EventFragment;
    'MessageSent(bytes)': EventFragment;
    'OwnershipTransferStarted(address,address)': EventFragment;
    'OwnershipTransferred(address,address)': EventFragment;
    'Pause()': EventFragment;
    'PauserChanged(address)': EventFragment;
    'SignatureThresholdUpdated(uint256,uint256)': EventFragment;
    'Unpause()': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'AttesterDisabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AttesterEnabled'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'AttesterManagerUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MessageReceived'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'MessageSent'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferStarted'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'OwnershipTransferred'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Pause'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'PauserChanged'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'SignatureThresholdUpdated'): EventFragment;
  getEvent(nameOrSignatureOrTopic: 'Unpause'): EventFragment;
}

export type AttesterDisabledEvent = TypedEvent<[string], { attester: string }>;

export type AttesterDisabledEventFilter = TypedEventFilter<AttesterDisabledEvent>;

export type AttesterEnabledEvent = TypedEvent<[string], { attester: string }>;

export type AttesterEnabledEventFilter = TypedEventFilter<AttesterEnabledEvent>;

export type AttesterManagerUpdatedEvent = TypedEvent<
  [string, string],
  { previousAttesterManager: string; newAttesterManager: string }
>;

export type AttesterManagerUpdatedEventFilter = TypedEventFilter<AttesterManagerUpdatedEvent>;

export type MessageReceivedEvent = TypedEvent<
  [string, number, BigNumber, string, string],
  {
    caller: string;
    sourceDomain: number;
    nonce: BigNumber;
    sender: string;
    messageBody: string;
  }
>;

export type MessageReceivedEventFilter = TypedEventFilter<MessageReceivedEvent>;

export type MessageSentEvent = TypedEvent<[string], { message: string }>;

export type MessageSentEventFilter = TypedEventFilter<MessageSentEvent>;

export type OwnershipTransferStartedEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferStartedEventFilter = TypedEventFilter<OwnershipTransferStartedEvent>;

export type OwnershipTransferredEvent = TypedEvent<
  [string, string],
  { previousOwner: string; newOwner: string }
>;

export type OwnershipTransferredEventFilter = TypedEventFilter<OwnershipTransferredEvent>;

export type PauseEvent = TypedEvent<[], {}>;

export type PauseEventFilter = TypedEventFilter<PauseEvent>;

export type PauserChangedEvent = TypedEvent<[string], { newAddress: string }>;

export type PauserChangedEventFilter = TypedEventFilter<PauserChangedEvent>;

export type SignatureThresholdUpdatedEvent = TypedEvent<
  [BigNumber, BigNumber],
  { oldSignatureThreshold: BigNumber; newSignatureThreshold: BigNumber }
>;

export type SignatureThresholdUpdatedEventFilter = TypedEventFilter<SignatureThresholdUpdatedEvent>;

export type UnpauseEvent = TypedEvent<[], {}>;

export type UnpauseEventFilter = TypedEventFilter<UnpauseEvent>;

export interface IMessageTransmitter extends BaseContract {
  contractName: 'IMessageTransmitter';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMessageTransmitterInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    attesterManager(overrides?: CallOverrides): Promise<[string]>;

    disableAttester(
      attester: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    enableAttester(
      attester: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    getEnabledAttester(index: BigNumberish, overrides?: CallOverrides): Promise<[string]>;

    getNumEnabledAttesters(overrides?: CallOverrides): Promise<[BigNumber]>;

    isEnabledAttester(attester: string, overrides?: CallOverrides): Promise<[boolean]>;

    localDomain(overrides?: CallOverrides): Promise<[number]>;

    maxMessageBodySize(overrides?: CallOverrides): Promise<[BigNumber]>;

    nextAvailableNonce(overrides?: CallOverrides): Promise<[BigNumber]>;

    owner(overrides?: CallOverrides): Promise<[string]>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    paused(overrides?: CallOverrides): Promise<[boolean]>;

    pauser(overrides?: CallOverrides): Promise<[string]>;

    pendingOwner(overrides?: CallOverrides): Promise<[string]>;

    receiveMessage(
      message: BytesLike,
      attestation: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    replaceMessage(
      originalMessage: BytesLike,
      originalAttestation: BytesLike,
      newMessageBody: BytesLike,
      newDestinationCaller: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sendMessage(
      destinationDomain: BigNumberish,
      recipient: BytesLike,
      messageBody: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    sendMessageWithCaller(
      destinationDomain: BigNumberish,
      recipient: BytesLike,
      destinationCaller: BytesLike,
      messageBody: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setMaxMessageBodySize(
      newMaxMessageBodySize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    setSignatureThreshold(
      newSignatureThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

    updateAttesterManager(
      newAttesterManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    updatePauser(
      newPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    usedNonces(nonce: BytesLike, overrides?: CallOverrides): Promise<[boolean]>;

    version(overrides?: CallOverrides): Promise<[number]>;
  };

  acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  attesterManager(overrides?: CallOverrides): Promise<string>;

  disableAttester(
    attester: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  enableAttester(
    attester: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  getEnabledAttester(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

  getNumEnabledAttesters(overrides?: CallOverrides): Promise<BigNumber>;

  isEnabledAttester(attester: string, overrides?: CallOverrides): Promise<boolean>;

  localDomain(overrides?: CallOverrides): Promise<number>;

  maxMessageBodySize(overrides?: CallOverrides): Promise<BigNumber>;

  nextAvailableNonce(overrides?: CallOverrides): Promise<BigNumber>;

  owner(overrides?: CallOverrides): Promise<string>;

  pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  paused(overrides?: CallOverrides): Promise<boolean>;

  pauser(overrides?: CallOverrides): Promise<string>;

  pendingOwner(overrides?: CallOverrides): Promise<string>;

  receiveMessage(
    message: BytesLike,
    attestation: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  replaceMessage(
    originalMessage: BytesLike,
    originalAttestation: BytesLike,
    newMessageBody: BytesLike,
    newDestinationCaller: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  sendMessage(
    destinationDomain: BigNumberish,
    recipient: BytesLike,
    messageBody: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  sendMessageWithCaller(
    destinationDomain: BigNumberish,
    recipient: BytesLike,
    destinationCaller: BytesLike,
    messageBody: BytesLike,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setMaxMessageBodySize(
    newMaxMessageBodySize: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  setSignatureThreshold(
    newSignatureThreshold: BigNumberish,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  transferOwnership(
    newOwner: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<ContractTransaction>;

  updateAttesterManager(
    newAttesterManager: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  updatePauser(
    newPauser: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  usedNonces(nonce: BytesLike, overrides?: CallOverrides): Promise<boolean>;

  version(overrides?: CallOverrides): Promise<number>;

  callStatic: {
    acceptOwnership(overrides?: CallOverrides): Promise<void>;

    attesterManager(overrides?: CallOverrides): Promise<string>;

    disableAttester(attester: string, overrides?: CallOverrides): Promise<void>;

    enableAttester(attester: string, overrides?: CallOverrides): Promise<void>;

    getEnabledAttester(index: BigNumberish, overrides?: CallOverrides): Promise<string>;

    getNumEnabledAttesters(overrides?: CallOverrides): Promise<BigNumber>;

    isEnabledAttester(attester: string, overrides?: CallOverrides): Promise<boolean>;

    localDomain(overrides?: CallOverrides): Promise<number>;

    maxMessageBodySize(overrides?: CallOverrides): Promise<BigNumber>;

    nextAvailableNonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<string>;

    pause(overrides?: CallOverrides): Promise<void>;

    paused(overrides?: CallOverrides): Promise<boolean>;

    pauser(overrides?: CallOverrides): Promise<string>;

    pendingOwner(overrides?: CallOverrides): Promise<string>;

    receiveMessage(message: BytesLike, attestation: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    replaceMessage(
      originalMessage: BytesLike,
      originalAttestation: BytesLike,
      newMessageBody: BytesLike,
      newDestinationCaller: BytesLike,
      overrides?: CallOverrides,
    ): Promise<void>;

    sendMessage(
      destinationDomain: BigNumberish,
      recipient: BytesLike,
      messageBody: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    sendMessageWithCaller(
      destinationDomain: BigNumberish,
      recipient: BytesLike,
      destinationCaller: BytesLike,
      messageBody: BytesLike,
      overrides?: CallOverrides,
    ): Promise<BigNumber>;

    setMaxMessageBodySize(newMaxMessageBodySize: BigNumberish, overrides?: CallOverrides): Promise<void>;

    setSignatureThreshold(newSignatureThreshold: BigNumberish, overrides?: CallOverrides): Promise<void>;

    transferOwnership(newOwner: string, overrides?: CallOverrides): Promise<void>;

    unpause(overrides?: CallOverrides): Promise<void>;

    updateAttesterManager(newAttesterManager: string, overrides?: CallOverrides): Promise<void>;

    updatePauser(newPauser: string, overrides?: CallOverrides): Promise<void>;

    usedNonces(nonce: BytesLike, overrides?: CallOverrides): Promise<boolean>;

    version(overrides?: CallOverrides): Promise<number>;
  };

  filters: {
    'AttesterDisabled(address)'(attester?: string | null): AttesterDisabledEventFilter;
    AttesterDisabled(attester?: string | null): AttesterDisabledEventFilter;

    'AttesterEnabled(address)'(attester?: string | null): AttesterEnabledEventFilter;
    AttesterEnabled(attester?: string | null): AttesterEnabledEventFilter;

    'AttesterManagerUpdated(address,address)'(
      previousAttesterManager?: string | null,
      newAttesterManager?: string | null,
    ): AttesterManagerUpdatedEventFilter;
    AttesterManagerUpdated(
      previousAttesterManager?: string | null,
      newAttesterManager?: string | null,
    ): AttesterManagerUpdatedEventFilter;

    'MessageReceived(address,uint32,uint64,bytes32,bytes)'(
      caller?: string | null,
      sourceDomain?: null,
      nonce?: BigNumberish | null,
      sender?: null,
      messageBody?: null,
    ): MessageReceivedEventFilter;
    MessageReceived(
      caller?: string | null,
      sourceDomain?: null,
      nonce?: BigNumberish | null,
      sender?: null,
      messageBody?: null,
    ): MessageReceivedEventFilter;

    'MessageSent(bytes)'(message?: null): MessageSentEventFilter;
    MessageSent(message?: null): MessageSentEventFilter;

    'OwnershipTransferStarted(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;
    OwnershipTransferStarted(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferStartedEventFilter;

    'OwnershipTransferred(address,address)'(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;
    OwnershipTransferred(
      previousOwner?: string | null,
      newOwner?: string | null,
    ): OwnershipTransferredEventFilter;

    'Pause()'(): PauseEventFilter;
    Pause(): PauseEventFilter;

    'PauserChanged(address)'(newAddress?: string | null): PauserChangedEventFilter;
    PauserChanged(newAddress?: string | null): PauserChangedEventFilter;

    'SignatureThresholdUpdated(uint256,uint256)'(
      oldSignatureThreshold?: null,
      newSignatureThreshold?: null,
    ): SignatureThresholdUpdatedEventFilter;
    SignatureThresholdUpdated(
      oldSignatureThreshold?: null,
      newSignatureThreshold?: null,
    ): SignatureThresholdUpdatedEventFilter;

    'Unpause()'(): UnpauseEventFilter;
    Unpause(): UnpauseEventFilter;
  };

  estimateGas: {
    acceptOwnership(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    attesterManager(overrides?: CallOverrides): Promise<BigNumber>;

    disableAttester(
      attester: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    enableAttester(
      attester: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    getEnabledAttester(index: BigNumberish, overrides?: CallOverrides): Promise<BigNumber>;

    getNumEnabledAttesters(overrides?: CallOverrides): Promise<BigNumber>;

    isEnabledAttester(attester: string, overrides?: CallOverrides): Promise<BigNumber>;

    localDomain(overrides?: CallOverrides): Promise<BigNumber>;

    maxMessageBodySize(overrides?: CallOverrides): Promise<BigNumber>;

    nextAvailableNonce(overrides?: CallOverrides): Promise<BigNumber>;

    owner(overrides?: CallOverrides): Promise<BigNumber>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    paused(overrides?: CallOverrides): Promise<BigNumber>;

    pauser(overrides?: CallOverrides): Promise<BigNumber>;

    pendingOwner(overrides?: CallOverrides): Promise<BigNumber>;

    receiveMessage(
      message: BytesLike,
      attestation: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    replaceMessage(
      originalMessage: BytesLike,
      originalAttestation: BytesLike,
      newMessageBody: BytesLike,
      newDestinationCaller: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    sendMessage(
      destinationDomain: BigNumberish,
      recipient: BytesLike,
      messageBody: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    sendMessageWithCaller(
      destinationDomain: BigNumberish,
      recipient: BytesLike,
      destinationCaller: BytesLike,
      messageBody: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setMaxMessageBodySize(
      newMaxMessageBodySize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    setSignatureThreshold(
      newSignatureThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<BigNumber>;

    updateAttesterManager(
      newAttesterManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    updatePauser(
      newPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    usedNonces(nonce: BytesLike, overrides?: CallOverrides): Promise<BigNumber>;

    version(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    acceptOwnership(
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    attesterManager(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    disableAttester(
      attester: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    enableAttester(
      attester: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    getEnabledAttester(index: BigNumberish, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    getNumEnabledAttesters(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isEnabledAttester(attester: string, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    localDomain(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    maxMessageBodySize(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    nextAvailableNonce(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    owner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    paused(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pauser(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    pendingOwner(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    receiveMessage(
      message: BytesLike,
      attestation: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    replaceMessage(
      originalMessage: BytesLike,
      originalAttestation: BytesLike,
      newMessageBody: BytesLike,
      newDestinationCaller: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    sendMessage(
      destinationDomain: BigNumberish,
      recipient: BytesLike,
      messageBody: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    sendMessageWithCaller(
      destinationDomain: BigNumberish,
      recipient: BytesLike,
      destinationCaller: BytesLike,
      messageBody: BytesLike,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setMaxMessageBodySize(
      newMaxMessageBodySize: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    setSignatureThreshold(
      newSignatureThreshold: BigNumberish,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    transferOwnership(
      newOwner: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    unpause(overrides?: Overrides & { from?: string | Promise<string> }): Promise<PopulatedTransaction>;

    updateAttesterManager(
      newAttesterManager: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    updatePauser(
      newPauser: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    usedNonces(nonce: BytesLike, overrides?: CallOverrides): Promise<PopulatedTransaction>;

    version(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
