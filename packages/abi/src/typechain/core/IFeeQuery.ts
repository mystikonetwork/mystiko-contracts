/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export type QueryFeeParamsStruct = {
  assetAddress: string;
  amount: BigNumberish;
};

export type QueryFeeParamsStructOutput = [string, BigNumber] & {
  assetAddress: string;
  amount: BigNumber;
};

export type QueryFeeResponseStruct = {
  feeAmount: BigNumberish;
  feePool: string;
};

export type QueryFeeResponseStructOutput = [BigNumber, string] & {
  feeAmount: BigNumber;
  feePool: string;
};

export interface IFeeQueryInterface extends utils.Interface {
  contractName: 'IFeeQuery';
  functions: {
    'queryFee((address,uint256))': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'queryFee', values: [QueryFeeParamsStruct]): string;

  decodeFunctionResult(functionFragment: 'queryFee', data: BytesLike): Result;

  events: {};
}

export interface IFeeQuery extends BaseContract {
  contractName: 'IFeeQuery';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IFeeQueryInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    queryFee(
      _params: QueryFeeParamsStruct,
      overrides?: CallOverrides,
    ): Promise<[QueryFeeResponseStructOutput]>;
  };

  queryFee(_params: QueryFeeParamsStruct, overrides?: CallOverrides): Promise<QueryFeeResponseStructOutput>;

  callStatic: {
    queryFee(_params: QueryFeeParamsStruct, overrides?: CallOverrides): Promise<QueryFeeResponseStructOutput>;
  };

  filters: {};

  estimateGas: {
    queryFee(_params: QueryFeeParamsStruct, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    queryFee(_params: QueryFeeParamsStruct, overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
