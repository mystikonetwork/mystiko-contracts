/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BigNumberish,
  BytesLike,
  CallOverrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export type CertificateParamsStruct = {
  account: string;
  asset: string;
  deadline: BigNumberish;
  signature: BytesLike;
};

export type CertificateParamsStructOutput = [string, string, BigNumber, string] & {
  account: string;
  asset: string;
  deadline: BigNumber;
  signature: string;
};

export interface IMystikoCertificateInterface extends utils.Interface {
  contractName: 'IMystikoCertificate';
  functions: {
    'getCertificateIssuer()': FunctionFragment;
    'isCertificateCheckEnabled()': FunctionFragment;
    'verifyCertificate((address,address,uint256,bytes))': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'getCertificateIssuer', values?: undefined): string;
  encodeFunctionData(functionFragment: 'isCertificateCheckEnabled', values?: undefined): string;
  encodeFunctionData(functionFragment: 'verifyCertificate', values: [CertificateParamsStruct]): string;

  decodeFunctionResult(functionFragment: 'getCertificateIssuer', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'isCertificateCheckEnabled', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'verifyCertificate', data: BytesLike): Result;

  events: {};
}

export interface IMystikoCertificate extends BaseContract {
  contractName: 'IMystikoCertificate';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: IMystikoCertificateInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    getCertificateIssuer(overrides?: CallOverrides): Promise<[string]>;

    isCertificateCheckEnabled(overrides?: CallOverrides): Promise<[boolean]>;

    verifyCertificate(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<[boolean]>;
  };

  getCertificateIssuer(overrides?: CallOverrides): Promise<string>;

  isCertificateCheckEnabled(overrides?: CallOverrides): Promise<boolean>;

  verifyCertificate(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<boolean>;

  callStatic: {
    getCertificateIssuer(overrides?: CallOverrides): Promise<string>;

    isCertificateCheckEnabled(overrides?: CallOverrides): Promise<boolean>;

    verifyCertificate(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<boolean>;
  };

  filters: {};

  estimateGas: {
    getCertificateIssuer(overrides?: CallOverrides): Promise<BigNumber>;

    isCertificateCheckEnabled(overrides?: CallOverrides): Promise<BigNumber>;

    verifyCertificate(_params: CertificateParamsStruct, overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    getCertificateIssuer(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    isCertificateCheckEnabled(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    verifyCertificate(
      _params: CertificateParamsStruct,
      overrides?: CallOverrides,
    ): Promise<PopulatedTransaction>;
  };
}
