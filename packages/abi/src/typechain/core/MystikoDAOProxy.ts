/* Autogenerated file. Do not edit manually. */
/* tslint:disable */
/* eslint-disable */
import {
  BaseContract,
  BigNumber,
  BytesLike,
  CallOverrides,
  ContractTransaction,
  Overrides,
  PopulatedTransaction,
  Signer,
  utils,
} from 'ethers';
import { FunctionFragment, Result, EventFragment } from '@ethersproject/abi';
import { Listener, Provider } from '@ethersproject/providers';
import { TypedEventFilter, TypedEvent, TypedListener, OnEvent } from './common';

export interface MystikoDAOProxyInterface extends utils.Interface {
  contractName: 'MystikoDAOProxy';
  functions: {
    'center()': FunctionFragment;
    'changeRegistry(address)': FunctionFragment;
    'registry()': FunctionFragment;
  };

  encodeFunctionData(functionFragment: 'center', values?: undefined): string;
  encodeFunctionData(functionFragment: 'changeRegistry', values: [string]): string;
  encodeFunctionData(functionFragment: 'registry', values?: undefined): string;

  decodeFunctionResult(functionFragment: 'center', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'changeRegistry', data: BytesLike): Result;
  decodeFunctionResult(functionFragment: 'registry', data: BytesLike): Result;

  events: {
    'RegistryChanged(address)': EventFragment;
  };

  getEvent(nameOrSignatureOrTopic: 'RegistryChanged'): EventFragment;
}

export type RegistryChangedEvent = TypedEvent<[string], { registry: string }>;

export type RegistryChangedEventFilter = TypedEventFilter<RegistryChangedEvent>;

export interface MystikoDAOProxy extends BaseContract {
  contractName: 'MystikoDAOProxy';
  connect(signerOrProvider: Signer | Provider | string): this;
  attach(addressOrName: string): this;
  deployed(): Promise<this>;

  interface: MystikoDAOProxyInterface;

  queryFilter<TEvent extends TypedEvent>(
    event: TypedEventFilter<TEvent>,
    fromBlockOrBlockhash?: string | number | undefined,
    toBlock?: string | number | undefined,
  ): Promise<Array<TEvent>>;

  listeners<TEvent extends TypedEvent>(eventFilter?: TypedEventFilter<TEvent>): Array<TypedListener<TEvent>>;
  listeners(eventName?: string): Array<Listener>;
  removeAllListeners<TEvent extends TypedEvent>(eventFilter: TypedEventFilter<TEvent>): this;
  removeAllListeners(eventName?: string): this;
  off: OnEvent<this>;
  on: OnEvent<this>;
  once: OnEvent<this>;
  removeListener: OnEvent<this>;

  functions: {
    center(overrides?: CallOverrides): Promise<[string]>;

    changeRegistry(
      _newRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<ContractTransaction>;

    registry(overrides?: CallOverrides): Promise<[string]>;
  };

  center(overrides?: CallOverrides): Promise<string>;

  changeRegistry(
    _newRegistry: string,
    overrides?: Overrides & { from?: string | Promise<string> },
  ): Promise<ContractTransaction>;

  registry(overrides?: CallOverrides): Promise<string>;

  callStatic: {
    center(overrides?: CallOverrides): Promise<string>;

    changeRegistry(_newRegistry: string, overrides?: CallOverrides): Promise<void>;

    registry(overrides?: CallOverrides): Promise<string>;
  };

  filters: {
    'RegistryChanged(address)'(registry?: string | null): RegistryChangedEventFilter;
    RegistryChanged(registry?: string | null): RegistryChangedEventFilter;
  };

  estimateGas: {
    center(overrides?: CallOverrides): Promise<BigNumber>;

    changeRegistry(
      _newRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<BigNumber>;

    registry(overrides?: CallOverrides): Promise<BigNumber>;
  };

  populateTransaction: {
    center(overrides?: CallOverrides): Promise<PopulatedTransaction>;

    changeRegistry(
      _newRegistry: string,
      overrides?: Overrides & { from?: string | Promise<string> },
    ): Promise<PopulatedTransaction>;

    registry(overrides?: CallOverrides): Promise<PopulatedTransaction>;
  };
}
